<sos>os.kill(os.getpid(), signal.SIGUSR1)<tab>send a signal `signal.SIGUSR1` to the current process<eos>
<sos>bytes.fromhex('4a4b4c').decode('utf-8')<tab>decode a hex string '4a4b4c' to UTF-8.<eos>
<sos>all(x == myList[0] for x in myList)<tab>check if all elements in list `myList` are identical<eos>
<sos>print('%*s : %*s' % (20, 'Python', 20, 'Very Good'))<tab>format number of spaces between strings `Python`, `:` and `Very Good` to be `20`<eos>
<sos>d.decode('cp1251').encode('utf8')<tab>None<eos>
<sos>res = {k: v for k, v in list(kwargs.items()) if v is not None}<tab>get rid of None values in dictionary `kwargs`<eos>
<sos>res = dict((k, v) for k, v in kwargs.items() if v is not None)<tab>get rid of None values in dictionary `kwargs`<eos>
<sos>subprocess.check_output('ps -ef | grep something | wc -l', shell=True)<tab>capture final output of a chain of system commands `ps -ef | grep something | wc -l`<eos>
<sos>"""""".join(['a', 'b', 'c'])<tab>concatenate a list of strings `['a', 'b', 'c']`<eos>
<sos>pd.Series(list(set(s1).intersection(set(s2))))<tab>find intersection data between series `s1` and series `s2`<eos>
<sos>client.send('HTTP/1.0 200 OK\r\n')<tab>sending http headers to `client`<eos>
<sos>then = datetime.datetime.strptime(when, '%Y-%m-%d').date()<tab>Format a datetime string `when` to extract date only<eos>
<sos>inputString.split('\n')<tab>split a multi-line string `inputString` into separate strings<eos>
<sos>' a \n b \r\n c '.split('\n')<tab>Split a multi-line string ` a \n b \r\n c ` by new line character `\n`<eos>
<sos>""":""".join(str(x) for x in b)<tab>concatenate elements of list `b` by a colon ":"<eos>
<sos>Entry.objects.filter()[:1].get()<tab>get the first object from a queryset in django model `Entry`<eos>
<sos>a.sum(axis=1)<tab>Calculate sum over all rows of 2D numpy array<eos>
<sos>warnings.simplefilter('always')<tab>enable warnings using action 'always'<eos>
<sos>print(' '.join(map(str, l)))<tab>concatenate items of list `l` with a space ' '<eos>
<sos>subprocess.call(['python.exe', 'hello.py', 'htmlfilename.htm'])<tab>run script 'hello.py' with argument 'htmlfilename.htm' on terminal using python executable<eos>
<sos>time.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')<tab>None<eos>
<sos>my_float = float(my_string.replace(',', ''))<tab>convert a string `my_string` with dot and comma into a float number `my_float`<eos>
<sos>float('123,456.908'.replace(',', ''))<tab>convert a string `123,456.908` with dot and comma into a floating number<eos>
<sos>sys.path.append('/path/to/whatever')<tab>set pythonpath in python script.<eos>
<sos>re.split('(\\W+)', 'Words, words, words.')<tab>split string 'Words, words, words.' using a regex '(\\W+)'<eos>
<sos>file = open('Output.txt', 'a')<tab>open a file `Output.txt` in append mode<eos>
<sos>urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')<tab>download a file "http://www.example.com/songs/mp3.mp3" over HTTP and save to "mp3.mp3"<eos>
<sos>u = urllib.request.urlopen(url)
f = open(file_name, 'wb')
meta = u.info()
file_size = int(meta.getheaders('Content-Length')[0])
print(('Downloading: %s Bytes: %s' % (file_name, file_size)))
file_size_dl = 0
block_sz = 8192
while True:
    buffer = u.read(block_sz)
    if (not buffer):
        break
    file_size_dl += len(buffer)
    f.write(buffer)
    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))
    status = (status + (chr(8) * (len(status) + 1)))
    print(status, end=' ')
f.close()<tab>download a file `url` over HTTP and save to `file_name`<eos>
<sos>response = urllib.request.urlopen('http://www.example.com/')
html = response.read()<tab>download a file 'http://www.example.com/' over HTTP<eos>
<sos>r = requests.get(url)<tab>download a file `url` over HTTP<eos>
<sos>response = requests.get(url, stream=True)
with open('10MB', 'wb') as handle:
    for data in tqdm(response.iter_content()):
        handle.write(data)<tab>download a file `url` over HTTP and save to "10MB"<eos>
<sos>parser.add_argument('--version', action='version', version='%(prog)s 2.0')<tab>argparse add argument with flag '--version' and version action of '%(prog)s 2.0' to parser `parser`<eos>
<sos>{i: d[i] for i in d if i != 'c'}<tab>remove key 'c' from dictionary `d`<eos>
<sos>pd.merge(split_df, csv_df, on=['key'], suffixes=('_left', '_right'))<tab>Create new DataFrame object by merging columns "key" of  dataframes `split_df` and `csv_df` and rename the columns from dataframes `split_df` and `csv_df` with suffix `_left` and `_right` respectively<eos>
<sos>s.split(' ', 4)<tab>Split a string `s` by space with `4` splits<eos>
<sos>input('Enter your input:')<tab>read keyboard-input<eos>
<sos>app.run(debug=True)<tab>enable debug mode on Flask application `app`<eos>
<sos>pickle.dump(mylist, open('save.txt', 'wb'))<tab>python save list `mylist` to file object 'save.txt'<eos>
<sos>scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)<tab>Multiply a matrix `P` with a 3d tensor `T` in scipy<eos>
<sos>numpy.zeros((3, 3, 3))<tab>Create 3d array of zeroes of size `(3,3,3)`<eos>
<sos>""" """.join(content.split(' ')[:-1])<tab>cut off the last word of a sentence `content`<eos>
<sos>x = np.asarray(x).reshape(1, -1)[(0), :]<tab>convert scalar `x` to array<eos>
<sos>sum(sum(i) if isinstance(i, list) else i for i in L)<tab>sum all elements of nested list `L`<eos>
<sos>struct.unpack('!f', '470FC614'.decode('hex'))[0]<tab>convert hex string '470FC614' to a float number<eos>
<sos>my_dict.update((x, y * 2) for x, y in list(my_dict.items()))<tab>Multiple each value by `2` for all keys in a dictionary `my_dict`<eos>
<sos>subprocess.call('sleep.sh', shell=True)<tab>running bash script 'sleep.sh'<eos>
<sos>""",""".join(l)<tab>Join elements of list `l` with a comma `,`<eos>
<sos>myList = ','.join(map(str, myList))<tab>make a comma-separated string from a list `myList`<eos>
<sos>list(reversed(list(range(10))))<tab>reverse the list that contains 1 to 10<eos>
<sos>print('lamp, bag, mirror'.replace('bag,', ''))<tab>remove substring 'bag,' from a string 'lamp, bag, mirror'<eos>
<sos>""".""".join(s.split('.')[::-1])<tab>Reverse the order of words, delimited by `.`, in string `s`<eos>
<sos>datetime.datetime.fromtimestamp(s).strftime('%Y-%m-%d %H:%M:%S.%f')<tab>convert epoch time represented as milliseconds `s` to string using format '%Y-%m-%d %H:%M:%S.%f'<eos>
<sos>time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(1236472051807 / 1000.0))<tab>parse milliseconds epoch time '1236472051807' to format '%Y-%m-%d %H:%M:%S'<eos>
<sos>(datetime.datetime.now() - datetime.timedelta(days=7)).date()<tab>get the date 7 days before the current date<eos>
<sos>print(sum(row[column] for row in data))<tab>sum elements at index `column` of each list in list `data`<eos>
<sos>[sum(row[i] for row in array) for i in range(len(array[0]))]<tab>sum columns of a list `array`<eos>
<sos>base64.b64encode(bytes('your string', 'utf-8'))<tab>encode binary string 'your string' to base64 code<eos>
<sos>dict((k, [d[k] for d in dicts]) for k in dicts[0])<tab>combine list of dictionaries `dicts` with the same keys in each list to a single dictionary<eos>
<sos>{k: [d[k] for d in dicts] for k in dicts[0]}<tab>Merge a nested dictionary `dicts` into a flat dictionary by concatenating nested values with the same key `k`<eos>
<sos>request.args['myParam']<tab>None<eos>
<sos>[k for k, v in list(Counter(mylist).items()) if v > 1]<tab>identify duplicate values in list `mylist`<eos>
<sos>sys.path.insert(1, os.path.join(os.path.dirname(__file__), 'apps'))<tab>Insert directory 'apps' into directory `__file__`<eos>
<sos>sys.path.append(os.path.join(os.path.dirname(__file__), 'subdir'))<tab>modify sys.path for python module `subdir`<eos>
<sos>db.execute("INSERT INTO present VALUES('test2', ?, 10)", (None,))<tab>Insert a 'None' value into a SQLite3 table.<eos>
<sos>[image for menuitem in list_of_menuitems for image in menuitem]<tab>flatten list `list_of_menuitems`<eos>
<sos>a.extend(b)<tab>append elements of a set `b` to a list `a`<eos>
<sos>a.extend(list(b))<tab>None<eos>
<sos>np.savetxt('c:\\data\\np.txt', df.values, fmt='%d')<tab>write the data of dataframe `df` into text file `np.txt`<eos>
<sos>df.to_csv('c:\\data\\pandas.txt', header=None, index=None, sep=' ', mode='a')<tab>write content of DataFrame `df` into text file 'c:\\data\\pandas.txt'<eos>
<sos>print(x.rpartition('-')[0])<tab>Split a string `x` by last occurrence of character `-`<eos>
<sos>print(x.rsplit('-', 1)[0])<tab>get the last part of a string before the character '-'<eos>
<sos>ftp.storlines('STOR ' + filename, open(filename, 'r'))<tab>upload file using FTP<eos>
<sos>browser.execute_script("document.getElementById('XYZ').value+='1'")<tab>add one to the hidden web element with id 'XYZ' with selenium python script<eos>
<sos>np.maximum([2, 3, 4], [1, 5, 2])<tab>create array containing the maximum value of respective elements of array `[2, 3, 4]` and array `[1, 5, 2]`<eos>
<sos>print(l[3:] + l[:3])<tab>print a list `l` and move first 3 elements to the end of the list<eos>
<sos>for fn in os.listdir('.'):
    if os.path.isfile(fn):
        pass<tab>loop over files in directory '.'<eos>
<sos>for (root, dirs, filenames) in os.walk(source):
    for f in filenames:
        pass<tab>loop over files in directory `source`<eos>
<sos>[int(1000 * random.random()) for i in range(10000)]<tab>create a random list of integers<eos>
<sos>datetime.datetime.now().strftime('%H:%M:%S.%f')<tab>None<eos>
<sos>db.GqlQuery('SELECT * FROM Schedule WHERE station = $1', foo.key())<tab>Google App Engine execute GQL query 'SELECT * FROM Schedule WHERE station = $1' with parameter `foo.key()`<eos>
<sos>df.b.str.contains('^f')<tab>filter rows in pandas starting with alphabet 'f' using regular expression.<eos>
<sos>print('\n'.join('\t'.join(str(col) for col in row) for row in tab))<tab>print a 2 dimensional list `tab` as a table with delimiters<eos>
<sos>df.set_index(list('BC')).drop(tuples, errors='ignore').reset_index()<tab>pandas: delete rows in dataframe `df` based on multiple columns values<eos>
<sos>"""({:d} goals, ${:d})""".format(self.goals, self.penalties)<tab>format the variables `self.goals` and `self.penalties` using string formatting<eos>
<sos>"""({} goals, ${})""".format(self.goals, self.penalties)<tab>format string "({} goals, ${})" with variables `goals` and `penalties`<eos>
<sos>"""({0.goals} goals, ${0.penalties})""".format(self)<tab>format string "({0.goals} goals, ${0.penalties})"<eos>
<sos>[int(''.join(str(d) for d in x)) for x in L]<tab>convert list of lists `L` to list of integers<eos>
<sos>[''.join(str(d) for d in x) for x in L]<tab>combine elements of each list in list `L` into digits of a single integer<eos>
<sos>L = [int(''.join([str(y) for y in x])) for x in L]<tab>convert a list of lists `L` to list of integers<eos>
<sos>myfile.write('\n'.join(lines))<tab>write the elements of list `lines` concatenated by special character '\n' to file `myfile`<eos>
<sos>[x for x in ['AAT', 'XAC', 'ANT', 'TTA'] if 'X' not in x and 'N' not in x]<tab>removing an element from a list based on a predicate 'X' or 'N'<eos>
<sos>text = re.sub('\\b(\\w+)( \\1\\b)+', '\\1', text)<tab>Remove duplicate words from a string `text` using regex<eos>
<sos>df.astype(bool).sum(axis=1)<tab>count non zero values in each column in pandas data frame<eos>
<sos>re.search('(?<!Distillr)\\\\AcroTray\\.exe', 'C:\\SomeDir\\AcroTray.exe')<tab>search for string that matches regular expression pattern '(?<!Distillr)\\\\AcroTray\\.exe' in string 'C:\\SomeDir\\AcroTray.exe'<eos>
<sos>"""QH QD JC KD JS""".split()<tab>split string 'QH QD JC KD JS' into a list on white spaces<eos>
<sos>print(re.search('>.*<', line).group(0))<tab>search for occurrences of regex pattern '>.*<' in xml string `line`<eos>
<sos>open(filename, 'w').close()<tab>erase all the contents of a file `filename`<eos>
<sos>datetime.datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')<tab>convert a string into datetime using the format '%Y-%m-%d %H:%M:%S.%f'<eos>
<sos>[index for index, item in enumerate(thelist) if item[0] == '332']<tab>find the index of a list with the first element equal to '332' within the list of lists `thelist`<eos>
<sos>re.sub('[^\\sa-zA-Z0-9]', '', text).lower().strip()<tab>lower a string `text` and remove non-alphanumeric characters aside from space<eos>
<sos>re.sub('(?!\\s)[\\W_]', '', text).lower().strip()<tab>remove all non-alphanumeric characters except space from a string `text` and lower it<eos>
<sos>plt.plot(x, y, label='H\u2082O')<tab>subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.<eos>
<sos>plt.plot(x, y, label='$H_2O$')<tab>subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.<eos>
<sos>[x for x in mylist if len(x) == 3]<tab>loop over a list `mylist` if sublists length equals 3<eos>
<sos>lst = [Object() for _ in range(100)]<tab>initialize a list `lst` of 100 objects Object()<eos>
<sos>lst = [Object() for i in range(100)]<tab>create list `lst` containing 100 instances of object `Object`<eos>
<sos>self.driver.find_element_by_css_selector('.someclass a').get_attribute('href')<tab>get the content of child tag with`href` attribute whose parent has css `someclass`<eos>
<sos>df1.merge(df2, on='Date_Time')<tab>joining data from dataframe `df1` with data from dataframe `df2` based on matching values of column 'Date_Time' in both dataframes<eos>
<sos>'first string is: %s, second one is: %s' % (str1, 'geo.tif')<tab>use `%s` operator to print variable values `str1` inside a string<eos>
<sos>[x.strip() for x in '2.MATCHES $$TEXT$$ STRING'.split('$$TEXT$$')]<tab>None<eos>
<sos>if (not os.path.exists(directory)):
    os.makedirs(directory)<tab>check if directory `directory ` exists and create it if necessary<eos>
<sos>try:
    os.makedirs(path)
except OSError:
    if (not os.path.isdir(path)):
        raise<tab>check if a directory `path` exists and create it if necessary<eos>
<sos>distutils.dir_util.mkpath(path)<tab>check if a directory `path` exists and create it if necessary<eos>
<sos>try:
    os.makedirs(path)
except OSError as exception:
    if (exception.errno != errno.EEXIST):
        raise<tab>check if a directory `path` exists and create it if necessary<eos>
<sos>re.sub('\\bH3\\b', 'H1', text)<tab>Replace a separate word 'H3' by 'H1' in a string 'text'<eos>
<sos>re.sub('\\D', '', 'aas30dsa20')<tab>substitute ASCII letters in string 'aas30dsa20' with empty string ''<eos>
<sos>"""""".join([x for x in 'aas30dsa20' if x.isdigit()])<tab>get digits only from a string `aas30dsa20` using lambda function<eos>
<sos>print(soup.find('name').string)<tab>access a tag called "name" in beautifulsoup `soup`<eos>
<sos>records = dict((record['_id'], record) for record in cursor)<tab>get a dictionary `records` of key-value pairs in PyMongo cursor `cursor`<eos>
<sos>np.concatenate((A, B))<tab>Create new matrix object  by concatenating data from matrix A and matrix B<eos>
<sos>np.vstack((A, B))<tab>concat two matrices `A` and `B` in numpy<eos>
<sos>os.stat(filepath).st_size<tab>Get the characters count in a file `filepath`<eos>
<sos>l.count('a')<tab>count the occurrences of item "a" in list `l`<eos>
<sos>Counter(l)<tab>count the occurrences of items in list `l`<eos>
<sos>[[x, l.count(x)] for x in set(l)]<tab>count the occurrences of items in list `l`<eos>
<sos>dict(((x, l.count(x)) for x in set(l)))<tab>count the occurrences of items in list `l`<eos>
<sos>l.count('b')<tab>count the occurrences of item "b" in list `l`<eos>
<sos>shutil.copy(srcfile, dstdir)<tab>copy file `srcfile` to directory `dstdir`<eos>
<sos>max(k for k, v in x.items() if v != 0)<tab>find the key associated with the largest value in dictionary `x` whilst key is non-zero value<eos>
<sos>(k for k, v in x.items() if v != 0)<tab>get the largest key whose not associated with value of 0 in dictionary `x`<eos>
<sos>max(k for k, v in x.items() if v != 0)<tab>get the largest key in a dictionary `x` with non-zero value<eos>
<sos>file.seek(0)<tab>Put the curser at beginning of the file<eos>
<sos>df['c'] = np.where(df['a'].isnull, df['b'], df['a'])<tab>combine values from column 'b' and column 'a' of dataframe `df`  into column 'c' of datafram `df`<eos>
<sos>del d['ele']<tab>remove key 'ele' from dictionary `d`<eos>
<sos>MyModel.objects.update(timestamp=F('timestamp') + timedelta(days=36524.25))<tab>Update datetime field in `MyModel` to be the existing `timestamp` plus 100 years<eos>
<sos>['it'] + ['was'] + ['annoying']<tab>merge list `['it']` and list `['was']` and list `['annoying']` into one list<eos>
<sos>str(int(x) + 1).zfill(len(x))<tab>increment a value with leading zeroes in a number `x`<eos>
<sos>all(df.index[:-1] <= df.index[1:])<tab>check if a pandas dataframe `df`'s index is sorted<eos>
<sos>list(t)<tab>Convert tuple `t` to list<eos>
<sos>tuple(l)<tab>Convert list `t` to tuple<eos>
<sos>level1 = map(list, level1)<tab>Convert tuple `level1` to list<eos>
<sos>pprint.pprint(dataobject, logFile)<tab>send the output of pprint object `dataobject` to file `logFile`<eos>
<sos>df.loc[df['BoolCol']]<tab>get index of rows in column 'BoolCol'<eos>
<sos>df.iloc[np.flatnonzero(df['BoolCol'])]<tab>Create a list containing the indexes of rows where the value of column 'BoolCol' in dataframe `df` are equal to True<eos>
<sos>df[df['BoolCol'] == True].index.tolist()<tab>get list of indexes of rows where column 'BoolCol' values match True<eos>
<sos>df[df['BoolCol']].index.tolist()<tab>get index of rows in dataframe `df` which column 'BoolCol' matches value True<eos>
<sos>os.chdir(owd)<tab>change working directory to the directory `owd`<eos>
<sos>c.execute("INSERT INTO test VALUES (?, 'bar')", (testfield,))<tab>insert data from a string `testfield` to sqlite db `c`<eos>
<sos>"""\\x89\\n""".decode('string_escape')<tab>decode string "\\x89\\n" into a normal string<eos>
<sos>raw_string.decode('string_escape')<tab>convert a raw string `raw_string` into a normal string<eos>
<sos>raw_byte_string.decode('unicode_escape')<tab>convert a raw string `raw_byte_string` into a normal string<eos>
<sos>[m.group(0) for m in re.finditer('(\\d)\\1*', s)]<tab>split a string `s` with into all strings of repeated characters<eos>
<sos>plt.scatter(np.random.randn(100), np.random.randn(100), facecolors='none')<tab>scatter a plot with x, y position of `np.random.randn(100)` and face color equal to none<eos>
<sos>plt.plot(np.random.randn(100), np.random.randn(100), 'o', mfc='none')<tab>do a scatter plot with empty circles<eos>
<sos>soup.find('div', id='main-content').decompose()<tab>remove a div with a id `main-content` using beautifulsoup<eos>
<sos>df[df['ids'].str.contains('ball')]<tab>filter rows containing key word `ball` in column `ids`<eos>
<sos>df.reset_index(level=0, inplace=True)<tab>convert index at level 0 into a column in dataframe `df`<eos>
<sos>df['index1'] = df.index<tab>Add indexes in a data frame `df` to a column `index1`<eos>
<sos>df.reset_index(level=['tick', 'obs'])<tab>convert pandas index in a dataframe to columns<eos>
<sos>[x[::-1] for x in b]<tab>Get reverse of list items from list 'b' using extended slicing<eos>
<sos>np.array([zip(x, y) for x, y in zip(a, b)])<tab>join each element in array `a` with element at the same index in array `b` as a tuple<eos>
<sos>np.array(zip(a.ravel(), b.ravel()), dtype='i4,i4').reshape(a.shape)<tab>zip two 2-d arrays `a` and `b`<eos>
<sos>""",""".join([str(i) for i in list_of_ints])<tab>convert list `list_of_ints` into a comma separated string<eos>
<sos>requests.post(url, data=DATA, headers=HEADERS_DICT, auth=(username, password))<tab>Send a post request with raw data `DATA` and basic authentication with `username` and `password`<eos>
<sos>'abcd}def}'.rfind('}')<tab>Find last occurrence of character '}' in string "abcd}def}"<eos>
<sos>print([item for item in [1, 2, 3]])<tab>Iterate ove list `[1, 2, 3]` using list comprehension<eos>
<sos>[(x['x'], x['y']) for x in d]<tab>extract all the values with keys 'x' and 'y' from a list of dictionaries `d` to list of tuples<eos>
<sos>print(os.path.splitext(os.path.basename('hemanth.txt'))[0])<tab>get the filename without the extension from file 'hemanth.txt'<eos>
<sos>dict(x[i:i + 2] for i in range(0, len(x), 2))<tab>create a dictionary by adding each two adjacent elements in tuple `x` as key/value pair to it<eos>
<sos>values = sum([['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']], [])<tab>create a list containing flattened list `[['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]`<eos>
<sos>df = df[(df['closing_price'] >= 99) & (df['closing_price'] <= 101)]<tab>select rows in a dataframe `df` column 'closing_price' between two values 99 and 101<eos>
<sos>df.replace({'\n': '<br>'}, regex=True)<tab>replace all occurences of newlines `\n` with `<br>` in dataframe `df`<eos>
<sos>df.replace({'\n': '<br>'}, regex=True)<tab>replace all occurrences of a string `\n` by string `<br>` in a pandas data frame `df`<eos>
<sos>[(x + y) for x, y in zip(word, word[1:])]<tab>create a list containing each two adjacent letters in string `word` as its elements<eos>
<sos>list(map(lambda x, y: x + y, word[:-1], word[1:]))<tab>Get a list of pairs from a string `word` using lambda function<eos>
<sos>print(re.findall('(https?://[^\\s]+)', myString))<tab>extract a url from a string `myString`<eos>
<sos>print(re.search('(?P<url>https?://[^\\s]+)', myString).group('url'))<tab>extract a url from a string `myString`<eos>
<sos>re.sub('[^A-Za-z0-9]+', '', mystring)<tab>remove all special characters, punctuation and spaces from a string `mystring` using regex<eos>
<sos>pd.date_range('2016-01-01', freq='WOM-2FRI', periods=13)<tab>create a DatetimeIndex containing 13 periods of the second friday of each month starting from date '2016-01-01'<eos>
<sos>matrix = [[a, b], [c, d], [e, f]]<tab>Create multidimensional array `matrix` with 3 rows and 2 columns in python<eos>
<sos>mystring.replace(' ', '_')<tab>replace spaces with underscore<eos>
<sos>os.path.abspath('mydir/myfile.txt')<tab>get an absolute file path of file 'mydir/myfile.txt'<eos>
<sos>""" """.join(my_string.split())<tab>split string `my_string` on white spaces<eos>
<sos>os.path.splitext(filename)[0]<tab>get filename without extension from file `filename`<eos>
<sos>[sum(l[:i]) for i, _ in enumerate(l)]<tab>get a list containing the sum of each element `i` in list `l` plus the previous elements<eos>
<sos>"""Docs/src/Scripts/temp""".replace('/', '/\x00/').split('\x00')<tab>split a string `Docs/src/Scripts/temp` by `/` keeping `/` in the result<eos>
<sos>np.random.shuffle(np.transpose(r))<tab>shuffle columns of an numpy array 'r'<eos>
<sos>df['D'] = df['B']<tab>copy all values in a column 'B' to a new column 'D' in a pandas data frame 'df'<eos>
<sos>list(data['A']['B'].values())[0]['maindata'][0]['Info']<tab>find a value within nested json 'data' where the key inside another key 'B' is unknown.<eos>
<sos>all(predicate(x) for x in string)<tab>check characters of string `string` are true predication of function `predicate`<eos>
<sos>os.statvfs('/').f_files - os.statvfs('/').f_ffree<tab>determine number of files on a drive with python<eos>
<sos>cursor.fetchone()[0]<tab>None<eos>
<sos>user_list = [int(number) for number in user_input.split(',')]<tab>convert string `user_input` into a list of integers `user_list`<eos>
<sos>[int(s) for s in user.split(',')]<tab>Get a list of integers by splitting  a string `user` with comma<eos>
<sos>sorted(list, key=lambda x: (x[0], -x[1]))<tab>None<eos>
<sos>ut.sort(key=cmpfun, reverse=True)<tab>sort a list of objects `ut`, based on a function `cmpfun` in descending order<eos>
<sos>ut.sort(key=lambda x: x.count, reverse=True)<tab>reverse list `ut` based on the `count` attribute of each object<eos>
<sos>ut.sort(key=lambda x: x.count, reverse=True)<tab>sort a list of objects `ut` in reverse order by their `count` property<eos>
<sos>driver.find_element_by_partial_link_text('Send').click()<tab>click a href button 'Send' with selenium<eos>
<sos>driver.findElement(By.linkText('Send InMail')).click()<tab>click a href button having text `Send InMail` with selenium<eos>
<sos>driver.find_element_by_link_text('Send InMail').click()<tab>click a href button with text 'Send InMail' with selenium<eos>
<sos>'ME' + str(i)<tab>cast an int `i` to a string and concat to string 'ME'<eos>
<sos>df.sort_values(['System_num', 'Dis'])<tab>None<eos>
<sos>open('outfile', 'w').write('#test firstline\n' + open('infile').read())<tab>prepend the line '#test firstline\n' to the contents of file 'infile' and save as the file 'outfile'<eos>
<sos>l.sort(key=lambda t: len(t[1]), reverse=True)<tab>sort a list `l` by length of value in tuple<eos>
<sos>re.findall('\\b(\\w+)d\\b', s)<tab>split string `s` by words that ends with 'd'<eos>
<sos>bool(re.search('ba[rzd]', 'foobarrrr'))<tab>return `True` if string `foobarrrr` contains regex `ba[rzd]`<eos>
<sos>list(set(t))<tab>Removing duplicates in list `t`<eos>
<sos>list(set(source_list))<tab>Removing duplicates in list `source_list`<eos>
<sos>list(OrderedDict.fromkeys('abracadabra'))<tab>Removing duplicates in list `abracadabra`<eos>
<sos>numpy.array(a).reshape(-1).tolist()<tab>Convert array `a` into a list<eos>
<sos>numpy.array(a)[0].tolist()<tab>Convert the first row of numpy matrix `a` to a list<eos>
<sos>print(soup.find(text='Address:').findNext('td').contents[0])<tab>In `soup`, get the content of the sibling of the `td`  tag with text content `Address:`<eos>
<sos>""" """.join([('%d@%d' % t) for t in l])<tab>convert elements of each tuple in list `l` into a string  separated by character `@`<eos>
<sos>""" """.join([('%d@%d' % (t[0], t[1])) for t in l])<tab>convert each tuple in list `l` to a string with '@' separating the tuples' elements<eos>
<sos>driver.execute_script('return document.documentElement.outerHTML;')<tab>get the html from the current web page of a Selenium driver<eos>
<sos>[i for i in teststr if re.search('\\d+[xX]', i)]<tab>Get all matches with regex pattern `\\d+[xX]` in list of string `teststr`<eos>
<sos>df['A'][(df['B'] > 50) & (df['C'] == 900)]<tab>select values from column 'A' for which corresponding values in column 'B' will be greater than 50, and in column 'C' - equal 900 in dataframe `df`<eos>
<sos>sorted(o.items())<tab>Sort dictionary `o` in ascending order based on its keys and items<eos>
<sos>sorted(d)<tab>get sorted list of keys of dict `d`<eos>
<sos>sorted(d.items())<tab>None<eos>
<sos>int('1')<tab>convert string "1" into integer<eos>
<sos>int()<tab>function to convert strings into integers<eos>
<sos>T2 = [map(int, x) for x in T1]<tab>convert items in `T1` to integers<eos>
<sos>subprocess.call(['./test.sh'])<tab>call a shell script `./test.sh` using subprocess<eos>
<sos>subprocess.call(['notepad'])<tab>call a shell script `notepad` using subprocess<eos>
<sos>[val for pair in zip(l1, l2) for val in pair]<tab>combine lists `l1` and `l2`  by alternating their elements<eos>
<sos>encoded = base64.b64encode('data to be encoded')<tab>encode string 'data to be encoded'<eos>
<sos>encoded = 'data to be encoded'.encode('ascii')<tab>encode a string `data to be encoded` to `ascii` encoding<eos>
<sos>lol = list(csv.reader(open('text.txt', 'rb'), delimiter='\t'))<tab>parse tab-delimited CSV file 'text.txt' into a list<eos>
<sos>getattr(my_object, my_str)<tab>Get attribute `my_str` of object `my_object`<eos>
<sos>print(dict(zip(LD[0], zip(*[list(d.values()) for d in LD]))))<tab>group a list of dicts `LD` into one dict by key<eos>
<sos>sum([pair[0] for pair in list_of_pairs])<tab>None<eos>
<sos>d = ast.literal_eval("{'code1':1,'code2':1}")<tab>convert unicode string u"{'code1':1,'code2':1}" into dictionary<eos>
<sos>[word for word in mystring.split() if word.startswith('$')]<tab>find all words in a string `mystring` that start with the `$` sign<eos>
<sos>text = re.sub('^https?:\\/\\/.*[\\r\\n]*', '', text, flags=re.MULTILINE)<tab>remove any url within string `text`<eos>
<sos>np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)<tab>replace all elements in array `A` that are not present in array `[1, 3, 4]` with zeros<eos>
<sos>np.mean(a, axis=1)<tab>calculate mean across dimension in a 2d array `a`<eos>
<sos>subprocess.call(['/usr/bin/Rscript', '--vanilla', '/pathto/MyrScript.r'])<tab>running r script '/pathto/MyrScript.r' from python<eos>
<sos>subprocess.call('/usr/bin/Rscript --vanilla /pathto/MyrScript.r', shell=True)<tab>run r script '/usr/bin/Rscript --vanilla /pathto/MyrScript.r'<eos>
<sos>writer.writeheader()<tab>add a header to a csv file<eos>
<sos>df.fillna(df.mean(axis=1), axis=1)<tab>replacing nan in the dataframe `df` with row average<eos>
<sos>time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(1347517370))<tab>Convert unix timestamp '1347517370' to formatted string '%Y-%m-%d %H:%M:%S'<eos>
<sos>super(Derived, cls).do(a)<tab>Call a base class's class method `do` from derived class `Derived`<eos>
<sos>a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]<tab>selecting rows in Numpy ndarray 'a', where the value in the first column is 0 and value in the second column is 1<eos>
<sos>re.split(' +', 'hello world sample text')<tab>separate words delimited by one or more spaces into a list<eos>
<sos>len(max(words, key=len))<tab>length of longest element in list `words`<eos>
<sos>result[0]['from_user']<tab>get the value associated with unicode key 'from_user' of first dictionary in list `result`<eos>
<sos>[line.split() for line in open('File.txt')]<tab>Retrieve each line from a file 'File.txt' as a list<eos>
<sos>res = dict((v, k) for k, v in a.items())<tab>swap keys with values in a dictionary `a`<eos>
<sos>new_file = open('path/to/FILE_NAME.ext', 'w')<tab>Open a file `path/to/FILE_NAME.ext` in write mode<eos>
<sos>df.groupby(['col1', 'col2'])['col3'].nunique().reset_index()<tab>None<eos>
<sos>any(key.startswith('EMP$$') for key in dict1)<tab>Check if any key in the dictionary `dict1` starts with the string `EMP$$`<eos>
<sos>[value for key, value in list(dict1.items()) if key.startswith('EMP$$')]<tab>create list of values from dictionary `dict1` that have a key that starts with 'EMP$$'<eos>
<sos>pd.DataFrame({'email': sf.index, 'list': sf.values})<tab>convert a pandas series `sf` into a pandas dataframe `df` with columns `email` and `list`<eos>
<sos>print('\t'.join(map(str, list)))<tab>print elements of list `list` seperated by tabs `\t`<eos>
<sos>print('\xd0\xbf\xd1\x80\xd0\xb8'.encode('raw_unicode_escape'))<tab>print unicode string '\xd0\xbf\xd1\x80\xd0\xb8' with utf-8<eos>
<sos>'Sopet\xc3\xb3n'.encode('latin-1').decode('utf-8')<tab>Encode a latin character in string `Sopet\xc3\xb3n` properly<eos>
<sos>image = image.resize((x, y), Image.ANTIALIAS)<tab>resized image `image` to width, height of `(x, y)` with filter of `ANTIALIAS`<eos>
<sos>re.findall('n(?<=[^n]n)n+(?=[^n])(?i)', s)<tab>regex, find "n"s only in the middle of string `s`<eos>
<sos>print('{0:.0f}%'.format(1.0 / 3 * 100))<tab>display the float `1/3*100` as a percentage<eos>
<sos>mylist.sort(key=lambda x: x['title'])<tab>sort a list of dictionary `mylist` by the key `title`<eos>
<sos>l.sort(key=lambda x: x['title'])<tab>sort a list `l` of dicts by dict value 'title'<eos>
<sos>l.sort(key=lambda x: (x['title'], x['title_url'], x['id']))<tab>sort a list of dictionaries by the value of keys 'title', 'title_url', 'id' in ascending order.<eos>
<sos>heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))<tab>find 10 largest differences between each respective elements of list `l1` and list `l2`<eos>
<sos>soup.find_all('span', {'class': 'starGryB sp'})<tab>BeautifulSoup find all 'span' elements in HTML string `soup` with class of 'starGryB sp'<eos>
<sos>df.to_sql('test', engine, schema='a_schema')<tab>write records in dataframe `df` to table 'test' in schema 'a_schema'<eos>
<sos>brackets = re.sub('[^(){}[\\]]', '', s)<tab>Extract brackets from string `s`<eos>
<sos>list(dict((x[0], x) for x in L).values())<tab>remove duplicate elements from list 'L'<eos>
<sos>[line.rstrip('\n') for line in file]<tab>read a file `file` without newlines<eos>
<sos>[i for (i, x) in enumerate(testlist) if (x == 1)]<tab>get the position of item 1 in `testlist`<eos>
<sos>[i for (i, x) in enumerate(testlist) if (x == 1)]<tab>get the position of item 1 in `testlist`<eos>
<sos>for i in [i for (i, x) in enumerate(testlist) if (x == 1)]:
    pass<tab>get the position of item 1 in `testlist`<eos>
<sos>for i in (i for (i, x) in enumerate(testlist) if (x == 1)):
    pass<tab>get the position of item 1 in `testlist`<eos>
<sos>gen = (i for (i, x) in enumerate(testlist) if (x == 1))
for i in gen:
    pass<tab>get the position of item 1 in `testlist`<eos>
<sos>print(testlist.index(element))<tab>get the position of item `element` in list `testlist`<eos>
<sos>try:
    print(testlist.index(element))
except ValueError:
    pass<tab>get the position of item `element` in list `testlist`<eos>
<sos>max(lis, key=lambda item: item[1])[0]<tab>find the first element of the tuple with the maximum second element in a list of tuples `lis`<eos>
<sos>max(lis, key=itemgetter(1))[0]<tab>get the item at index 0 from the tuple that has maximum value at index 1 in list `lis`<eos>
<sos>time.sleep(1)<tab>Make a delay of 1 second<eos>
<sos>""", """.join('(' + ', '.join(i) + ')' for i in L)<tab>convert list of tuples `L` to a string<eos>
<sos>b = models.CharField(max_length=7, default='0000000', editable=False)<tab>Django set default value of field `b` equal to '0000000'<eos>
<sos>sorted(list5, lambda x: (degree(x), x))<tab>Sort lis `list5` in ascending order based on the degrees value of its elements<eos>
<sos>sorted(list5, key=lambda vertex: (degree(vertex), vertex))<tab>None<eos>
<sos>(n for n in [1, 2, 3, 5])<tab>convert a list  into a generator object<eos>
<sos>newlist = [v for i, v in enumerate(oldlist) if i not in removelist]<tab>remove elements from list `oldlist` that have an index number mentioned in list `removelist`<eos>
<sos>f = open('yourfile.txt', 'w')<tab>Open a file `yourfile.txt` in write mode<eos>
<sos>getattr(obj, 'attr')<tab>get attribute 'attr' from object `obj`<eos>
<sos>from functools import reduce
reduce(lambda a, b: a + b, (('aa',), ('bb',), ('cc',)))<tab>convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to tuple<eos>
<sos>map(lambda a: a[0], (('aa',), ('bb',), ('cc',)))<tab>convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to list in one line<eos>
<sos>df['range'].replace(',', '-', inplace=True)<tab>None<eos>
<sos>zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])<tab>unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`<eos>
<sos>zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])<tab>unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`<eos>
<sos>result = ([a for (a, b) in original], [b for (a, b) in original])<tab>unzip list `original`<eos>
<sos>result = ((a for (a, b) in original), (b for (a, b) in original))<tab>unzip list `original` and return a generator<eos>
<sos>zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])<tab>unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]`<eos>
<sos>map(None, *[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])<tab>unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]` and fill empty results with None<eos>
<sos>json.dumps(Decimal('3.9'))<tab>encode `Decimal('3.9')` to a JSON string<eos>
<sos>d['mynewkey'] = 'mynewvalue'<tab>Add key "mynewkey" to dictionary `d` with value "mynewvalue"<eos>
<sos>data.update({'a': 1, })<tab>Add key 'a' to dictionary `data` with value 1<eos>
<sos>data.update(dict(a=1))<tab>Add key 'a' to dictionary `data` with value 1<eos>
<sos>data.update(a=1)<tab>Add key 'a' to dictionary `data` with value 1<eos>
<sos>max([max(i) for i in matrix])<tab>find maximal value in matrix `matrix`<eos>
<sos>answer = str(round(answer, 2))<tab>Round number `answer` to 2 precision after the decimal point<eos>
<sos>ip = re.findall('[0-9]+(?:\\.[0-9]+){3}', s)<tab>extract ip address from an html string<eos>
<sos>df.groupby('A').filter(lambda x: len(x) > 1)<tab>filter dataframe `df` by values in column `A` that appear more than once<eos>
<sos>[x for x in myfile.splitlines() if x != '']<tab>append each line in file `myfile` into a list<eos>
<sos>lst = map(int, open('filename.txt').readlines())<tab>Get a list of integers `lst` from a file `filename.txt`<eos>
<sos>plt.colorbar(mappable=mappable, cax=ax3)<tab>add color bar with image `mappable` to plot `plt`<eos>
<sos>Counter(' '.join(df['text']).split()).most_common(100)<tab>count most frequent 100 words in column 'text' of dataframe `df`<eos>
<sos>re.findall('(.+?):(.+?)\\b ?', text)<tab>None<eos>
<sos>list(itertools.combinations((1, 2, 3), 2))<tab>generate all 2-element subsets of tuple `(1, 2, 3)`<eos>
<sos>datetime.now(pytz.utc)<tab>get a value of datetime.today() in the UTC time zone<eos>
<sos>list2 = [x for x in list1 if x != []]<tab>Get a new list `list2`by removing empty list from a list of lists `list1`<eos>
<sos>list2 = [x for x in list1 if x]<tab>Create `list2` to contain the lists from list `list1` excluding the empty lists from `list1`<eos>
<sos>return HttpResponse(data, mimetype='application/json')<tab>Django response with JSON `data`<eos>
<sos>re.findall('(.*?)\\[.*?\\]', example_str)<tab>get all text that is not enclosed within square brackets in string `example_str`<eos>
<sos>re.findall('(.*?)(?:\\[.*?\\]|$)', example_str)<tab>Use a regex to get all text in a string `example_str` that is not surrounded by square brackets<eos>
<sos>re.findall('\\(.+?\\)|\\w', '(zyx)bc')<tab>get whatever is between parentheses as a single match, and any char outside as an individual match in string '(zyx)bc'<eos>
<sos>re.findall('\\((.*?)\\)|(\\w)', '(zyx)bc')<tab>match regex '\\((.*?)\\)|(\\w)' with string '(zyx)bc'<eos>
<sos>re.findall('\\(.*?\\)|\\w', '(zyx)bc')<tab>match multiple regex patterns with the alternation operator `|` in a string `(zyx)bc`<eos>
<sos>elements = ['%{0}%'.format(element) for element in elements]<tab>formate each string cin list `elements` into pattern '%{0}%'<eos>
<sos>subprocess.Popen(['background-process', 'arguments'])<tab>Open a background process 'background-process' with arguments 'arguments'<eos>
<sos>[mydict[x] for x in mykeys]<tab>get list of values from dictionary 'mydict' w.r.t. list of keys 'mykeys'<eos>
<sos>dict([('Name', 'Joe'), ('Age', 22)])<tab>convert list `[('Name', 'Joe'), ('Age', 22)]` into a dictionary<eos>
<sos>data.reshape(-1, j).mean(axis=1).reshape(data.shape[0], -1)<tab>average each two columns of array `data`<eos>
<sos>print(s.encode('unicode-escape').replace('"', '\\"'))<tab>double backslash escape all double quotes in string `s`<eos>
<sos>re.split('(\\W+)', s)<tab>split a string into a list of words and whitespace<eos>
<sos>df.plot(kind='barh', stacked=True)<tab>None<eos>
<sos>{i[1]: i[0] for i in list(myDictionary.items())}<tab>reverse the keys and values in a dictionary `myDictionary`<eos>
<sos>[i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]<tab>finding the index of elements containing substring 'how' and 'what' in a list of strings 'myList'.<eos>
<sos>isinstance(obj, str)<tab>check if object `obj` is a string<eos>
<sos>isinstance(o, str)<tab>check if object `o` is a string<eos>
<sos>(type(o) is str)<tab>check if object `o` is a string<eos>
<sos>isinstance(o, str)<tab>check if object `o` is a string<eos>
<sos>isinstance(obj_to_test, str)<tab>check if `obj_to_test` is a string<eos>
<sos>list2.extend(list1)<tab>append list `list1` to `list2`<eos>
<sos>list1.extend(mylog)<tab>append list `mylog` to `list1`<eos>
<sos>c.extend(a)<tab>append list `a` to `c`<eos>
<sos>for line in mylog:
    list1.append(line)<tab>append items in list `mylog` to `list1`<eos>
<sos>b.append((a[0][0], a[0][2]))<tab>append a tuple of elements from list `a` with indexes '[0][0] [0][2]' to list `b`<eos>
<sos>app.config['SECRET_KEY'] = 'Your_secret_string'<tab>Initialize `SECRET_KEY` in flask config with `Your_secret_string `<eos>
<sos>pd.DataFrame(out.tolist(), columns=['out-1', 'out-2'], index=out.index)<tab>unpack a series of tuples in pandas into a DataFrame with column names 'out-1' and 'out-2'<eos>
<sos>[x for x in range(len(stocks_list)) if stocks_list[x] == 'MSFT']<tab>find the index of an element 'MSFT' in a list `stocks_list`<eos>
<sos>ax.set_xticklabels(labels, rotation=45)<tab>rotate the xtick labels of matplotlib plot `ax` by `45` degrees to make long labels readable<eos>
<sos>re.sub('[^\\w]', ' ', s)<tab>remove symbols from a string `s`<eos>
<sos>os.path.basename(os.path.dirname(os.path.realpath(__file__)))<tab>Get the current directory of a script<eos>
<sos>print(re.findall("'\\\\[0-7]{1,3}'", str))<tab>Find octal characters matches from a string `str` using regex<eos>
<sos>re.split('[ ](?=[A-Z]+\\b)', input)<tab>split string `input` based on occurrences of regex pattern '[ ](?=[A-Z]+\\b)'<eos>
<sos>re.split('[ ](?=[A-Z])', input)<tab>Split string `input` at every space followed by an upper-case letter<eos>
<sos>r = requests.post(url, files=files, headers=headers, data=data)<tab>send multipart encoded file `files` to url `url` with headers `headers` and metadata `data`<eos>
<sos>open('filename', 'wb').write(bytes_)<tab>write bytes `bytes_` to a file `filename` in python 3<eos>
<sos>[dct[k] for k in lst]<tab>get a list from a list `lst` with values mapped into a dictionary `dct`<eos>
<sos>x.set_index('name').index.get_duplicates()<tab>find duplicate names in column 'name' of the dataframe `x`<eos>
<sos>round(1.923328437452, 3)<tab>truncate float 1.923328437452 to 3 decimal places<eos>
<sos>sorted(li, key=lambda x: datetime.strptime(x[1], '%d/%m/%Y'), reverse=True)<tab>sort list `li` in descending order based on the date value in second element of each list in list `li`<eos>
<sos>ax.set_rlabel_position(135)<tab>place the radial ticks in plot `ax` at 135 degrees<eos>
<sos>os.path.isabs(my_path)<tab>check if path `my_path` is an absolute path<eos>
<sos>len(list(yourdict.keys()))<tab>get number of keys in dictionary `yourdict`<eos>
<sos>len(set(open(yourdictfile).read().split()))<tab>count the number of keys in dictionary `yourdictfile`<eos>
<sos>df.groupby('id').first()<tab>pandas dataframe get first row of each group by 'id'<eos>
<sos>pd.concat([df[0].apply(pd.Series), df[1]], axis=1)<tab>split a list in first column  into multiple columns keeping other columns as well in pandas data frame<eos>
<sos>re.findall('src="js/([^"]*\\bjquery\\b[^"]*)"', data)<tab>extract attributes 'src="js/([^"]*\\bjquery\\b[^"]*)"' from string `data`<eos>
<sos>sum(int(float(item)) for item in [_f for _f in ['', '3.4', '', '', '1.0'] if _f])<tab>Sum integers contained in strings in list `['', '3.4', '', '', '1.0']`<eos>
<sos>subprocess.Popen(['c:\\Program Files\\VMware\\VMware Server\\vmware-cmd.bat'])<tab>Call a subprocess with arguments `c:\\Program Files\\VMware\\VMware Server\\vmware-cmd.bat` that may contain spaces<eos>
<sos>q.put((-n, n))<tab>reverse a priority queue `q` in python without using classes<eos>
<sos>df['group'].plot(kind='bar', color=['r', 'g', 'b', 'r', 'g', 'b', 'r'])<tab>make a barplot of data in column `group` of dataframe `df` colour-coded according to list `color`<eos>
<sos>re.findall('([a-fA-F\\d]{32})', data)<tab>find all matches of regex pattern '([a-fA-F\\d]{32})' in string `data`<eos>
<sos>len(my_list)<tab>Get the length of list `my_list`<eos>
<sos>len(l)<tab>Getting the length of array `l`<eos>
<sos>len(s)<tab>Getting the length of array `s`<eos>
<sos>len(my_tuple)<tab>Getting the length of `my_tuple`<eos>
<sos>len(my_string)<tab>Getting the length of `my_string`<eos>
<sos>"""\\a""".decode('string_escape')<tab>remove escape character from string "\\a"<eos>
<sos>"""obama""".replace('a', '%temp%').replace('b', 'a').replace('%temp%', 'b')<tab>replace each 'a' with 'b' and each 'b' with 'a' in the string 'obama' in a single pass.<eos>
<sos>shutil.rmtree('/folder_name')<tab>remove directory tree '/folder_name'<eos>
<sos>data['weekday'] = data['my_dt'].apply(lambda x: x.weekday())<tab>create a new column `weekday` in pandas data frame `data` based on the values in column `my_dt`<eos>
<sos>sorted(x, key=x.get, reverse=True)<tab>reverse sort Counter `x` by values<eos>
<sos>sorted(list(x.items()), key=lambda pair: pair[1], reverse=True)<tab>reverse sort counter `x` by value<eos>
<sos>np.vstack((a, b))<tab>append a numpy array 'b' to a numpy array 'a'<eos>
<sos>print(concatenate((a, b), axis=0))<tab>numpy concatenate two arrays `a` and `b` along the first axis<eos>
<sos>print(concatenate((a, b), axis=1))<tab>numpy concatenate two arrays `a` and `b` along the second axis<eos>
<sos>c = np.r_[(a[None, :], b[None, :])]<tab>numpy concatenate two arrays `a` and `b` along the first axis<eos>
<sos>np.array((a, b))<tab>numpy concatenate two arrays `a` and `b` along the first axis<eos>
<sos>print(socket.getaddrinfo('google.com', 80))<tab>fetch address information for host 'google.com' ion port 80<eos>
<sos>df.xs('sat', level='day', drop_level=False)<tab>add a column 'day' with value 'sat' to dataframe `df`<eos>
<sos>return HttpResponse('Unauthorized', status=401)<tab>return a 401 unauthorized in django<eos>
<sos>Flask(__name__, template_folder='wherever')<tab>Flask set folder 'wherever' as the default template folder<eos>
<sos>session.execute('INSERT INTO t1 (SELECT * FROM t2)')<tab>How do I INSERT INTO t1 (SELECT * FROM t2) in SQLAlchemy?<eos>
<sos>c2.sort(key=lambda row: row[2])<tab>sort a list of lists 'c2' such that third row comes first<eos>
<sos>c2.sort(key=lambda row: (row[2], row[1], row[0]))<tab>None<eos>
<sos>c2.sort(key=lambda row: (row[2], row[1]))<tab>None<eos>
<sos>matplotlib.rc('font', **{'sans-serif': 'Arial', 'family': 'sans-serif'})<tab>set font `Arial` to display non-ascii characters in matplotlib<eos>
<sos>df['date'].apply(lambda x: x.toordinal())<tab>Convert  DateTime column 'date' of pandas dataframe 'df' to ordinal<eos>
<sos>element.get_attribute('innerHTML')<tab>get html source of Selenium WebElement `element`<eos>
<sos>df.index.get_loc('bob')<tab>Get the integer location of a key `bob` in a pandas data frame<eos>
<sos>os.system('gnome-terminal -e \'bash -c "sudo apt-get update; exec bash"\'')<tab>open a 'gnome' terminal from python script and run  'sudo apt-get update' command.<eos>
<sos>my_dict.update({'third_key': 1})<tab>add an item with key 'third_key' and value 1 to an dictionary `my_dict`<eos>
<sos>my_list = []<tab>declare an array<eos>
<sos>my_list.append(12)<tab>Insert item `12` to a list `my_list`<eos>
<sos>myList.insert(0, 'wuggah')<tab>add an entry 'wuggah' at the beginning of list `myList`<eos>
<sos>"""\\xF3\\xBE\\x80\\x80""".replace('\\x', '').decode('hex')<tab>convert a hex-string representation to actual bytes<eos>
<sos>df[df.columns[-1]]<tab>select the last column of dataframe `df`<eos>
<sos>df.loc[df['Letters'] == 'C', 'Letters'].values[0]<tab>get the first value from dataframe `df` where column 'Letters' is equal to 'C'<eos>
<sos>np.column_stack(([1, 2, 3], [4, 5, 6]))<tab>converting two lists `[1, 2, 3]` and `[4, 5, 6]` into a matrix<eos>
<sos>type(i)<tab>get the type of `i`<eos>
<sos>type(v)<tab>determine the type of variable `v`<eos>
<sos>type(v)<tab>determine the type of variable `v`<eos>
<sos>type(v)<tab>determine the type of variable `v`<eos>
<sos>type(v)<tab>determine the type of variable `v`<eos>
<sos>print(type(variable_name))<tab>get the type of variable `variable_name`<eos>
<sos>next(itertools.islice(range(10), 5, 5 + 1))<tab>get the 5th item of a generator<eos>
<sos>print('"{}"'.format(word))<tab>Print a string `word` with string format<eos>
<sos>""" """.join(list)<tab>join a list of strings `list` using a space ' '<eos>
<sos>y = [[] for n in range(2)]<tab>create list `y` containing two empty lists<eos>
<sos>data = [line.strip() for line in open('C:/name/MyDocuments/numbers', 'r')]<tab>read a file 'C:/name/MyDocuments/numbers' into a list `data`<eos>
<sos>"""""".join([char for char in 'it is icy' if char != 'i'])<tab>delete all occurrences of character 'i' in string 'it is icy'<eos>
<sos>re.sub('i', '', 'it is icy')<tab>delete all instances of a character 'i' in a string 'it is icy'<eos>
<sos>"""it is icy""".replace('i', '')<tab>delete all characters "i" in string "it is icy"<eos>
<sos>"""""".join([char for char in 'it is icy' if char != 'i'])<tab>None<eos>
<sos>df.dropna(subset=[1])<tab>Drop rows of pandas dataframe `df` having NaN in column at index "1"<eos>
<sos>[x for x in myList if x.n == 30]<tab>get elements from list `myList`, that have a field `n` value 30<eos>
<sos>nums = [int(x) for x in intstringlist]<tab>converting list of strings `intstringlist` to list of integer `nums`<eos>
<sos>map(int, eval(input('Enter the unfriendly numbers: ')))<tab>convert list of string numbers into list of integers<eos>
<sos>sys.stdout.write('.')<tab>print "." without newline<eos>
<sos>int(round(2.51 * 100))<tab>round off the float that is the product of `2.52 * 100` and convert it to an int<eos>
<sos>os.chdir('/mydir')
for file in glob.glob('*.txt'):
    pass<tab>Find all files in directory "/mydir" with extension ".txt"<eos>
<sos>for file in os.listdir('/mydir'):
    if file.endswith('.txt'):
        pass<tab>Find all files in directory "/mydir" with extension ".txt"<eos>
<sos>for (root, dirs, files) in os.walk('/mydir'):
    for file in files:
        if file.endswith('.txt'):
            pass<tab>Find all files in directory "/mydir" with extension ".txt"<eos>
<sos>df.plot(legend=False)<tab>plot dataframe `df` without a legend<eos>
<sos>for i in range(256):
    for j in range(256):
        ip = ('192.168.%d.%d' % (i, j))
        print(ip)<tab>loop through the IP address range "192.168.x.x"<eos>
<sos>for (i, j) in product(list(range(256)), list(range(256))):
    pass<tab>loop through the IP address range "192.168.x.x"<eos>
<sos>generator = iter_iprange('192.168.1.1', '192.168.255.255', step=1)<tab>loop through the IP address range "192.168.x.x"<eos>
<sos>sum(1 << i for i, b in enumerate(x) if b)<tab>Sum the corresponding decimal values for binary values of each boolean element in list `x`<eos>
<sos>target.write('%r\n%r\n%r\n' % (line1, line2, line3))<tab>write multiple strings `line1`, `line2` and `line3` in one line in a file `target`<eos>
<sos>[y for x in data for y in (x if isinstance(x, list) else [x])]<tab>Convert list of lists `data` into a flat list<eos>
<sos>print('foo\nbar'.encode('string_escape'))<tab>Print new line character as `\n` in a string `foo\nbar`<eos>
<sos>"""""".join(s.rsplit(',', 1))<tab>remove last comma character ',' in string `s`<eos>
<sos>(x[1:] + x[:-1]) / 2<tab>calculate the mean of each element in array `x` with the element previous to it<eos>
<sos>x[:-1] + (x[1:] - x[:-1]) / 2<tab>get an array of the mean of each two consecutive values in numpy array `x`<eos>
<sos>arr = numpy.fromiter(codecs.open('new.txt', encoding='utf-8'), dtype='<U2')<tab>load data containing `utf-8` from file `new.txt` into numpy array `arr`<eos>
<sos>l = sorted(l, key=itemgetter('time'), reverse=True)<tab>reverse sort list of dicts `l` by value for key `time`<eos>
<sos>l = sorted(l, key=lambda a: a['time'], reverse=True)<tab>Sort a list of dictionary `l` based on key `time` in descending order<eos>
<sos>df.loc[df[0].str.contains('(Hel|Just)')]<tab>get rows of dataframe `df` that match regex '(Hel|Just)'<eos>
<sos>re.search('\\[(.*)\\]', your_string).group(1)<tab>find the string in `your_string` between two special characters "[" and "]"<eos>
<sos>[d.strftime('%Y%m%d') for d in pandas.date_range('20130226', '20130302')]<tab>None<eos>
<sos>"""The big brown fox is brown""".count('brown')<tab>count number of times string 'brown' occurred in string 'The big brown fox is brown'<eos>
<sos>json.loads(request.body)<tab>decode json string `request.body` to python dict<eos>
<sos>urllib.request.urlretrieve(url, file_name)<tab>download the file from url `url` and save it under file `file_name`<eos>
<sos>text.split()<tab>split string `text` by space<eos>
<sos>text.split(',')<tab>split string `text` by ","<eos>
<sos>line.split()<tab>Split string `line` into a list by whitespace<eos>
<sos>[re.sub('(?<!\\d)\\.(?!\\d)', ' ', i) for i in s]<tab>replace dot characters  '.' associated with ascii letters in list `s` with space ' '<eos>
<sos>sorted(list_of_strings, key=lambda s: s.split(',')[1])<tab>sort list `list_of_strings` based on second index of each string `s`<eos>
<sos>subprocess.check_call('vasp | tee tee_output', shell=True)<tab>call multiple bash function ‘vasp’ and ‘tee tee_output’ using ‘|’<eos>
<sos>[element for element in lst if isinstance(element, int)]<tab>eliminate all strings from list `lst`<eos>
<sos>[element for element in lst if not isinstance(element, str)]<tab>get all the elements except strings from the list 'lst'.<eos>
<sos>newlist = sorted(list_to_be_sorted, key=lambda k: k['name'])<tab>Sort a list of dictionaries `list_to_be_sorted` by the value of the dictionary key `name`<eos>
<sos>newlist = sorted(l, key=itemgetter('name'), reverse=True)<tab>sort a list of dictionaries `l` by values in key `name` in descending order<eos>
<sos>list_of_dicts.sort(key=operator.itemgetter('name'))<tab>None<eos>
<sos>list_of_dicts.sort(key=operator.itemgetter('age'))<tab>None<eos>
<sos>df.groupby('prots').sum().sort('scores', ascending=False)<tab>None<eos>
<sos>""",""".join(trans['category'])<tab>join together with "," elements inside a list indexed with 'category' within a dictionary `trans`<eos>
<sos>"""""".join(['A', 'B', 'C', 'D'])<tab>concatenate array of strings `['A', 'B', 'C', 'D']` into a string<eos>
<sos>json.load(urllib.request.urlopen('url'))<tab>get json data from restful service 'url'<eos>
<sos>[x for x in sents if not x.startswith('@$\t') and not x.startswith('#')]<tab>Remove all strings from a list a strings `sents` where the values starts with `@$\t` or `#`<eos>
<sos>Entry.objects.filter(pub_date__contains='08:00')<tab>django filter by hour<eos>
<sos>list.sort(key=lambda item: (item['points'], item['time']))<tab>sort a list of dictionary `list` first by key `points` and then by `time`<eos>
<sos>(t - datetime.datetime(1970, 1, 1)).total_seconds()<tab>convert datetime object `(1970, 1, 1)` to seconds<eos>
<sos>re.sub('(\\_a)?\\.([^\\.]*)$', '_suff.\\2', 'long.file.name.jpg')<tab>insert `_suff` before the file extension in `long.file.name.jpg` or replace `_a` with `suff` if it precedes the extension.<eos>
<sos>import imp
imp.reload(module)<tab>reload a module `module`<eos>
<sos>struct.unpack('H', struct.pack('h', number))<tab>Convert integer `number` into an unassigned integer<eos>
<sos>numlist = [float(x) for x in numlist]<tab>convert int values in list `numlist` to float<eos>
<sos>df.to_csv(filename, index=False)<tab>write dataframe `df`, excluding index, to a csv file<eos>
<sos>json_data = json.loads(unescaped)<tab>convert a urllib unquoted string `unescaped` to a json data `json_data`<eos>
<sos>[chr(i) for i in range(127)]<tab>Create a list containing all ascii characters as its elements<eos>
<sos>newFile.write(struct.pack('5B', *newFileBytes))<tab>write `newFileBytes` to a binary file `newFile`<eos>
<sos>re.sub('^[A-Z0-9]*(?![a-z])', '', string)<tab>python regex - check for a capital letter with a following lowercase in string `string`<eos>
<sos>list(dict.keys())[-1]<tab>get the last key of dictionary `dict`<eos>
<sos>print('hi there', file=f)<tab>write line "hi there" to file `f`<eos>
<sos>f = open('myfile', 'w')
f.write('hi there\n')
f.close()<tab>write line "hi there" to file `myfile`<eos>
<sos>with open('somefile.txt', 'a') as the_file:
    the_file.write('Hello\n')<tab>write line "Hello" to file `somefile.txt`<eos>
<sos>s.encode('iso-8859-15')<tab>convert unicode string `s` to ascii<eos>
<sos>AuthorizedEmail.objects.filter(group=group).order_by('-added')[0]<tab>Django get maximum value associated with field 'added' in model `AuthorizedEmail`<eos>
<sos>re.findall('Test([0-9.]*[0-9]+)', text)<tab>Find all numbers and dots from a string `text` using regex<eos>
<sos>re.findall('Test([\\d.]*\\d+)', text)<tab>python regex  to find all numbers and dots from 'text'<eos>
<sos>os.system('powershell.exe', 'script.ps1')<tab>execute script 'script.ps1' using 'powershell.exe' shell<eos>
<sos>b.sort(key=lambda x: x[1][2])<tab>Sort a list of tuples `b` by third item in the tuple<eos>
<sos>list(cf.get_range().get_keys())<tab>get a list of all keys in Cassandra database `cf` with pycassa<eos>
<sos>datetime.datetime.now()<tab>create a datetime with the current date & time<eos>
<sos>next(i for i, x in enumerate(lst) if not isinstance(x, bool) and x == 1)<tab>get the index of an integer `1` from a list `lst` if the list also contains boolean items<eos>
<sos>a[:] = [(x - 13) for x in a]<tab>subtract 13 from every number in a list `a`<eos>
<sos>random.choice(os.listdir('C:\\'))<tab>choose a random file from the directory contents of the C drive, `C:\\`<eos>
<sos>max(x.min(), x.max(), key=abs)<tab>get the highest element in absolute value in a numpy matrix `x`<eos>
<sos>re.findall('"(http.*?)"', s, re.MULTILINE | re.DOTALL)<tab>Get all urls within text `s`<eos>
<sos>re.findall('http://[^t][^s"]+\\.html', document)<tab>match urls whose domain doesn't start with `t` from string `document` using regex<eos>
<sos>mystring.replace(' ', '! !').split('!')<tab>split a string `mystring` considering the spaces ' '<eos>
<sos>open(path, 'r')<tab>open file `path` with mode 'r'<eos>
<sos>[[sum(item) for item in zip(*items)] for items in zip(*data)]<tab>sum elements at the same index in list `data`<eos>
<sos>a[:, (np.newaxis)]<tab>add a new axis to array `a`<eos>
