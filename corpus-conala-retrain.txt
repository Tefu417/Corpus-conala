<sos>sum(d * 10 ** i for i, d in enumerate(x[::-1]))<tab>Concatenate elements of a list 'x' of multiple integers to a single integer<eos>
<sos>r = int(''.join(map(str, x)))<tab>convert a list of integers into a single integer<eos>
<sos>datetime.strptime('2010-11-13 10:33:54.227806', '%Y-%m-%d %H:%M:%S.%f')<tab>convert a DateTime string back to a DateTime object of format '%Y-%m-%d %H:%M:%S.%f'<eos>
<sos>[(i, sum(j) / len(j)) for i, j in list(d.items())]<tab>get the average of a list values for each key in dictionary `d`)<eos>
<sos>zip([1, 2], [3, 4])<tab>zip two lists `[1, 2]` and `[3, 4]` into a list of two tuples containing elements at the same index in each list<eos>
<sos>['hello{0}'.format(i) for i in a]<tab>prepend string 'hello' to all items in list 'a'<eos>
<sos>re.sub('(?<!\\S)((\\S+)(?:\\s+\\2))(?:\\s+\\2)+(?!\\S)', '\\1', s)<tab>regex for repeating words in a string `s`<eos>
<sos>df.div(df.sum(axis=1), axis=0)<tab>normalize a pandas dataframe `df` by row<eos>
<sos>map(lambda t: (t[1], t[0]), mylist)<tab>swap values in a tuple/list inside a list `mylist`<eos>
<sos>[(t[1], t[0]) for t in mylist]<tab>Swap values in a tuple/list in list `mylist`<eos>
<sos>driver.find_element_by_xpath("//p[@id, 'one']/following-sibling::p")<tab>None<eos>
<sos>re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)<tab>find all occurrences of the pattern '\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+' within `strs`<eos>
<sos>print(list(itertools.combinations({1, 2, 3, 4}, 3)))<tab>generate the combinations of 3 from a set `{1, 2, 3, 4}`<eos>
<sos>df[['hour', 'weekday', 'weeknum']] = df.apply(lambdafunc, axis=1)<tab>add multiple columns `hour`, `weekday`, `weeknum` to pandas data frame `df` from lambda function `lambdafunc`<eos>
<sos>soup.find_all('a', string='Elsie')<tab>BeautifulSoup search string 'Elsie' inside tag 'a'<eos>
<sos>my_datetime.strftime('%B %d, %Y')<tab>Convert a datetime object `my_datetime` into readable format `%B %d, %Y`<eos>
<sos>int(''.join(c for c in s if c.isdigit()))<tab>parse string `s` to int when string contains a number<eos>
<sos>dic['Test'].update({'class': {'section': 5}})<tab>add dictionary `{'class': {'section': 5}}` to key 'Test' of dictionary `dic`<eos>
<sos>dict(map(int, x.split(':')) for x in s.split(','))<tab>transforming the string `s` into dictionary<eos>
<sos>driver.find_element_by_xpath("//div[@id='a']//a[@class='click']")<tab>None<eos>
<sos>np.where((vals == (0, 1)).all(axis=1))<tab>find rows matching `(0,1)` in a 2 dimensional numpy array `vals`<eos>
<sos>SomeModel.objects.filter(id=id).delete()<tab>None<eos>
<sos>dict([['two', 2], ['one', 1]])<tab>build a dictionary containing the conversion of each list in list `[['two', 2], ['one', 1]]` to a key/value pair as its items<eos>
<sos>dict(zip(l[::2], l[1::2]))<tab>convert list `l` to dictionary having each two adjacent elements as key/value pair<eos>
<sos>GRAVITY = 9.8<tab>assign float 9.8 to variable `GRAVITY`<eos>
<sos>re.findall('(([0-9]+)([A-Z]))', '20M10000N80M')<tab>separate numbers from characters in string "30m1000n20m"<eos>
<sos>re.findall('([0-9]+|[A-Z])', '20M10000N80M')<tab>separate numbers and characters in string '20M10000N80M'<eos>
<sos>re.findall('([0-9]+)([A-Z])', '20M10000N80M')<tab>separate numbers and characters in string '20M10000N80M'<eos>
<sos>re.compile('\\w+').findall('Hello world, my name is...James the 2nd!')<tab>Get a list of  words from a string `Hello world, my name is...James the 2nd!` removing punctuation<eos>
<sos>datetime.datetime.strptime('03:55', '%H:%M').time()<tab>Convert string '03:55' into datetime.time object<eos>
<sos>requests.get('https://www.reporo.com/', verify=False)<tab>request url 'https://www.reporo.com/' without verifying SSL certificates<eos>
<sos>a[a != 0]<tab>Extract values not equal to 0 from numpy array `a`<eos>
<sos>new_dict = {k: v for k, v in zip(keys, values)}<tab>map two lists `keys` and `values` into a dictionary<eos>
<sos>dict((k, v) for k, v in zip(keys, values))<tab>map two lists `keys` and `values` into a dictionary<eos>
<sos>dict([(k, v) for k, v in zip(keys, values)])<tab>map two lists `keys` and `values` into a dictionary<eos>
<sos>m = re.search('\\[(\\w+)\\]', s)<tab>find the string matches within parenthesis from a string `s` using regex<eos>
<sos>s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)<tab>Enable the SO_REUSEADDR socket option in socket object `s` to fix the error `only one usage of each socket address is normally permitted`<eos>
<sos>list3 = [(a + b) for a, b in zip(list1, list2)]<tab>append the sum of each tuple pair in the grouped list `list1` and list `list2` elements to list `list3`<eos>
<sos>[ord(c) for c in s.decode('hex')]<tab>converting hex string `s` to its integer representations<eos>
<sos>print(sorted(student_tuples, key=lambda t: (-t[2], t[0])))<tab>sort list `student_tuples` by second element of each tuple in ascending and third element of each tuple in descending<eos>
<sos>[y for x in range(3) for y in [x, x]]<tab>get list of duplicated elements in range of 3<eos>
<sos>txt = open('file.txt').read()<tab>read the contents of the file 'file.txt' into `txt`<eos>
<sos>myList[:] = [(x / myInt) for x in myList]<tab>divide each element in list `myList` by integer `myInt`<eos>
<sos>"""Name: {0[person.name]}""".format({'person.name': 'Joe'})<tab>None<eos>
<sos>df.replace(' ', '_', regex=True)<tab>replace white spaces in dataframe `df` with '_'<eos>
<sos>datetime.datetime.combine(my_date, datetime.time.min)<tab>convert date `my_date` to datetime<eos>
<sos>tst2 = str(tst)<tab>convert tuple `tst` to string `tst2`<eos>
<sos>time.ctime(os.path.getmtime(file))<tab>get modified time of file `file`<eos>
<sos>time.ctime(os.path.getctime(file))<tab>get creation time of file `file`<eos>
<sos>t = os.path.getmtime(filename)<tab>get modification time of file `filename`<eos>
<sos>os.path.getmtime(path)<tab>get modification time of file `path`<eos>
<sos>print(('last modified: %s' % time.ctime(os.path.getmtime(file))))<tab>get modified time of file `file`<eos>
<sos>print(('created: %s' % time.ctime(os.path.getctime(file))))<tab>get the creation time of file `file`<eos>
<sos>return os.path.getctime(path_to_file)<tab>get the creation time of file `path_to_file`<eos>
<sos>os.system('TASKKILL /F /IM firefox.exe')<tab>execute os command ''TASKKILL /F /IM firefox.exe''<eos>
<sos>return (x.group(0) for x in re.finditer("[A-Za-z']+", string))<tab>split string `string` on whitespaces using a generator<eos>
<sos>""", """.join(['%.2f'] * len(x))<tab>Unpack each value in list `x` to its placeholder '%' in string '%.2f'<eos>
<sos>print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))<tab>match regex pattern '(\\d+(\\.\\d+)?)' with string '3434.35353'<eos>
<sos>df['name'].str.replace('\\(.*\\)', '')<tab>replace parentheses and all data within it with empty string '' in column 'name' of dataframe `df`<eos>
<sos>result = [x for x in list_a if x[0] in list_b]<tab>create a list `result` containing elements form list `list_a` if first element of list `list_a` is in list `list_b`<eos>
<sos>print([''.join(a) for a in combinations(['hel', 'lo', 'bye'], 2)])<tab>generate all possible string permutations of each two elements in list `['hel', 'lo', 'bye']`<eos>
<sos>[x for x in li if 'ar' in x[2]]<tab>get a list of items form nested list `li` where third element of each item contains string 'ar'<eos>
<sos>unsorted_list.sort(key=lambda x: x[3])<tab>Sort lists in the list `unsorted_list` by the element at index 3 of each list<eos>
<sos>logging.info('test')<tab>Log message 'test' on the root logger.<eos>
<sos>fig.add_subplot(1, 1, 1)<tab>Return a subplot axes positioned by the grid definition `1,1,1` using matpotlib<eos>
<sos>sorted(list(x.items()), key=operator.itemgetter(1))<tab>Sort dictionary `x` by value in ascending order<eos>
<sos>sorted(dict1, key=dict1.get)<tab>Sort dictionary `dict1` by value in ascending order<eos>
<sos>sorted(d, key=d.get, reverse=True)<tab>Sort dictionary `d` by value in descending order<eos>
<sos>sorted(list(d.items()), key=(lambda x: x[1]))<tab>Sort dictionary `d` by value in ascending order<eos>
<sos>np.einsum('ijk,ikl->ijl', A, B)<tab>elementwise product of 3d arrays `A` and `B`<eos>
<sos>print('I have: {0.price}'.format(card))<tab>Print a string `card` with string formatting<eos>
<sos>f.write('# Data for Class A\n')<tab>Write a comment `# Data for Class A\n` to a file object `f`<eos>
<sos>a = a[-1:] + a[:-1]<tab>move the last item in list `a` to the beginning<eos>
<sos>datetimevariable.strftime('%Y-%m-%d')<tab>Parse DateTime object `datetimevariable` using format '%Y-%m-%d'<eos>
<sos>mixed.replace('\r\n', '\n').replace('\r', '\n')<tab>Normalize line ends in a string 'mixed'<eos>
<sos>os.path.expanduser('~user')<tab>find the real user home directory using python<eos>
<sos>T = [L[i] for i in Idx]<tab>index a list `L` with another list `Idx`<eos>
<sos>words = open('myfile').read().split()<tab>get a list of words `words` of a file 'myfile'<eos>
<sos>[[sum([x[1] for x in i])] for i in data]<tab>Get a list of lists with summing the values of the second element from each list of lists `data`<eos>
<sos>[sum([x[1] for x in i]) for i in data]<tab>summing the second item in a list of lists of lists<eos>
<sos>Article.objects.annotate(like_count=Count('likes')).order_by('-like_count')<tab>sort objects in `Articles` in descending order of counts of `likes`<eos>
<sos>today = datetime.datetime.utcnow().date()<tab>return a DateTime object with the current UTC date<eos>
<sos>[(a * b) for a, b in zip(lista, listb)]<tab>create a list containing the multiplication of each elements at the same index of list `lista` and list `listb`<eos>
<sos>re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)<tab>fetch smilies matching regex pattern '(?::|;|=)(?:-)?(?:\\)|\\(|D|P)' in string `s`<eos>
<sos>re.match('[:;][)(](?![)(])', str)<tab>match the pattern '[:;][)(](?![)(])' to the string `str`<eos>
<sos>json_string = json.dumps([ob.__dict__ for ob in list_name])<tab>convert a list of objects `list_name` to json string `json_string`<eos>
<sos>listofzeros = [0] * n<tab>create a list `listofzeros` of `n` zeros<eos>
<sos>stringnamehere.decode('utf-8', 'ignore')<tab>decode the string 'stringnamehere'  to UTF-8<eos>
<sos>re.findall('((?:A|B|C)D)', 'BDE')<tab>Match regex pattern '((?:A|B|C)D)' on string 'BDE'<eos>
<sos>dic.setdefault(key, []).append(value)<tab>Create a key `key` if it does not exist in dict `dic` and append element `value` to value.<eos>
<sos>a[np.argmin(a[:, (1)])]<tab>Get the value of the minimum element in the second column of array `a`<eos>
<sos>a.update(b)<tab>extend dictionary `a` with key/value pairs of dictionary `b`<eos>
<sos>[{k: v for k, v in d.items() if k != 'mykey1'} for d in mylist]<tab>removing key values pairs with key 'mykey1' from a list of dictionaries `mylist`<eos>
<sos>[dict((k, v) for k, v in d.items() if k != 'mykey1') for d in mylist]<tab>None<eos>
<sos>numpy.random.random((3, 3))<tab>create 3 by 3 matrix of random numbers<eos>
<sos>df['C'] = df['A'] + df['B']<tab>make new column 'C' in panda dataframe by adding values from other columns 'A' and 'B'<eos>
<sos>[value for key, value in list(programs.items()) if 'new york' in key.lower()]<tab>create a list of values from the dictionary `programs` that have a key with a case insensitive match to 'new york'<eos>
<sos>sys.path.append('/path/to/main_folder')<tab>append a path `/path/to/main_folder` in system path<eos>
<sos>re.findall('\\d+(?=[^[]+$)', s)<tab>get all digits in a string `s` after a '[' character<eos>
<sos>pickle.load(open('afile', 'rb'))<tab>python pickle/unpickle a list to/from a file 'afile'<eos>
<sos>driver.find_element_by_xpath('xpath').click()<tab>None<eos>
<sos>ex.groupby(level='A').agg(lambda x: x.index.get_level_values(1).nunique())<tab>count unique index values in column 'A' in pandas dataframe `ex`<eos>
<sos>pd.concat(map(pd.DataFrame, iter(d.values())), keys=list(d.keys())).stack().unstack(0)<tab>Create a pandas dataframe of values from a dictionary `d` which contains dictionaries of dictionaries<eos>
<sos>sum(1 for i, j in zip(a, b) if i != j)<tab>find out the number of non-matched elements at the same index of list `a` and list `b`<eos>
<sos>d = {(a.lower(), b): v for (a, b), v in list(d.items())}<tab>make all keys lowercase in dictionary `d`<eos>
<sos>list_.sort(key=lambda x: [x[0], len(x[1]), x[1]])<tab>sort list `list_` based on first element of each tuple and by the length of the second element of each tuple<eos>
<sos>s.strip()<tab>trim whitespace in string `s`<eos>
<sos>s = s.lstrip()<tab>trim whitespace (including tabs) in `s` on the left side<eos>
<sos>s = s.rstrip()<tab>trim whitespace (including tabs) in `s` on the right side<eos>
<sos>s = s.strip(' \t\n\r')<tab>trim characters ' \t\n\r' in `s`<eos>
<sos>print(re.sub('[\\s+]', '', s))<tab>trim whitespaces (including tabs) in string `s`<eos>
<sos>Task.objects.exclude(prerequisites__status__in=['A', 'P', 'F'])<tab>In Django, filter `Task.objects` based on all entities in ['A', 'P', 'F']<eos>
<sos>root.configure(background='black')<tab>Change background color in Tkinter<eos>
<sos>numpy.array([(key, val) for key, val in result.items()], dtype)<tab>convert dict `result` to numpy structured array<eos>
<sos>pd.concat([df_1, df_2.sort_values('y')])<tab>Concatenate dataframe `df_1` to dataframe `df_2` sorted by values of the column 'y'<eos>
<sos>re.sub('(.*)</div>', '\\1</bad>', s)<tab>replace the last occurence of an expression '</div>' with '</bad>' in a string `s`<eos>
<sos>print(max(d, key=lambda x: (d[x]['salary'], d[x]['bonus'])))<tab>get the maximum of 'salary' and 'bonus' values in a dictionary<eos>
<sos>Book.objects.filter(author__id=1).filter(author__id=2)<tab>Filter Django objects by `author` with ids `1` and `2`<eos>
<sos>re.compile('XYZ', re.IGNORECASE).split('fooxyzbar')<tab>split string 'fooxyzbar' based on case-insensitive matching using string 'XYZ'<eos>
<sos>[sum(map(int, s)) for s in example.split()]<tab>get list of sums of neighboring integers in string `example`<eos>
<sos>[i for i in y if y[i] == 1]<tab>Get all the keys from dictionary `y` whose value is `1`<eos>
<sos>c.decode('unicode_escape')<tab>converting byte string `c` in unicode string<eos>
<sos>pd.melt(x, id_vars=['farm', 'fruit'], var_name='year', value_name='value')<tab>unpivot first 2 columns into new columns 'year' and 'value' from a pandas dataframe `x`<eos>
<sos>default_data['item3'] = 3<tab>add key "item3" and value "3" to dictionary `default_data `<eos>
<sos>default_data.update({'item3': 3, })<tab>add key "item3" and value "3" to dictionary `default_data `<eos>
<sos>default_data.update({'item4': 4, 'item5': 5, })<tab>add key value pairs 'item4' , 4 and 'item5' , 5 to dictionary `default_data`<eos>
<sos>l[:3] + l[-3:]<tab>Get the first and last 3 elements of list `l`<eos>
<sos>df = df.reset_index(drop=True)<tab>reset index to default in dataframe `df`<eos>
<sos>[a[x].append(b[x]) for x in range(3)]<tab>For each index `x` from 0 to 3, append the element at index `x` of list `b` to the list at index `x` of list a.<eos>
<sos>os.path.realpath(path)<tab>get canonical path of the filename `path`<eos>
<sos>set(L[0].f.items()).issubset(set(a3.f.items()))<tab>check if dictionary `L[0].f.items()` is in dictionary `a3.f.items()`<eos>
<sos>zip(*np.where(a == 1))<tab>find all the indexes in a Numpy 2D array where the value is 1<eos>
<sos>np.where(a == 1)<tab>None<eos>
<sos>df.columns = df.columns.get_level_values(0)<tab>Collapse hierarchical column index to level 0 in dataframe `df`<eos>
<sos>x = scipy.matrix([1, 2, 3]).transpose()<tab>create a matrix from a list `[1, 2, 3]`<eos>
<sos>text = re.sub('(\\bget\\b)', '\\1@', text)<tab>add character '@' after word 'get' in string `text`<eos>
<sos>np.array([np.arange(3), np.arange(2, -1, -1), np.ones((3,))]).min(axis=0)<tab>get a numpy array that contains the element wise minimum of three 3x1 arrays<eos>
<sos>df['new_col'] = list(range(1, len(df) + 1))<tab>add a column 'new_col' to dataframe `df` for index in range<eos>
<sos>os.environ['DEBUSSY'] = '1'<tab>set environment variable 'DEBUSSY' equal to 1<eos>
<sos>print(os.environ['DEBUSSY'])<tab>Get a environment variable `DEBUSSY`<eos>
<sos>os.environ['DEBUSSY'] = '1'<tab>set environment variable 'DEBUSSY' to '1'<eos>
<sos>b.update(d)<tab>update dictionary `b`, overwriting values where keys are identical, with contents of dictionary `d`<eos>
<sos>df['b']<tab>get all the values in column `b` from pandas data frame `df`<eos>
<sos>ebar = plt.errorbar(x, y, yerr=err, ecolor='y')<tab>make a line plot with errorbars, `ebar`, from data `x, y, err` and set color of the errorbars to `y` (yellow)<eos>
<sos>results += [each for each in os.listdir(folder) if each.endswith('.c')]<tab>find all files with extension '.c' in directory `folder`<eos>
<sos>print('\xc2\xa3'.decode('utf8') + '1')<tab>add unicode string '1' to UTF-8 decoded string '\xc2\xa3'<eos>
<sos>re.sub('(?<=[a-z])([A-Z])', '-\\1', s).lower()<tab>lower-case the string obtained by replacing the occurrences of regex pattern '(?<=[a-z])([A-Z])' in string `s` with eplacement '-\\1'<eos>
<sos>os.system('ulimit -s unlimited; some_executable')<tab>None<eos>
<sos>"""{0:.3g}""".format(num)<tab>format a string `num` using string formatting<eos>
<sos>numpy.append(a, a[0])<tab>append the first element of array `a` to array `a`<eos>
<sos>df.ix[:, (df.loc[0] == 38.15)].columns<tab>return the column for value 38.15 in dataframe `df`<eos>
<sos>df2['revenue'] = df2.CET.map(df1.set_index('date')['revenue'])<tab>merge 2 dataframes `df1` and `df2` with same values in a column 'revenue' with and index 'date'<eos>
<sos>json_data = json.loads(json_string)<tab>load a json data `json_string` into variable `json_data`<eos>
<sos>math.cos(math.radians(1))<tab>convert radians 1 to degrees<eos>
<sos>sum(isinstance(x, int) for x in a)<tab>count the number of integers in list `a`<eos>
<sos>'used\u200b'.replace('\u200b', '*')<tab>replacing  '\u200b' with '*' in a string  using regular expressions<eos>
<sos>threading.Thread(target=SudsMove).start()<tab>run function 'SudsMove' simultaneously<eos>
<sos>sum(i * i for i in l)<tab>sum of squares values in a list `l`<eos>
<sos>sum(map(lambda x: x * x, l))<tab>calculate the sum of the squares of each value in list `l`<eos>
<sos>d = dict(((key, value) for (key, value) in iterable))<tab>Create a dictionary `d` from list `iterable`<eos>
<sos>d = {key: value for (key, value) in iterable}<tab>Create a dictionary `d` from list `iterable`<eos>
<sos>d = {k: v for (k, v) in iterable}<tab>Create a dictionary `d` from list of key value pairs `iterable`<eos>
<sos>df.round({'Alabama_exp': 2, 'Credit_exp': 3})<tab>round off entries in dataframe `df` column `Alabama_exp` to two decimal places, and entries in column `Credit_exp` to three decimal places<eos>
<sos>p.setopt(pycurl.WRITEFUNCTION, lambda x: None)<tab>Make function `WRITEFUNCTION` output nothing in curl `p`<eos>
<sos>print(random.choice(words))<tab>return a random word from a word list 'words'<eos>
<sos>max(d, key=lambda x: d[x]['count'])<tab>Find a max value of the key `count` in a nested dictionary `d`<eos>
<sos>[(int(x) if x else 0) for x in data.split(',')]<tab>get list of string elements in string `data` delimited by commas, putting `0` in place of empty strings<eos>
<sos>""",""".join(x or '0' for x in s.split(','))<tab>split string `s` into a list of strings based on ',' then replace empty strings with zero<eos>
<sos>re.compile('$^')<tab>regular expression match nothing<eos>
<sos>re.compile('.\\A|.\\A*|.\\A+')<tab>regular expression syntax for not to match anything<eos>
<sos>re.compile('a^')<tab>create a regular expression object with a pattern that will match nothing<eos>
<sos>df.columns[df.max() > 0]<tab>drop all columns in dataframe `df` that holds a maximum value bigger than 0<eos>
<sos>yourdatetime.date() == datetime.today().date()<tab>check if date `yourdatetime` is equal to today's date<eos>
<sos>print('\x1b[1m' + 'Hello')<tab>print bold text 'Hello'<eos>
<sos>re.sub('.{20}(.mkv)', '\\1', 'unique12345678901234567890.mkv')<tab>remove 20 symbols in front of '.' in string 'unique12345678901234567890.mkv'<eos>
<sos>['a', 'c', 'b', 'obj']<tab>Define a list with string values `['a', 'c', 'b', 'obj']`<eos>
<sos>""" """.join(mystring.split())<tab>substitute multiple whitespace with single whitespace in string `mystring`<eos>
<sos>print('{:.100f}'.format(2.345e-67))<tab>print a floating point number 2.345e-67 without any truncation<eos>
<sos>('key1' in dict)<tab>Check if key 'key1' in `dict`<eos>
<sos>('a' in d)<tab>Check if key 'a' in `d`<eos>
<sos>('c' in d)<tab>Check if key 'c' in `d`<eos>
<sos>if ('key1' in dict):
    pass<tab>Check if a given key 'key1' exists in dictionary `dict`<eos>
<sos>if (key in d):
    pass<tab>Check if a given key `key` exists in dictionary `d`<eos>
<sos>Blog.objects.filter(pk__in=[1, 4, 7])<tab>create a django query for a list of values `1, 4, 7`<eos>
<sos>f = open('test/test.pdf', 'rb')<tab>read a binary file 'test/test.pdf'<eos>
<sos>format(12345678.46, ',').replace(',', ' ').replace('.', ',')<tab>insert ' ' between every three digit before '.' and replace ',' with '.' in 12345678.46<eos>
<sos>pd.merge(frame_1, frame_2, left_on='county_ID', right_on='countyid')<tab>Join pandas data frame `frame_1` and `frame_2` with left join by `county_ID` and right join by `countyid`<eos>
<sos>np.isnan(a).sum() / np.prod(a.shape)<tab>calculate ratio of sparsity in a numpy array `a`<eos>
<sos>sorted(iter(cityPopulation.items()), key=lambda k_v: k_v[1][2], reverse=True)<tab>reverse sort items in default dictionary `cityPopulation` by the third item in each key's list of values<eos>
<sos>sorted(list(u.items()), key=lambda v: v[1])<tab>Sort dictionary `u` in ascending order based on second elements of its values<eos>
<sos>sorted(list(d.items()), key=lambda k_v: k_v[1], reverse=True)<tab>reverse sort dictionary `d` based on its values<eos>
<sos>sorted(list(d.items()), key=lambda k_v: k_v[1])<tab>sorting a defaultdict `d` by value<eos>
<sos>f = open(os.path.join(__location__, 'bundled-resource.jpg'))<tab>open a file 'bundled-resource.jpg' in the same directory as a python script<eos>
<sos>f = open('words.txt', 'rU')<tab>open the file 'words.txt' in 'rU' mode<eos>
<sos>{k: (float(d2[k]) / d1[k]) for k in d2}<tab>divide the values with same keys of two dictionary `d1` and `d2`<eos>
<sos>{k: (d2[k] / d1[k]) for k in list(d1.keys()) & d2}<tab>divide the value for each key `k` in dict `d2` by the value for the same key `k` in dict `d1`<eos>
<sos>dict((k, float(d2[k]) / d1[k]) for k in d2)<tab>divide values associated with each key in dictionary `d1` from values associated with the same key in dictionary `d2`<eos>
<sos>df.to_csv(filename, date_format='%Y%m%d')<tab>write dataframe `df` to csv file `filename` with dates formatted as yearmonthday  `%Y%m%d`<eos>
<sos>my_dict.pop('key', None)<tab>remove a key 'key' from a dictionary `my_dict`<eos>
<sos>b = np.where(np.isnan(a), 0, a)<tab>replace NaN values in array `a` with zeros<eos>
<sos>subprocess.call('start command -flags arguments', shell=True)<tab>subprocess run command 'start command -flags arguments' through the shell<eos>
<sos>subprocess.call('command -flags arguments &', shell=True)<tab>run command 'command -flags arguments &' on command line tools as separate processes<eos>
<sos>f = urllib.request.urlopen(url, urllib.parse.unquote(urllib.parse.urlencode(params)))<tab>replace percent-encoded code in request `f` to their single-character equivalent<eos>
<sos>"""    xyz     """.rstrip()<tab>remove white spaces from the end of string "    xyz     "<eos>
<sos>urllib.parse.quote(s.encode('utf-8'))<tab>Replace special characters in utf-8 encoded string `s` using the %xx escape<eos>
<sos>urllib.parse.quote_plus('a b')<tab>None<eos>
<sos>np.array(map(int, '100110'))<tab>Create an array containing the conversion of string '100110' into separate elements<eos>
<sos>print(np.array(list(mystr), dtype=int))<tab>convert a string 'mystr' to numpy array of integer values<eos>
<sos>img = cv2.imread('messi5.jpg', 0)<tab>convert an rgb image 'messi5.jpg' into grayscale `img`<eos>
<sos>lst.sort(key=lambda x: x[2], reverse=True)<tab>sort list `lst` in descending order based on the second item of each tuple in it<eos>
<sos>indices = [i for i, x in enumerate(my_list) if x == 'whatever']<tab>None<eos>
<sos>subprocess.call('grep -r PASSED *.log | sort -u | wc -l', shell=True)<tab>execute shell command 'grep -r PASSED *.log | sort -u | wc -l' with a | pipe in it<eos>
<sos>len(my_text) - len(my_text.rstrip('?'))<tab>count the number of trailing question marks in string `my_text`<eos>
<sos>df[df.columns[1:]].replace('[\\$,]', '', regex=True).astype(float)<tab>remove dollar sign '$' from second to last column data in dataframe 'df' and convert the data into floats<eos>
<sos>df1.merge(df2, how='left', on='word')<tab>Merge column  'word' in dataframe `df2` with column 'word' on dataframe `df1`<eos>
<sos>print(''.join(''.join(i) for i in zip(a2, a1)) + a[-1] if len(a) % 2 else '')<tab>switch positions of each two adjacent characters in string `a`<eos>
<sos>root.attributes('-topmost', True)<tab>make a window `root` jump to the front<eos>
<sos>root.lift()<tab>make a window `root` jump to the front<eos>
<sos>hex(int(''.join([str(int(b)) for b in walls]), 2))<tab>Convert list of booleans `walls` into a hex string<eos>
<sos>hex(sum(b << i for i, b in enumerate(reversed(walls))))<tab>convert the sum of list `walls` into a hex presentation<eos>
<sos>print(('Total score for', name, 'is', score))<tab>print the string `Total score for`, the value of the variable `name`, the string `is` and the value of the variable `score` in one print call.<eos>
<sos>print('Total score for {} is {}'.format(name, score))<tab>print multiple arguments 'name' and 'score'.<eos>
<sos>print('Total score for %s is %s  ' % (name, score))<tab>print a string using multiple strings `name` and `score`<eos>
<sos>print(('Total score for', name, 'is', score))<tab>print string including multiple variables `name` and `score`<eos>
<sos>url('^$', TemplateView.as_view(template_name='your_template.html'))<tab>serve a static html page 'your_template.html' at the root of a django project<eos>
<sos>df[df['A'].isin([3, 6])]<tab>use a list of values `[3,6]` to select rows from a pandas dataframe `df`'s column 'A'<eos>
<sos>instance.__class__.__name__<tab>None<eos>
<sos>system('/path/to/my/venv/bin/python myscript.py')<tab>execute python code `myscript.py` in a virtualenv `/path/to/my/venv` from matlab<eos>
<sos>Employees.objects.values_list('eng_name', flat=True)<tab>django return a QuerySet list containing the values of field 'eng_name' in model `Employees`<eos>
<sos>re.findall('\\d|\\d,\\d\\)', '6,7)')<tab>find all digits in string '6,7)' and put them to a list<eos>
<sos>input('Press Enter to continue...')<tab>prompt string 'Press Enter to continue...' to the console<eos>
<sos>"""ABC""".encode('hex')<tab>print string "ABC" as hex literal<eos>
<sos>db.Doc.update({'_id': b['_id']}, {'$set': {'geolocCountry': myGeolocCountry}})<tab>insert a new field 'geolocCountry' on an existing document  'b' using pymongo<eos>
<sos>re.sub('l+', 'l', 'lollll')<tab>Write a regex statement to match 'lol' to 'lolllll'.<eos>
<sos>rows = soup.findAll('tr')[4::5]<tab>BeautifulSoup find all 'tr' elements in HTML string `soup` at the five stride starting from the fourth element<eos>
<sos>plt.gca().invert_xaxis()<tab>reverse all x-axis points in pyplot<eos>
<sos>plt.gca().invert_yaxis()<tab>reverse y-axis in pyplot<eos>
<sos>pd.concat([GOOG, AAPL], keys=['GOOG', 'AAPL'], axis=1)<tab>stack two dataframes next to each other in pandas<eos>
<sos>return HttpResponse(json.dumps(response_data), content_type='application/json')<tab>create a json response `response_data`<eos>
<sos>myString.decode('string_escape')<tab>decode escape sequences in string `myString`<eos>
<sos>hashlib.md5(open('filename.exe', 'rb').read()).hexdigest()<tab>calculate the md5 checksum of a file named  'filename.exe'<eos>
<sos>[k for k, v in d.items() if v == desired_value]<tab>Find all keys from a dictionary `d` whose values are `desired_value`<eos>
<sos>{k for d in LoD for k in list(d.keys())}<tab>create a set containing all keys' names from dictionary `LoD`<eos>
<sos>set([i for s in [list(d.keys()) for d in LoD] for i in s])<tab>create a set containing all keys names from list of dictionaries `LoD`<eos>
<sos>[i for s in [list(d.keys()) for d in LoD] for i in s]<tab>extract all keys from a list of dictionaries `LoD`<eos>
<sos>keys, values = zip(*list(d.items()))<tab>unpack keys and values of a dictionary `d` into two lists<eos>
<sos>int(Decimal(s))<tab>convert a string `s` containing a decimal to an integer<eos>
<sos>int(s.split('.')[0])<tab>None<eos>
<sos>numpy.in1d(b, a).all()<tab>check if array `b` contains all elements of array `a`<eos>
<sos>numpy.array([(x in a) for x in b])<tab>numpy:  check if array 'a' contains all the numbers in array 'b'.<eos>
<sos>networkx.draw_networkx_labels(G, pos, labels)<tab>Draw node labels `labels` on networkx graph `G ` at position `pos`<eos>
<sos>y = [row[:] for row in x]<tab>make a row-by-row copy `y` of array `x`<eos>
<sos>X = numpy.loadtxt('somefile.csv', delimiter=',')<tab>Create 2D numpy array from the data provided in 'somefile.csv' with each row in the file having same number of values<eos>
<sos>matching = [s for s in some_list if 'abc' in s]<tab>get a list of items from the list `some_list` that contain string 'abc'<eos>
<sos>df.to_csv('mydf.tsv', sep='\t')<tab>export a pandas data frame `df` to a file `mydf.tsv` and retain the indices<eos>
<sos>random.sample(list(range(100)), 10)<tab>None<eos>
<sos>s.rsplit(',', 1)<tab>split a string `s` on last delimiter<eos>
<sos>all(isinstance(x, int) for x in lst)<tab>Check if all elements in list `lst` are tupples of long and int<eos>
<sos>all(isinstance(x, int) for x in lst)<tab>check if all elements in a list 'lst' are the same type 'int'<eos>
<sos>line.strip()<tab>strip a string `line` of all carriage returns and newlines<eos>
<sos>driver.execute_script('window.scrollTo(0, Y)')<tab>scroll to the bottom of a web page using selenium webdriver<eos>
<sos>driver.execute_script('window.scrollTo(0, document.body.scrollHeight);')<tab>scroll a to the bottom of a web page using selenium webdriver<eos>
<sos>datetime.datetime.combine(dateobject, datetime.time())<tab>convert Date object `dateobject` into a DateTime object<eos>
<sos>print(any(x in a for x in b))<tab>check if any item from list `b` is in list `a`<eos>
<sos>scipy.misc.imsave('outfile.jpg', image_array)<tab>save a numpy array `image_array` as an image 'outfile.jpg'<eos>
<sos>item = re.sub(' ?\\([^)]+\\)', '', item)<tab>Remove anything in parenthesis from string `item` with a regex<eos>
<sos>item = re.sub(' ?\\(\\w+\\)', '', item)<tab>Remove word characters in parenthesis from string `item` with a regex<eos>
<sos>item = re.sub(' \\(\\w+\\)', '', item)<tab>Remove all data inside parenthesis in string `item`<eos>
<sos>len(set(list1).intersection(list2)) > 0<tab>check if any elements in one list `list1` are in another list `list2`<eos>
<sos>i = int(s, 16)<tab>convert hex string `s` to decimal<eos>
<sos>int('0xff', 16)<tab>convert hex string "0xff" to decimal<eos>
<sos>int('FFFF', 16)<tab>convert hex string "FFFF" to decimal<eos>
<sos>ast.literal_eval('0xdeadbeef')<tab>convert hex string '0xdeadbeef' to decimal<eos>
<sos>int('deadbeef', 16)<tab>convert hex string 'deadbeef' to decimal<eos>
<sos>os.system('screencapture screen.png')<tab>take screenshot 'screen.png' on mac os x<eos>
<sos>driver.set_window_size(1400, 1000)<tab>Set a window size to `1400, 1000` using selenium webdriver<eos>
<sos>unicodedata.normalize('NFKD', 'm\xfasica').encode('ascii', 'ignore')<tab>replace non-ascii chars from a unicode string u'm\xfasica'<eos>
<sos>pandas.concat([df1, df2]).drop_duplicates().reset_index(drop=True)<tab>concatenate dataframe `df1` with `df2` whilst removing duplicates<eos>
<sos>a = numpy.fromfile('filename', dtype=numpy.float32)<tab>Construct an array with data type float32 `a` from data in binary file 'filename'<eos>
<sos>subprocess.call('mv /home/somedir/subdir/* somedir/', shell=True)<tab>execute a mv command `mv /home/somedir/subdir/* somedir/` in subprocess<eos>
<sos>subprocess.call('mv /home/somedir/subdir/* somedir/', shell=True)<tab>None<eos>
<sos>print('\u25b2'.encode('utf-8'))<tab>print a character that has unicode value `\u25b2`<eos>
<sos>difflib.SequenceMatcher(None, file1.read(), file2.read())<tab>compare contents  at filehandles `file1` and `file2` using difflib<eos>
<sos>dict((k, int(v)) for k, v in (e.split(' - ') for e in s.split(',')))<tab>Create a dictionary from string `e` separated by `-` and `,`<eos>
<sos>all(i in (1, 2, 3, 4, 5) for i in (1, 6))<tab>check if all elements in a tuple `(1, 6)` are in another `(1, 2, 3, 4, 5)`<eos>
<sos>df['Date'].map(lambda t: t.date()).unique()<tab>extract unique dates from time series 'Date' in dataframe `df`<eos>
<sos>"""{:>7s}""".format(mystring)<tab>right align string `mystring` with a width of 7<eos>
<sos>open('ComponentReport-DJI.xls', 'rb').read(200)<tab>read an excel file 'ComponentReport-DJI.xls'<eos>
<sos>df.sort_values(['b', 'c'], ascending=[True, False], inplace=True)<tab>sort dataframe `df` based on column 'b' in ascending and column 'c' in descending<eos>
<sos>df.sort_values(['a', 'b'], ascending=[True, False])<tab>sort dataframe `df` based on column 'a' in ascending and column 'b' in descending<eos>
<sos>df1.sort(['a', 'b'], ascending=[True, False], inplace=True)<tab>sort a pandas data frame with column `a` in ascending and `b` in descending order<eos>
<sos>df.sort(['a', 'b'], ascending=[True, False])<tab>sort a pandas data frame by column `a` in ascending, and by column `b` in descending order<eos>
<sos>redirect('Home.views.index')<tab>django redirect to view 'Home.views.index'<eos>
<sos>[x for x in a if x not in [2, 3, 7]]<tab>remove all values within one list `[2, 3, 7]` from another list `a`<eos>
<sos>out = ''.join(c for c in asking if c not in ('!', '.', ':'))<tab>remove the punctuation '!', '.', ':' from a string `asking`<eos>
<sos>soup.find('meta', {'name': 'City'})['content']<tab>BeautifulSoup get value associated with attribute 'content' where attribute 'name' is equal to 'City' in tag 'meta' in HTML parsed string `soup`<eos>
<sos>urllib.parse.unquote('%0a')<tab>unquote a urlencoded unicode string '%0a'<eos>
<sos>urllib.parse.unquote(url).decode('utf8')<tab>decode url `url` from UTF-16 code to UTF-8 code<eos>
<sos>del lst[:]<tab>empty a list `lst`<eos>
<sos>del lst1[:]<tab>empty a list `lst`<eos>
<sos>lst[:] = []<tab>empty a list `lst`<eos>
<sos>alist[:] = []<tab>empty a list `alist`<eos>
<sos>s.reset_index(0).reset_index(drop=True)<tab>reset index of series `s`<eos>
<sos>elems[0].getText().encode('utf-8')<tab>convert unicode text from list `elems` with index 0 to normal text 'utf-8'<eos>
<sos>[(y - x) for x, y in zip(L, L[1:])]<tab>create a list containing the subtraction of each item in list `L` from the item prior to it<eos>
<sos>print(re.search('\\bLOG_ADDR\\s+(\\S+)', line).group(1))<tab>get value in string `line` matched by regex pattern '\\bLOG_ADDR\\s+(\\S+)'<eos>
<sos>globals().update(importlib.import_module('some.package').__dict__)<tab>import all classes from module `some.package`<eos>
<sos>"""""".join(['a', 'b', 'c', 'd'])<tab>convert a list of characters `['a', 'b', 'c', 'd']` into a string<eos>
<sos>url.split('&')<tab>Slice `url` with '&' as delimiter  to get  "http://www.domainname.com/page?CONTENT_ITEM_ID=1234" from url "http://www.domainname.com/page?CONTENT_ITEM_ID=1234&param2&param3
"<eos>
<sos>od = collections.OrderedDict(sorted(d.items()))<tab>sort dictionary `d` by key<eos>
<sos>OrderedDict(sorted(list(d.items()), key=(lambda t: t[0])))<tab>sort a dictionary `d` by key<eos>
<sos>response = requests.put(url, data=json.dumps(data), headers=headers)<tab>Execute a put request to the url `url`<eos>
<sos>re.sub('[\\W_]+', '', s)<tab>replace everything that is not an alphabet or a digit with '' in 's'.<eos>
<sos>[(x + y) for x in l2 for y in l1]<tab>create a list of aggregation of each element from list `l2` to all elements of list `l1`<eos>
<sos>dict([x.split('=') for x in s.split()])<tab>convert string `x'  to dictionary splitted by `=` using list comprehension<eos>
<sos>my_list.pop(2)<tab>remove index 2 element from a list `my_list`<eos>
<sos>s = s.replace('M', '')<tab>Delete character "M" from a string `s` using python<eos>
<sos>newstr = oldstr.replace('M', '')<tab>None<eos>
<sos>sum(x * y for x, y in zip(a, b))<tab>get the sum of the products of each pair of corresponding elements in lists `a` and `b`<eos>
<sos>list(x * y for x, y in list(zip(a, b)))<tab>sum the products of each two elements at the same index of list `a` and list `b`<eos>
<sos>sum(i * j for i, j in zip(a, b))<tab>sum the product of each two items at the same index of list `a` and list `b`<eos>
<sos>sum(x * y for x, y in list(zip(a, b)))<tab>sum the product of elements of two lists named `a` and `b`<eos>
<sos>f.write(open('xxx.mp4', 'rb').read())<tab>write the content of file `xxx.mp4` to file `f`<eos>
<sos>new_list = [(x + 1) for x in my_list]<tab>Add 1 to each integer value in list `my_list`<eos>
<sos>[x for x in j if x >= 5]<tab>get a list of all items in list `j` with values greater than `5`<eos>
<sos>plt.plot(list(range(10)), '--bo')<tab>set color marker styles `--bo` in matplotlib<eos>
<sos>plt.plot(list(range(10)), linestyle='--', marker='o', color='b')<tab>set circle markers on plot for individual points  defined in list   `[1,2,3,4,5,6,7,8,9,10]` created by range(10)<eos>
<sos>[i.split('\t', 1)[0] for i in l]<tab>split strings in list `l` on the first occurring tab `\t` and enter only the first resulting substring in a new list<eos>
<sos>myList = [i.split('\t')[0] for i in myList]<tab>Split each string in list `myList` on the tab character<eos>
<sos>sum(your_list)<tab>Sum numbers in a list 'your_list'<eos>
<sos>ForkedPdb().set_trace()<tab>attach debugger pdb to class `ForkedPdb`<eos>
<sos>result = {k: d2.get(v) for k, v in list(d1.items())}<tab>Compose keys from dictionary `d1` with respective values in dictionary `d2`<eos>
<sos>datetime.datetime.now() + datetime.timedelta(days=1, hours=3)<tab>add one day and three hours to the present time from datetime.now()<eos>
<sos>[int(s[i:i + 3], 2) for i in range(0, len(s), 3)]<tab>None<eos>
<sos>dict((v, k) for k, v in my_dict.items())<tab>switch keys and values in a dictionary `my_dict`<eos>
<sos>print(sorted(L, key=lambda x: int(x.split('.')[2])))<tab>sort a list `L` by number after second '.'<eos>
<sos>any(d['name'] == 'Test' for d in label)<tab>Check if the value of the key "name" is "Test" in a list of dictionaries `label`<eos>
<sos>a[:] = [x for x in a if x != [1, 1]]<tab>remove all instances of [1, 1] from list `a`<eos>
<sos>[x for x in a if x != [1, 1]]<tab>remove all instances of `[1, 1]` from a list `a`<eos>
<sos>b = {a[i]: a[i + 1] for i in range(0, len(a), 2)}<tab>convert a list 'a' to a dictionary where each even element represents the key to the dictionary, and the following odd element is the value<eos>
<sos>len(set(a)) == len(a)<tab>check whether elements in list `a` appear only once<eos>
<sos>print(hashlib.md5(open(full_path, 'rb').read()).hexdigest())<tab>Generate MD5 checksum of file in the path `full_path` in hashlib<eos>
<sos>sorted(list(data.items()), key=lambda x: x[1][0])<tab>None<eos>
<sos>"""""".join(x.upper() if random.randint(0, 1) else x for x in s)<tab>randomly switch letters' cases in string `s`<eos>
<sos>os.system('GREPDB="echo 123"; /bin/bash -c "$GREPDB"')<tab>force bash interpreter '/bin/bash' to be used instead of shell<eos>
<sos>os.system('/bin/bash -c "echo hello world"')<tab>Run a command `echo hello world` in bash instead of shell<eos>
<sos>getattr(test, a_string)<tab>access the class variable `a_string` from a class object `test`<eos>
<sos>Image.open('pathToFile').show()<tab>Display a image file `pathToFile`<eos>
<sos>"""didn't""".replace("'", '')<tab>replace single quote character in string "didn't" with empty string ''<eos>
<sos>files.sort(key=file_number)<tab>sort list `files` based on variable `file_number`<eos>
<sos>sentence.replace(' ', '')<tab>remove all whitespace in a string `sentence`<eos>
<sos>pattern = re.compile('\\s+')
sentence = re.sub(pattern, '', sentence)<tab>remove all whitespace in a string `sentence`<eos>
<sos>sentence.strip()<tab>remove whitespace in string `sentence` from beginning and end<eos>
<sos>sentence = re.sub('\\s+', '', sentence, flags=re.UNICODE)<tab>remove all whitespaces in string `sentence`<eos>
<sos>sentence = ''.join(sentence.split())<tab>remove all whitespaces in a string `sentence`<eos>
<sos>sum(my_counter.values())<tab>sum all the values in a counter variable `my_counter`<eos>
<sos>np.sqrt(((A - B) ** 2).sum(-1))<tab>find the euclidean distance between two 3-d arrays `A` and `B`<eos>
<sos>levels = [{}, {}, {}]<tab>create list `levels` containing 3 empty dictionaries<eos>
<sos>weekly = [sum(visitors[x:x + 7]) for x in range(0, len(daily), 7)]<tab>find the sums of length 7 subsets of a list `daily`<eos>
<sos>del d[key]<tab>Delete an element `key` from a dictionary `d`<eos>
<sos>{i: a[i] for i in a if (i != 0)}<tab>Delete an element 0 from a dictionary `a`<eos>
<sos>lol.pop('hello')<tab>Delete an element "hello" from a dictionary `lol`<eos>
<sos>del r[key]<tab>Delete an element with key `key` dictionary `r`<eos>
<sos>np.linalg.solve(np.dot(a.T, a), np.dot(a.T, b))<tab>solve for the least squares' solution of matrices `a` and `b`<eos>
<sos>pd.concat([df.drop('b', axis=1), pd.DataFrame(df['b'].tolist())], axis=1)<tab>split dictionary/list inside a pandas column 'b' into separate columns in dataframe `df`<eos>
<sos>for i in range(0, 10, 2):
    pass<tab>loop through 0 to 10 with step 2<eos>
<sos>for i in mylist[::2]:
    pass<tab>loop through `mylist` with step 2<eos>
<sos>[{'content': x['content'].lower()} for x in messages]<tab>lowercase string values with key 'content' in a list of dictionaries `messages`<eos>
<sos>""" """.join(my_list)<tab>convert a list `my_list` into string with values separated by spaces<eos>
<sos>re.sub('(http://\\S+|\\S*[^\\w\\s]\\S*)', '', a)<tab>replace each occurrence of the pattern '(http://\\S+|\\S*[^\\w\\s]\\S*)' within `a` with ''<eos>
<sos>str(n) == str(n)[::-1]<tab>check if string `str` is palindrome<eos>
<sos>ftp.storbinary('STOR myfile.txt', open('myfile.txt', 'rb'))<tab>upload binary file `myfile.txt` with ftplib<eos>
<sos>re.sub('.*I', 'I', stri)<tab>remove all characters from string `stri` upto character 'I'<eos>
<sos>int('1,000,000'.replace(',', ''))<tab>parse a comma-separated string number '1,000,000' into int<eos>
<sos>pd.merge(df1, df2, left_index=True, right_index=True, how='outer')<tab>combine  dataframe `df1` and dataframe `df2` by index number<eos>
<sos>pandas.concat([df1, df2], axis=1)<tab>None<eos>
<sos>all(dict.values())<tab>check if all boolean values in a python dictionary `dict` are true<eos>
<sos>df.c_contofficeID.str.replace('^12(?=.{4}$)', '')<tab>use regex pattern '^12(?=.{4}$)' to remove digit 12 if followed by 4 other digits in column `c_contofficeID` of dataframe `df`<eos>
<sos>L[::(-1)]<tab>reverse a list `L`<eos>
<sos>reversed(array)<tab>reverse a list `array`<eos>
<sos>L.reverse()<tab>reverse a list `L`<eos>
<sos>list(reversed(array))<tab>reverse a list `array`<eos>
<sos>[tup[0] for tup in A]<tab>get first element of each tuple in list `A`<eos>
<sos>newcontents = contents.replace('a', 'e').replace('s', '3')<tab>replace character 'a' with character 'e' and character 's' with character '3' in file `contents`<eos>
<sos>json.dumps([dict(list(row.items())) for row in rs])<tab>serialise SqlAlchemy RowProxy object `row` to a json object<eos>
<sos>config_file = os.path.expanduser('~/foo.ini')<tab>get file '~/foo.ini'<eos>
<sos>request.params.getall('c')<tab>get multiple parameters with same name from a url in pylons<eos>
<sos>np.corrcoef(x)<tab>Convert array `x` into a correlation matrix<eos>
<sos>print(max(1, 2, 3))<tab>Find the greatest number in set `(1, 2, 3)`<eos>
<sos>self.request.get('var_name')<tab>Retrieve parameter 'var_name' from a GET request.<eos>
<sos>a['x'].apply(lambda x, y: x + y, args=(100,))<tab>Add 100 to each element of column "x" in dataframe `a`<eos>
<sos>User.objects.order_by('-pet__age')[:10]<tab>Django get first 10 records of model `User` ordered by criteria 'age' of model 'pet'<eos>
<sos>time.sleep(5)<tab>delay for "5" seconds<eos>
<sos>time.sleep(60)<tab>make a 60 seconds time delay<eos>
<sos>sleep(0.1)<tab>make a 0.1 seconds time delay<eos>
<sos>time.sleep(60)<tab>make a 60 seconds time delay<eos>
<sos>time.sleep(0.1)<tab>make a 0.1 seconds time delay<eos>
<sos>[x for x in my_list if not any(c.isdigit() for c in x)]<tab>From a list of strings `my_list`, remove the values that contains numbers.<eos>
<sos>df['state'].apply(lambda x: x[len(x) / 2 - 1:len(x) / 2 + 1])<tab>get the middle two characters of a string 'state' in a pandas dataframe `df`<eos>
<sos>plt.grid(True)<tab>draw a grid line on every tick of plot `plt`<eos>
<sos>sorted(lst, key=lambda x: (-1 * c[x], lst.index(x)))<tab>sort list `lst` based on each element's number of occurrences<eos>
<sos>[max(len(str(x)) for x in line) for line in zip(*foo)]<tab>Get the value with the maximum length in each column in array `foo`<eos>
<sos>df.Country.value_counts().reset_index(name='Sum of Accidents')<tab>get the count of each unique value in column `Country` of dataframe `df` and store in column `Sum of Accidents`<eos>
<sos>data.set_index('Date').diff()<tab>calculat the difference between each row and the row previous to it in dataframe `data`<eos>
<sos>a.update([3, 4])<tab>append values `[3, 4]` to a set `a`<eos>
<sos>a[1::2] = -1<tab>set every two-stride far element to -1 starting from second element in array `a`<eos>
<sos>df.groupby('group')['value'].rank(ascending=False)<tab>Get rank of rows from highest to lowest of dataframe `df`, grouped by value in column `group`, according to value in column `value`<eos>
<sos>datetime.strptime('Tue, 22 Nov 2011 06:00:00 GMT', '%a, %d %b %Y %H:%M:%S %Z')<tab>convert js date object 'Tue, 22 Nov 2011 06:00:00 GMT' to python datetime<eos>
<sos>struct.pack('<I', 1633837924)<tab>Convert a binary value '1633837924' to string<eos>
<sos>list.append('foo')<tab>append string `foo` to list `list`<eos>
<sos>list.insert(0, 'foo')<tab>insert string `foo` at position `0` of list `list`<eos>
<sos>theset = set(k.lower() for k in thedict)<tab>convert keys in dictionary `thedict` into case insensitive<eos>
<sos>"""{s:{c}^{n}}""".format(s='dog', n=5, c='x')<tab>pad 'dog' up to a length of 5 characters with 'x'<eos>
<sos>isinstance(s, str)<tab>check if type of variable `s` is a string<eos>
<sos>isinstance(s, str)<tab>check if type of a variable `s` is string<eos>
<sos>dict(pair for d in L for pair in list(d.items()))<tab>Convert list of dictionaries `L` into a flat dictionary<eos>
<sos>{k: v for d in L for k, v in list(d.items())}<tab>merge a list of dictionaries in list `L` into a single dict<eos>
<sos>df.sort_values(['Peak', 'Weeks'], ascending=[True, False], inplace=True)<tab>sort a pandas data frame according to column `Peak` in ascending and `Weeks` in descending order<eos>
<sos>df.sort(['Peak', 'Weeks'], ascending=[True, False], inplace=True)<tab>sort a pandas data frame by column `Peak` in ascending and `Weeks` in descending order<eos>
<sos>eval("print('Hello')")<tab>run the code contained in string "print('Hello')"<eos>
<sos>[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]<tab>creating a list of dictionaries [{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]<eos>
<sos>[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]<tab>None<eos>
<sos>list(itertools.product(*a))<tab>get all possible combination of items from 2-dimensional list `a`<eos>
<sos>df.groupby(['Country', 'Item_Code'])[['Y1961', 'Y1962', 'Y1963']].sum()<tab>Get sum of values of columns  'Y1961', 'Y1962', 'Y1963' after group by on columns "Country" and "Item_code" in dataframe `df`.<eos>
<sos>done = [(el, x) for el in [a, b, c, d]]<tab>create list `done` containing permutations of each element in list `[a, b, c, d]` with variable `x` as tuples<eos>
<sos>x = x[numpy.logical_not(numpy.isnan(x))]<tab>remove Nan values from array `x`<eos>
<sos>os.path.join(*x.split(os.path.sep)[2:])<tab>remove first directory from path '/First/Second/Third/Fourth/Fifth'<eos>
<sos>line = line.replace(';', ':')<tab>Replace `;` with `:` in a string `line`<eos>
<sos>subprocess.call('tar c my_dir | md5sum', shell=True)<tab>call bash command 'tar c my_dir | md5sum' with pipe<eos>
<sos>"""437c2123""".decode('hex')<tab>Convert a hex string `437c2123 ` according to ascii value.<eos>
<sos>[k for k, v in User._fields.items() if v.required]<tab>Get a list of all fields in class `User` that are marked `required`<eos>
<sos>df = df.ix[:, 0:2]<tab>remove column by index `[:, 0:2]` in dataframe `df`<eos>
<sos>x = map(int, x.split())<tab>change a string of integers `x` separated by spaces to a list of int<eos>
<sos>x = [int(i) for i in x.split()]<tab>convert a string of integers `x` separated by spaces to a list of integers<eos>
<sos>driver.find_element_by_css_selector("input[onclick*='1 Bedroom Deluxe']")<tab>find element by css selector "input[onclick*='1 Bedroom Deluxe']"<eos>
<sos>re.sub('[^a-zA-Z0-9-_*.]', '', my_string)<tab>None<eos>
<sos>webbrowser.open('file:///my_pdf.pdf')<tab>display a pdf  file that has been downloaded as `my_pdf.pdf`<eos>
<sos>result = result.replace('\\', '')<tab>replace backslashes in string `result` with empty string ''<eos>
<sos>result.replace('\\', '')<tab>remove backslashes from string `result`<eos>
<sos>df.replace('-', 'NaN')<tab>replace value '-' in any column of pandas dataframe to "NaN"<eos>
<sos>datetime.datetime.now().date()<tab>convert datetime object to date object in python<eos>
<sos>datetime.datetime.now().date()<tab>None<eos>
<sos>[elem.tag for elem in a.iter()]<tab>get all sub-elements of an element `a` in an elementtree<eos>
<sos>[elem.tag for elem in a.iter() if elem is not a]<tab>get all sub-elements of an element tree `a` excluding the root element<eos>
<sos>"""2.7.0_bf4fda703454""".split('_')<tab>None<eos>
<sos>sorted(lst, key=lambda x: x['language'] != 'en')<tab>move dictionaries in list `lst` to the end of the list if value of key 'language' in each dictionary is not equal to 'en'<eos>
<sos>all(value == 0 for value in list(your_dict.values()))<tab>check if all values of a dictionary `your_dict` are zero `0`<eos>
<sos>df.pivot_table('Y', rows='X', cols='X2')<tab>produce a pivot table as dataframe using column 'Y' in datafram `df` to form the axes of the resulting dataframe<eos>
<sos>try:
    doSomething()
except:
    pass<tab>call `doSomething()` in a try-except without handling the exception<eos>
<sos>try:
    doSomething()
except Exception:
    pass<tab>call `doSomething()` in a try-except without handling the exception<eos>
<sos>M.sum(axis=0).sum(axis=0)<tab>get a sum of 4d array `M`<eos>
<sos>time.mktime(dt.timetuple()) + dt.microsecond / 1000000.0<tab>Convert a datetime object `dt` to microtime<eos>
<sos>df[(x <= df['columnX']) & (df['columnX'] <= y)]<tab>select all rows in dataframe `df` where the values of column 'columnX' is bigger than or equal to `x` and smaller than or equal to `y`<eos>
<sos>sorted(L, key=itemgetter(2))<tab>sort a list of lists `L` by index 2 of the inner list<eos>
<sos>l.sort(key=(lambda x: x[2]))<tab>sort a list of lists `l` by index 2 of the inner list<eos>
<sos>sorted(l, key=(lambda x: x[2]))<tab>sort list `l` by index 2 of the item<eos>
<sos>sorted_list = sorted(list_to_sort, key=itemgetter(2, 0, 1))<tab>sort a list of lists `list_to_sort` by indices 2,0,1 of the inner list<eos>
<sos>np.argwhere(np.all(arr == [[0, 3], [3, 0]], axis=(1, 2)))<tab>find rows of 2d array in 3d numpy array 'arr' if the row has value '[[0, 3], [3, 0]]'<eos>
<sos>data.loc[:, (list(itertools.product(['one', 'two'], ['a', 'c'])))]<tab>From multiIndexed dataframe `data` select columns `a` and `c` within each higher order column `one` and `two`<eos>
<sos>data.loc[:, ([('one', 'a'), ('one', 'c'), ('two', 'a'), ('two', 'c')])]<tab>select only specific columns 'a' and 'c' from a dataframe 'data' with multiindex columns<eos>
<sos>hashtags = re.findall('#(\\w+)', str1, re.UNICODE)<tab>match a sharp, followed by letters (including accent characters) in string `str1` using a regex<eos>
<sos>os.rename(src, dst)<tab>Rename file from `src` to `dst`<eos>
<sos>print(etree.tostring(some_tag.find('strong')))<tab>Get all texts and tags from a tag `strong` from etree tag `some_tag` using lxml<eos>
<sos>json.dumps({str(k): v for k, v in data.items()})<tab>Serialize dictionary `data` and its keys to a JSON formatted string<eos>
<sos>soup = BeautifulSoup(response.read().decode('utf-8'))<tab>parse UTF-8 encoded HTML response `response` to BeautifulSoup object<eos>
<sos>os.remove(filename)<tab>delete file `filename`<eos>
<sos>min([x for x in num_list if x > 2])<tab>get the next value greatest to `2` from a list of numbers `num_list`<eos>
<sos>df['prod_type'] = 'responsive'<tab>Replace each value in column 'prod_type' of dataframe `df` with string 'responsive'<eos>
<sos>sorted(lst, key=lambda x: (x < 0, x))<tab>sort list `lst` with positives coming before negatives with values sorted respectively<eos>
<sos>six_months = (date.today() + relativedelta(months=(+ 6)))<tab>get the date 6 months from today<eos>
<sos>(date(2010, 12, 31) + relativedelta(months=(+ 1)))<tab>get the date 1 month from today<eos>
<sos>(date(2010, 12, 31) + relativedelta(months=(+ 2)))<tab>get the date 2 months from today<eos>
<sos>print((datetime.date.today() + datetime.timedelta(((6 * 365) / 12))).isoformat())<tab>calculate the date six months from the current date<eos>
<sos>sorted(list(things.keys()), key=lambda x: things[x]['weight'], reverse=True)<tab>get a list of keys of dictionary `things` sorted by the value of nested dictionary key 'weight'<eos>
<sos>a[np.arange(len(a)) != 3]<tab>get all the values from a numpy array `a` excluding index 3<eos>
<sos>[x for x in lst if fn(x) != 0]<tab>delete all elements from a list `x` if a function `fn` taking value as parameter returns `0`<eos>
<sos>df.set_index('month')<tab>set dataframe `df` index using column 'month'<eos>
<sos>arr = [line.split(',') for line in open('./urls-eu.csv')]<tab>read lines from a csv file `./urls-eu.csv` into a list of lists `arr`<eos>
<sos>[i for i in range(100) if i > 10 if i < 20]<tab>list comprehension that produces integers between 11 and 19<eos>
<sos>"""""".join([c for c in strs if c.isdigit()])<tab>Get only digits from a string `strs`<eos>
<sos>re.split('\\t+', yas.rstrip('\t'))<tab>split a string `yas` based on tab '\t'<eos>
<sos>(a.T * b).T<tab>scalar multiply matrix `a` by `b`<eos>
<sos>'test string\n'.rstrip()<tab>remove trailing newline in string "test string\n"<eos>
<sos>'test string \n\n'.rstrip('\n')<tab>remove trailing newline in string 'test string \n\n'<eos>
<sos>s.strip()<tab>remove newline in string `s`<eos>
<sos>s.rstrip()<tab>remove newline in string `s` on the right side<eos>
<sos>s.lstrip()<tab>remove newline in string `s` on the left side<eos>
<sos>'Mac EOL\r'.rstrip('\r\n')<tab>remove newline in string 'Mac EOL\r'<eos>
<sos>'Windows EOL\r\n'.rstrip('\r\n')<tab>remove newline in string 'Windows EOL\r\n' on the right side<eos>
<sos>'Unix EOL\n'.rstrip('\r\n')<tab>remove newline in string 'Unix EOL\n' on the right side<eos>
<sos>'Hello\n\n\n'.rstrip('\n')<tab>remove newline in string "Hello\n\n\n" on the right side<eos>
<sos>re.findall('.{,16}\\b', text)<tab>split string `text` into chunks of 16 characters each<eos>
<sos>[[X[i][j] for j in range(len(X[i]))] for i in range(len(X))]<tab>Get a list comprehension in list of lists `X`<eos>
<sos>'\xd0\xbc\xd0\xb0\xd1\x80\xd0\xba\xd0\xb0'.encode('latin-1')<tab>convert unicode string '\xd0\xbc\xd0\xb0\xd1\x80\xd0\xba\xd0\xb0' to byte string<eos>
<sos>df.groupby((df.a == 'B').shift(1).fillna(0).cumsum())<tab>split dataframe `df` where the value of column `a` is equal to 'B'<eos>
<sos>urllib.request.urlretrieve('http://search.twitter.com/search.json?q=hi', 'hi.json')<tab>save json output from a url ‘http://search.twitter.com/search.json?q=hi’ to file ‘hi.json’ in Python 2<eos>
<sos>numpy.where((x == 0))[0]<tab>Find indices of elements equal to zero from numpy array `x`<eos>
<sos>sys.stdout.flush()<tab>flush output of python print<eos>
<sos>str(i)<tab>convert `i` to string<eos>
<sos>a.__str__()<tab>convert `a` to string<eos>
<sos>str(a)<tab>convert `a` to string<eos>
<sos>L.sort(key=operator.itemgetter(1))<tab>sort list of lists `L` by the second item in each list<eos>
<sos>print(str(count) + '    ' + str(conv))<tab>Print variable `count` and variable `conv` with space string '    ' in between<eos>
<sos>df.fillna(method='ffill', inplace=True)<tab>change NaN values in dataframe `df` using preceding values in the frame<eos>
<sos>text.config(state=DISABLED)<tab>change the state of the Tkinter `Text` widget to read only i.e. `disabled`<eos>
<sos>sum(map(ord, string))<tab>python sum of ascii values of all characters in a string `string`<eos>
<sos>list(itertools.product(*arrays))<tab>apply itertools.product to elements of a list of lists `arrays`<eos>
<sos>'{:,}'.format(value)<tab>print number `value` as thousands separators<eos>
<sos>locale.setlocale(locale.LC_ALL, 'en_US')
locale.format('%d', 1255000, grouping=True)<tab>print number 1255000 as thousands separators<eos>
<sos>df[df.Col1.isin(['men', 'rocks', 'mountains'])]<tab>get rows of dataframe `df` where column `Col1` has values `['men', 'rocks', 'mountains']`<eos>
<sos>[x[1] for x in L]<tab>get the value at index 1 for each tuple in the list of tuples `L`<eos>
<sos>'\u0440\u0430\u0437 \u0434\u0432\u0430 \u0442\u0440\u0438'.split()<tab>split unicode string "раз два три" into words<eos>
<sos>MyModel.objects.extra(select={'length': 'Length(name)'}).order_by('length')<tab>sort query set by number of characters in a field `length` in django model `MyModel`<eos>
<sos>min(dicts, key=lambda x: (abs(1.77672955975 - x['ratio']), -x['pixels']))<tab>get a dictionary in list `dicts` which key 'ratio' is closer to a global value 1.77672955975<eos>
<sos>m[~m.mask]<tab>get the non-masked values of array `m`<eos>
<sos>re.findall('\\b[A-Z]', formula)<tab>Find all words containing letters between A and Z in string `formula`<eos>
<sos>matrix = [([0] * 5) for i in range(5)]<tab>create a list `matrix` containing 5 lists, each of 5 items  all set to 0<eos>
<sos>np.vstack(np.meshgrid(x_p, y_p, z_p)).reshape(3, -1).T<tab>creating a numpy array of 3d coordinates from three 1d arrays `x_p`, `y_p` and `z_p`<eos>
<sos>arr[arr != 0].min()<tab>find the minimum value in a numpy array `arr` excluding 0<eos>
<sos>browser.find_elements_by_xpath("//*[@type='submit']/@value").text<tab>get the text of multiple elements found by xpath "//*[@type='submit']/@value"<eos>
<sos>browser.find_elements_by_xpath("//*[@type='submit']").get_attribute('value')<tab>find all the values in attribute `value` for the tags whose `type` attribute is `submit` in selenium<eos>
<sos>with open('example.yaml', 'r') as stream:
    try:
        print((yaml.load(stream)))
    except yaml.YAMLError as exc:
        print(exc)<tab>parse a YAML file "example.yaml"<eos>
<sos>with open('example.yaml') as stream:
    try:
        print((yaml.load(stream)))
    except yaml.YAMLError as exc:
        print(exc)<tab>parse a YAML file "example.yaml"<eos>
<sos>pd.DataFrame(df.columns[np.argsort(df.values)], df.index, np.unique(df.values))<tab>Sort the values of the dataframe `df` and align the columns accordingly based on the obtained indices after np.argsort.<eos>
<sos>datetime.datetime.today().strftime('%Y-%m-%d')<tab>Getting today's date in YYYY-MM-DD<eos>
<sos>urllib.parse.quote_plus('string_of_characters_like_these:$#@=?%^Q^$')<tab>urlencode a querystring 'string_of_characters_like_these:$#@=?%^Q^$' in python 2<eos>
<sos>print(' '.join(sorted(d, key=lambda k: len(d[k]), reverse=True)))<tab>sort a dictionary `d` by length of its values and print as string<eos>
<sos>map(list, zip(*[(1, 2), (3, 4), (5, 6)]))<tab>convert tuple elements in list `[(1,2),(3,4),(5,6),]` into lists<eos>
<sos>map(list, zip(*[(1, 2), (3, 4), (5, 6)]))<tab>None<eos>
<sos>zip(*[(1, 2), (3, 4), (5, 6)])<tab>None<eos>
<sos>[(x, y) for x, y in zip(myList, myList[1:]) if y == 9]<tab>create a list of tuples which contains number 9 and the number before it, for each occurrence of 9 in the list 'myList'<eos>
<sos>driver.get('http://www.google.com.br')<tab>navigate to webpage given by url `http://www.python.org` using Selenium<eos>
<sos>b = a.decode('utf8')[::-1].encode('utf8')<tab>reverse a UTF-8 string 'a'<eos>
<sos>dparser.parse('monkey 2010-07-32 love banana', fuzzy=True)<tab>extract date from a string 'monkey 2010-07-32 love banana'<eos>
<sos>dparser.parse('monkey 20/01/1980 love banana', fuzzy=True)<tab>extract date from a string 'monkey 20/01/1980 love banana'<eos>
<sos>dparser.parse('monkey 10/01/1980 love banana', fuzzy=True)<tab>extract date from a string `monkey 10/01/1980 love banana`<eos>
<sos>dict(map(lambda s: s.split(':'), ['A:1', 'B:2', 'C:3', 'D:4']))<tab>Convert a list `['A:1', 'B:2', 'C:3', 'D:4']` to dictionary<eos>
<sos>re.search('[a-zA-Z]', the_string)<tab>check if string `the_string` contains any upper or lower-case ASCII letters<eos>
<sos>DataFrame({'count': df1.groupby(['Name', 'City']).size()}).reset_index()<tab>convert a pandas `df1` groupby object to dataframe<eos>
<sos>re.sub('[^0-9]', '', 'sdkjh987978asd098as0980a98sd')<tab>remove all non-numeric characters from string `sdkjh987978asd098as0980a98sd `<eos>
<sos>[y for y in a if y not in b]<tab>get items from list `a` that don't appear in list `b`<eos>
<sos>df.groupby('ID').head(4)<tab>extract the first four rows of the column `ID` from a pandas dataframe `df`<eos>
<sos>zip(*l)<tab>Unzip a list of tuples `l` into a list of lists<eos>
<sos>dict(zip([1, 2, 3, 4], ['a', 'b', 'c', 'd']))<tab>combine two lists `[1, 2, 3, 4]` and `['a', 'b', 'c', 'd']` into a dictionary<eos>
<sos>dict(zip([1, 2, 3, 4], ['a', 'b', 'c', 'd']))<tab>combine two lists `[1, 2, 3, 4]` and `['a', 'b', 'c', 'd']` into a dictionary<eos>
<sos>request.url<tab>retrieve the path from a Flask request<eos>
<sos>somestring.replace('\\r', '')<tab>replace carriage return in string `somestring` with empty string ''<eos>
<sos>simplejson.dumps(dict([('%d,%d' % k, v) for k, v in list(d.items())]))<tab>serialize dictionary `d` as a JSON formatted string with each key formatted to pattern '%d,%d'<eos>
<sos>datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')<tab>parse string "Jun 1 2005  1:33PM" into datetime by format "%b %d %Y %I:%M%p"<eos>
<sos>parser.parse('Aug 28 1999 12:00AM')<tab>parse string "Aug 28 1999 12:00AM" into datetime<eos>
<sos>os.path.split(os.path.abspath(existGDBPath))<tab>Get absolute folder path and filename for file `existGDBPath `<eos>
<sos>os.path.dirname(os.path.abspath(existGDBPath))<tab>extract folder path from file path<eos>
<sos>requests.post('http://httpbin.org/post', json={'test': 'cheers'})<tab>Execute a post request to url `http://httpbin.org/post` with json data `{'test': 'cheers'}`<eos>
<sos>a = [x for x in a if x['link'] not in b]<tab>remove dictionary from list `a` if the value associated with its key 'link' is in list `b`<eos>
<sos>{{request.args.get('a')}}<tab>get a request parameter `a` in jinja2<eos>
<sos>list(range(11, 17))<tab>create a list of integers between 2 values `11` and `17`<eos>
<sos>data_df['grade'] = data_df['grade'].astype(float).astype(int)<tab>Change data type of data in column 'grade' of dataframe `data_df` into float and then to int<eos>
<sos>max(alkaline_earth_values, key=lambda x: x[1])<tab>Find the list in a list of lists `alkaline_earth_values` with the max value of the second element.<eos>
<sos>your_string.strip('0')<tab>remove leading and trailing zeros in the string 'your_Strip'<eos>
<sos>list(permutations(list(range(9)), 2))<tab>generate a list of all unique pairs of integers in `range(9)`<eos>
<sos>re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)<tab>create a regular expression that matches the pattern '^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)' over multiple lines of text<eos>
<sos>re.compile('^(.+)\\n((?:\\n.+)+)', re.MULTILINE)<tab>regular expression "^(.+)\\n((?:\\n.+)+)" matching a multiline block of text<eos>
<sos>call(['path/to/python', 'test2.py', 'neededArgumetGoHere'])<tab>Run 'test2.py' file with python location 'path/to/python' and arguments 'neededArgumetGoHere' as a subprocess<eos>
<sos>a.sort(key=operator.itemgetter(2, 3))<tab>sort a multidimensional list `a` by second and third column<eos>
<sos>final_choices = ((another_choice,) + my_choices)<tab>Add a tuple with value `another_choice` to a tuple `my_choices`<eos>
<sos>final_choices = ((another_choice,) + my_choices)<tab>Add a tuple with value `another_choice` to a tuple `my_choices`<eos>
<sos>os.getcwd()<tab>find the current directory<eos>
<sos>os.path.realpath(__file__)<tab>find the current directory<eos>
<sos>os.path.dirname(path)<tab>get the directory name of `path`<eos>
<sos>os.path.realpath(path)<tab>get the canonical path of file `path`<eos>
<sos>dir_path = os.path.dirname(os.path.realpath(__file__))<tab>Find name of current directory<eos>
<sos>cwd = os.getcwd()<tab>Find current directory<eos>
<sos>full_path = os.path.realpath(__file__)<tab>Find the full path of current directory<eos>
<sos>arr[arr[:, (2)].argsort()]<tab>sort array `arr` in ascending order by values of the 3rd column<eos>
<sos>numpy.sort(arr, axis=0)<tab>sort rows of numpy matrix `arr` in ascending order according to all column values<eos>
<sos>re.split('[ .]', 'a b.c')<tab>split string 'a b.c' on space " " and dot character "."<eos>
<sos>shutil.copy('file.txt', 'file2.txt')<tab>copy the content of file 'file.txt' to file 'file2.txt'<eos>
<sos>print(''.join(choice(ascii_uppercase) for i in range(12)))<tab>generate random upper-case ascii string of 12 characters length<eos>
<sos>[''.join(seq) for seq in zip(lst, lst[1:])]<tab>merge the elements in a list `lst` sequentially<eos>
<sos>data.rename(columns={'gdp': 'log(gdp)'}, inplace=True)<tab>rename column 'gdp' in dataframe `data` to 'log(gdp)'<eos>
<sos>print(soup.get_text())<tab>convert a beautiful soup html `soup` to text<eos>
<sos>sorted(li, key=operator.itemgetter(1), reverse=True)<tab>Sort list `li` in descending order based on the second element of each list inside list`li`<eos>
<sos>data['sex'].replace([0, 1], ['Female', 'Male'], inplace=True)<tab>replace value 0 with 'Female' and value 1 with 'Male' in column 'sex' of dataframe `data`<eos>
<sos>re.split('\\W+', 'Words, words, words.')<tab>split string 'Words, words, words.' on punctuation<eos>
<sos>re.match('(.*?[.?!](?:\\s+.*?[.?!]){0,1})', phrase).group(1)<tab>Extract first two substrings in string `phrase` that end in `.`, `?` or `!`<eos>
<sos>print([a for a, b in re.findall('((\\w)\\2*)', s)])<tab>split string `s` into strings of repeating elements<eos>
<sos>print(' '.join(OrderedDict.fromkeys(s)))<tab>Create new string with unique characters from `s` seperated by ' '<eos>
<sos>print(' '.join(set(s)))<tab>create a set from string `s` to remove duplicate characters<eos>
<sos>[x for x in file.namelist() if x.endswith('/')]<tab>list folders in zip file 'file' that ends with '/'<eos>
<sos>input_string.count('Hello')<tab>find the count of a word 'Hello' in a string `input_string`<eos>
<sos>print('.'.join([item[0] for item in data]))<tab>reduce the first element of list of strings `data` to a string, separated by '.'<eos>
<sos>fh1.seek(2)<tab>Move the cursor of file pointer `fh1` at the end of the file.<eos>
<sos>print(zip(my_list[0::2], my_list[1::2]))<tab>convert a flat list into a list of tuples of every two items in the list, in order<eos>
<sos>my_new_list = zip(my_list[0::2], my_list[1::2])<tab>group a list of ints into a list of tuples of each 2 elements<eos>
<sos>sys.setdefaultencoding('utf8')<tab>set the default encoding to 'utf-8'<eos>
<sos>datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')<tab>Formate current date and time to a string using pattern '%Y-%m-%d %H:%M:%S'<eos>
<sos>print(re.findall('[\\u0600-\\u06FF]+', my_string))<tab>retrieve arabic texts from string `my_string`<eos>
<sos>df.groupby(df.index.map(lambda t: t.minute))<tab>group dataframe `df` based on minute interval<eos>
<sos>dict['Apple']['American']<tab>access value associated with key 'American' of key 'Apple' from dictionary `dict`<eos>
<sos>df2.dropna(subset=['three', 'four', 'five'], how='all')<tab>remove all null values from columns 'three', 'four' and 'five' of dataframe `df2`<eos>
<sos>a.insert(0, k)<tab>insert a list `k` at the front of list `a`<eos>
<sos>a = a[:n] + k + a[n:]<tab>insert elements of list `k` into list `a` at position `n`<eos>
<sos>np.flatnonzero(x).mean()<tab>calculate the mean of the nonzero values' indices of dataframe `df`<eos>
<sos>df['just_date'] = df['dates'].dt.date<tab>get date from dataframe `df` column 'dates' to column 'just_date'<eos>
<sos>[x for x in a if x not in b]<tab>remove elements in list `b` from list `a`<eos>
<sos>[''.join(x) for x in a]<tab>join elements of each tuple in list `a` into one string<eos>
<sos>list(map(''.join, a))<tab>join items of each tuple in list of tuples `a` into a list of strings<eos>
<sos>re.split('\n\\s*\n', s)<tab>match blank lines in `s` with regular expressions<eos>
<sos>from functools import reduce
reduce(lambda x, y: 10 * x + y, [1, 2, 3, 4, 5])<tab>merge a list of integers `[1, 2, 3, 4, 5]` into a single integer<eos>
<sos>"""{0:,.2f}""".format(24322.34)<tab>Convert float 24322.34 to comma-separated string<eos>
<sos>my_function(**data)<tab>pass dictionary items `data` as keyword arguments in function `my_function`<eos>
<sos>sum((1 for line in open('myfile.txt')))<tab>get line count of file 'myfile.txt'<eos>
<sos>def bufcount(filename):
    f = open(filename)
    lines = 0
    buf_size = (1024 * 1024)
    read_f = f.read
    buf = read_f(buf_size)
    while buf:
        lines += buf.count('\n')
        buf = read_f(buf_size)
    return lines<tab>get line count of file `filename`<eos>
<sos>print(round(1123.456789, -1))<tab>round 1123.456789 to be an integer<eos>
<sos>[x for y, x in sorted(zip(Y, X))]<tab>sort list `X` based on values from another list `Y`<eos>
<sos>[x for y, x in sorted(zip(Y, X))]<tab>sorting list 'X' based on values from another list 'Y'<eos>
<sos>datetime.date(2010, 6, 16).isocalendar()[1]<tab>get equivalent week number from a date `2010/6/16` using  isocalendar<eos>
<sos>df.iloc[:, (np.r_[1:10, (15), (17), 50:100])]<tab>select multiple ranges of columns 1-10, 15, 17, and 50-100 in pandas dataframe `df`<eos>
<sos>df.groupby('dummy').agg({'returns': [np.mean, np.sum]})<tab>apply two different aggregating functions `mean` and `sum` to the same column `dummy` in pandas data frame `df`<eos>
<sos>s.lower()<tab>convert string `s` to lowercase<eos>
<sos>s.decode('utf-8').lower()<tab>convert utf-8 string `s` to lowercase<eos>
<sos>ftp.retrbinary('RETR %s' % filename, file.write)<tab>None<eos>
<sos>urlfetch.fetch(url, deadline=10 * 60)<tab>handle the `urlfetch_errors ` exception for imaplib request to url `url`<eos>
<sos>print(my_string[0:100])<tab>output first 100 characters in a string `my_string`<eos>
<sos>legend(numpoints=1)<tab>make matplotlib plot legend put marker in legend only once<eos>
<sos>dict((x, set(y) & set(d1.get(x, ()))) for x, y in d2.items())<tab>get set intersection between dictionaries `d1` and `d2`<eos>
<sos>numpy.loadtxt(open('test.csv', 'rb'), delimiter=',', skiprows=1)<tab>convert csv file 'test.csv' into two-dimensional matrix<eos>
<sos>Sample.objects.filter(date__range=['2011-01-01', '2011-01-31'])<tab>filter the objects in django model 'Sample' between date range `2011-01-01` and `2011-01-31`<eos>
<sos>Sample.objects.filter(date__year='2011', date__month='01')<tab>filter objects month wise in django model `Sample` for year `2011`<eos>
<sos>d['dict3'] = {'spam': 5, 'ham': 6}<tab>create a dictionary `{'spam': 5, 'ham': 6}` into another dictionary `d` field 'dict3'<eos>
<sos>numpy.apply_along_axis(numpy.linalg.norm, 1, a)<tab>apply `numpy.linalg.norm` to each row of a matrix `a`<eos>
<sos>dict((k, v) for d in dicts for k, v in list(d.items()))<tab>merge dictionaries form array `dicts` in a single expression<eos>
<sos>print('your string'.decode('string_escape'))<tab>Convert escaped utf string to utf string in `your string`<eos>
<sos>sum([True, True, False, False, False, True])<tab>counting the number of true booleans in a python list `[True, True, False, False, False, True]`<eos>
<sos>fig.set_size_inches(w, h, forward=True)<tab>set the size of figure `fig` in inches to width height of `w`, `h`<eos>
<sos>'hello there %(5)s' % {'5': 'you'}<tab>format string with dict `{'5': 'you'}` with integer keys<eos>
<sos>map(int, example_string.split(','))<tab>Convert a string of numbers `example_string` separated by `,` into a list of integers<eos>
<sos>[int(s) for s in example_string.split(',')]<tab>Convert a string of numbers 'example_string' separated by comma into a list of numbers<eos>
<sos>x = [i[0] for i in x]<tab>Flatten list `x`<eos>
<sos>y = map(operator.itemgetter(0), x)<tab>convert list `x` into a flat list<eos>
<sos>y = [i[0] for i in x]<tab>get a list `y` of the first element of every tuple in list `x`<eos>
<sos>results = [item['value'] for item in test_data]<tab>extract all the values of a specific key named 'values' from a list of dictionaries<eos>
<sos>datetime.datetime.now().isoformat()<tab>get current datetime in ISO format<eos>
<sos>datetime.datetime.utcnow().isoformat()<tab>get UTC datetime in ISO format<eos>
<sos>df.apply(' '.join, axis=0)<tab>Merge all columns in dataframe `df` into one column<eos>
<sos>pd.DataFrame(df.values - df2.values, columns=df.columns)<tab>pandas subtract a row from dataframe `df2` from dataframe `df`<eos>
<sos>print(open('myfile.txt', 'U').read())<tab>read file 'myfile.txt' using universal newline mode 'U'<eos>
<sos>print(line.decode('utf-16-le').split())<tab>print line `line` from text file with 'utf-16-le' format<eos>
<sos>file = io.open('data.txt', 'r', encoding='utf-16-le')<tab>open a text file `data.txt` in io module with encoding `utf-16-le`<eos>
<sos>s1 = pd.merge(df1, df2, how='inner', on=['user_id'])<tab>Join data of dataframe `df1` with data in dataframe `df2` based on similar values of column 'user_id' in both dataframes<eos>
<sos>foo.decode('utf8').encode('utf8')<tab>check if string `foo` is UTF-8 encoded<eos>
<sos>a.shape<tab>get the dimensions of numpy array `a`<eos>
<sos>N.shape(a)<tab>get the dimensions of numpy array `a`<eos>
<sos>N.shape(a)<tab>get the dimensions of array `a`<eos>
<sos>a.shape<tab>get the dimensions of numpy array `a`<eos>
<sos>[i for i, v in enumerate(L) if v[0] == 53]<tab>get the indices of tuples in list of tuples `L` where the first value is 53<eos>
<sos>struct.unpack('<L', 'y\xcc\xa6\xbb')[0]<tab>convert string of bytes `y\xcc\xa6\xbb` into an int<eos>
<sos>arr[[0, 1, 1], [1, 0, 2]]<tab>get the first row, second column; second row, first column, and first row third column values of numpy array `arr`<eos>
<sos>list(powerset('abcd'))<tab>create a list with permutations of string 'abcd'<eos>
<sos>s in ['true', '1', 't', 'y', 'yes', 'yeah', 'yup', 'certainly', 'uh-huh']<tab>Convert string to boolean from defined set of strings<eos>
<sos>urllib.parse.quote('http://spam.com/go/')<tab>replace special characters in url 'http://spam.com/go/' using the '%xx' escape<eos>
<sos>plt.savefig('test.svg')<tab>Save plot `plt` as svg file 'test.svg'<eos>
<sos>len(myArray)<tab>count the number of elements in array `myArray`<eos>
<sos>sys.path.insert(0, './path/to/your/modules/')<tab>insert directory './path/to/your/modules/' to current directory<eos>
<sos>ax.xaxis.set_ticks_position('top')<tab>None<eos>
<sos>cursor.execute('INSERT OR REPLACE INTO master.table1 SELECT * FROM table1')<tab>Insert records in bulk from "table1" of "master" DB to "table1" of  sqlite3 `cursor` object<eos>
<sos>re.match('[a-zA-Z][\\w-]*\\Z', 'A\n')<tab>Match regex '[a-zA-Z][\\w-]*\\Z' on string 'A\n'<eos>
<sos>re.match('[a-zA-Z][\\w-]*$', '!A_B')<tab>match regex '[a-zA-Z][\\w-]*$' on string '!A_B'<eos>
<sos>int('deadbeef', 16)<tab>Convert hex string "deadbeef" to integer<eos>
<sos>int('a', 16)<tab>Convert hex string "a" to integer<eos>
<sos>int('0xa', 16)<tab>Convert hex string "0xa" to integer<eos>
<sos>int(s, 16)<tab>Convert hex string `s` to integer<eos>
<sos>int(hexString, 16)<tab>Convert hex string `hexString` to int<eos>
<sos>print('Value is "' + str(value) + '"')<tab>print variable `value ` without spaces<eos>
<sos>print('Value is "{}"'.format(value))<tab>Print a string `value` with string formatting<eos>
<sos>{{tags | join(' ')}}<tab>Jinja join elements of array `tags` with space string ' '<eos>
<sos>help('modules')<tab>get a list of locally installed Python modules<eos>
<sos>[[[x[0]] for x in listD[i]] for i in range(len(listD))]<tab>Get only first element in each of the innermost of the multidimensional list `listD`<eos>
<sos>sorted(s, key=str.upper)<tab>Sort a string `s` in lexicographic order<eos>
<sos>sorted(sorted(s), key=str.upper)<tab>sort string `s` in lexicographic order<eos>
<sos>sorted(s, key=str.lower)<tab>get a sorted list of the characters of string `s` in lexicographic order, with lowercase letters first<eos>
<sos>pd.merge(df1, df2, on=['A', 'B', 'C', 'D'], how='inner')<tab>find all the rows in Dataframe 'df2' that are also present in Dataframe 'df1', for the columns 'A', 'B', 'C' and 'D'.<eos>
<sos>dict((v, k) for k, v in map.items())<tab>Reverse key-value pairs in a dictionary `map`<eos>
<sos>s.decode('unicode_escape')<tab>decode unicode string `s` into a readable unicode literal<eos>
<sos>[int(i) for i in str_list]<tab>convert list of strings `str_list` into list of integers<eos>
<sos>map(int, ['1', '2', '3'])<tab>convert a list with string `['1', '2', '3']` into list with integers<eos>
<sos>list(map(int, ['1', '2', '3']))<tab>convert list with str into list with int<eos>
<sos>soup.find_all('a', href=re.compile('http://www\\.iwashere\\.com/'))<tab>find all anchor tags in html `soup` whose url begins with `http://www.iwashere.com`<eos>
<sos>soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))<tab>find all anchors with a hyperlink that matches the pattern '^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'<eos>
<sos>subprocess.call(['java', '-jar', 'Blender.jar'])<tab>execute a jar file 'Blender.jar' using subprocess<eos>
<sos>cursor.execute('INSERT INTO table (`column1`) VALUES (%s)', (value,))<tab>insert row into mysql database with column 'column1' set to the value `value`<eos>
<sos>if url.endswith('.com'):
    url = url[:(-4)]<tab>remove a substring ".com" from the end of string `url`<eos>
<sos>url = re.sub('\\.com$', '', url)<tab>remove a substring ".com" from the end of string `url`<eos>
<sos>print(url.replace('.com', ''))<tab>remove a substring ".com" from the end of string `url`<eos>
<sos>if (not text.endswith(suffix)):
    return text
return text[:(len(text) - len(suffix))]<tab>remove a substring `suffix` from the end of string `text`<eos>
<sos>print(', ,'.join([str(i[0]) for i in mytuple]))<tab>print each first value from a list of tuples `mytuple` with string formatting<eos>
<sos>max(min(my_value, max_value), min_value)<tab>clamping floating number `my_value` to be between `min_value` and `max_value`<eos>
<sos>re.findall('\\w+|[^\\w\\s]', text, re.UNICODE)<tab>split a unicode string `text` into a list of words and punctuation characters with a regex<eos>
<sos>result = db.engine.execute('<sql here>')<tab>execute raw sql queue '<sql here>' in database `db` in sqlalchemy-flask app<eos>
<sos>sys.exit(0)<tab>quit program<eos>
<sos>"""""".join(c for c in my_string if c.isdigit())<tab>get digits in string `my_string`<eos>
<sos>re.split(' +', str1)<tab>split string `str1` on one or more spaces with a regular expression<eos>
<sos>re.findall('\\S+', str1)<tab>None<eos>
<sos>getattr(getattr(myobject, 'id', None), 'number', None)<tab>Evaluate a nested dictionary `myobject.id.number` to get `number` if `myobject` is present with getattr<eos>
<sos>{i: (i * 2) for i in range(10)}<tab>convert generator object to a dictionary<eos>
<sos>dict((i, i * 2) for i in range(10))<tab>convert generator object to a dictionary<eos>
<sos>plt.cla()<tab>Matplotlib clear the current axes.<eos>
<sos>total = sum(float(item) for item in s.split(','))<tab>split string `s` into float values and write sum to `total`<eos>
<sos>bin(ord('P'))<tab>Convert ascii value 'P' to binary<eos>
<sos>print(my_string.split(', ', 1)[1])<tab>print a string after a specific substring ', ' in string `my_string `<eos>
<sos>print(data['places'][0]['post code'])<tab>get value of key `post code` associated with first index of key `places` of dictionary `data`<eos>
<sos>word = re.sub('([aeiou]):(([aeiou][^aeiou]*){3})$', '\\1\\2', word)<tab>remove colon character surrounded by vowels letters in string `word`<eos>
<sos>json.loads('{"foo": 42, "bar": "baz"}')['bar']<tab>extract data field 'bar' from json object<eos>
<sos>data = json.loads(array)<tab>Convert JSON array `array` to Python object<eos>
<sos>data = json.loads(array)<tab>Convert JSON array `array` to Python object<eos>
<sos>re.findall('#(\\w+)', 'http://example.org/#comments')<tab>pars a string 'http://example.org/#comments' to extract hashtags into an array<eos>
<sos>any(e in lestring for e in lelist)<tab>do a boolean check if a string `lestring` contains any of the items in list `lelist`<eos>
<sos>df.plot(x='col_name_1', y='col_name_2', style='o')<tab>None<eos>
<sos>parsed_html = BeautifulSoup(html)
print(parsed_html.body.find('div', attrs={'class': 'container', }).text)<tab>Parsing HTML string `html` using BeautifulSoup<eos>
<sos>page = urllib.request.urlopen('http://www.google.com/')
soup = BeautifulSoup(page)<tab>Parsing webpage 'http://www.google.com/' using BeautifulSoup<eos>
<sos>plt.figure(figsize=(3, 4))<tab>change figure size to 3 by 4 in matplotlib<eos>
<sos>s.translate(None, string.punctuation)<tab>Strip punctuation from string `s`<eos>
<sos>base64.urlsafe_b64decode(uenc.encode('ascii'))<tab>django urlsafe base64 decode string `uenc` with decryption<eos>
<sos>len(dict_test) + sum(len(v) for v in dict_test.values())<tab>get the number of all keys in the nested dictionary `dict_list`<eos>
<sos>hex(d).split('x')[1]<tab>return the conversion of decimal `d` to hex without the '0x' prefix<eos>
<sos>list(str(123))<tab>create a list containing digits of number 123 as its elements<eos>
<sos>[int(x) for x in str(num)]<tab>converting integer `num` to list<eos>
<sos>br.select_form(nr=0)<tab>select a first form with no name in mechanize<eos>
<sos>json.load(codecs.open('sample.json', 'r', 'utf-8-sig'))<tab>Open file 'sample.json' in read mode with encoding of 'utf-8-sig'<eos>
<sos>json.loads(open('sample.json').read().decode('utf-8-sig'))<tab>load json file 'sample.json' with utf-8 bom header<eos>
<sos>server = smtplib.SMTP('smtp.gmail.com', 587)<tab>setup a smtp mail server to `smtp.gmail.com` with port `587`<eos>
<sos>int('{:08b}'.format(n)[::-1], 2)<tab>revers correlating bits of integer `n`<eos>
<sos>df.set_index(['d'], append=True)<tab>add column `d` to index of dataframe `df`<eos>
<sos>for (key, value) in d.items():
    pass<tab>Iterating over a dictionary `d` using for loops<eos>
<sos>for (key, value) in list(d.items()):
    pass<tab>Iterating over a dictionary `d` using for loops<eos>
<sos>for (letter, number) in list(d.items()):
    pass<tab>Iterating key and items over dictionary `d`<eos>
<sos>for (k, v) in list(d.items()):
    pass<tab>Iterating key and items over dictionary `d`<eos>
<sos>list(d.items())<tab>get keys and items of dictionary `d`<eos>
<sos>list(d.items())<tab>get keys and items of dictionary `d` as a list<eos>
<sos>for (k, v) in list(d.items()):
    pass<tab>Iterating key and items over dictionary `d`<eos>
<sos>for (letter, number) in list(d.items()):
    pass<tab>Iterating key and items over dictionary `d`<eos>
<sos>for (letter, number) in list(d.items()):
    pass<tab>Iterating key and items over dictionary `d`<eos>
<sos>session.query(Task).filter(Task.time_spent > timedelta(hours=3)).all()<tab>query all data from table `Task` where the value of column `time_spent` is bigger than 3 hours<eos>
<sos>os.system('msbuild project.sln /p:Configuration=Debug')<tab>compile Visual Studio project `project.sln` from the command line through python<eos>
<sos>max(list(MyCount.keys()), key=int)<tab>get max key in dictionary `MyCount`<eos>
<sos>os.system('source .bashrc; shopt -s expand_aliases; nuke -x scriptPath')<tab>execute command 'source .bashrc; shopt -s expand_aliases; nuke -x scriptPath' from python script<eos>
<sos>my_function.__name__<tab>get a name of function `my_function` as a string<eos>
<sos>my_function.__name__<tab>None<eos>
<sos>np.all(a == a[(0), :], axis=0)<tab>check if all values in the columns of a numpy matrix `a` are same<eos>
<sos>sorted(a, key=lambda x: (sum(x[1:3]), x[0]))<tab>sort list `a` in ascending order based on the addition of the second and third elements of each tuple in it<eos>
<sos>sorted(a, key=lambda x: (sum(x[1:3]), x[0]), reverse=True)<tab>sort a list of tuples `a` by the sum of second and third element of each tuple<eos>
<sos>sorted(lst, key=lambda x: (sum(x[1:]), x[0]))<tab>sorting a list of tuples `lst` by the sum of the second elements onwards, and third element of the tuple<eos>
<sos>sorted(lst, key=lambda x: (sum(x[1:]), x[0]), reverse=True)<tab>sort the list of tuples `lst` by the sum of every value except the first and by the first value in reverse order<eos>
<sos>response.headers['WWW-Authenticate'] = 'Basic realm="test"'<tab>add header 'WWWAuthenticate' in a flask app with value 'Basic realm="test"'<eos>
<sos>del request.session['mykey']<tab>clear session key 'mykey'<eos>
<sos>datetime.datetime.strptime('24052010', '%d%m%Y').date()<tab>convert date string '24052010' to date object in format '%d%m%Y'<eos>
<sos>re.sub('[^\\x00-\\x7F]+', ' ', text)<tab>Replace non-ASCII characters in string `text` with a single space<eos>
<sos>numpy.array([[1, 2], [3, 4]])<tab>None<eos>
<sos>myList = [i for i in range(10)]<tab>Get a list `myList` from 1 to 10<eos>
<sos>[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]<tab>use regex pattern '((.+?)\\2+)' to split string '44442(2)2(2)44'<eos>
<sos>[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]<tab>use regular expression '((\\d)(?:[()]*\\2*[()]*)*)' to split string `s`<eos>
<sos>fig.subplots_adjust(wspace=0, hspace=0)<tab>remove the space between subplots in matplotlib.pyplot<eos>
<sos>x[::-1]<tab>Reverse list `x`<eos>
<sos>json.dumps({'apple': 'cat', 'banana': 'dog', 'pear': 'fish'})<tab>None<eos>
<sos>csvwriter.writerow(row)<tab>write a list of strings `row` to csv object `csvwriter`<eos>
<sos>{{(item.date | date): 'Y M d'}}<tab>Jinja2 formate date `item.date` accorto pattern 'Y M d'<eos>
<sos>re.split('(?<=[\\.\\?!]) ', text)<tab>Split a string `text` with comma, question mark or exclamation by non-consuming regex using look-behind<eos>
<sos>re.compile('\xe2\x80\x93')<tab>create a regular expression object with the pattern '\xe2\x80\x93'<eos>
<sos>variable = []<tab>declare an array `variable`<eos>
<sos>intarray = array('i')<tab>declare an array with element 'i'<eos>
<sos>[sublist[::-1] for sublist in to_reverse[::-1]]<tab>given list `to_reverse`, reverse the all sublists and the list itself<eos>
<sos>re.sub('[^0-9a-zA-Z]+', '*', 'h^&ell`.,|o w]{+orld')<tab>None<eos>
<sos>"""""".join(['I ', '<', '3s U ', '&', ' you luvz me'])<tab>unescape special characters without splitting data in array of strings `['I ', u'<', '3s U ', u'&', ' you luvz me']`<eos>
<sos>logging.disable(logging.CRITICAL)<tab>disable logging while running unit tests in python django<eos>
<sos>cursor.execute('INSERT INTO index(url) VALUES(%s)', (url,))<tab>adding url `url` to mysql row<eos>
<sos>df['DateStr'] = df['DateObj'].dt.strftime('%d%m%Y')<tab>convert column of date objects 'DateObj' in pandas dataframe `df` to strings in new column 'DateStr'<eos>
<sos>s.split('@')[0]<tab>split string `s` by '@' and get the first element<eos>
<sos>df.query('index < @start_remove or index > @end_remove')<tab>drop rows of dataframe `df` whose index is smaller than the value of `start_remove` or bigger than the value of`end_remove`<eos>
<sos>df.loc[(df.index < start_remove) | (df.index > end_remove)]<tab>Drop the rows in pandas timeseries `df` from the row containing index `start_remove` to the row containing index `end_remove`<eos>
<sos>df.isnull().sum()<tab>Get the number of NaN values in each column of dataframe `df`<eos>
<sos>df.reset_index(inplace=True)<tab>reset index of dataframe `df`so that existing index values are transferred into `df`as columns<eos>
<sos>[x['value'] for x in list_of_dicts]<tab>generate a list containing values associated with the key 'value' of each dictionary inside list `list_of_dicts`<eos>
<sos>[d['value'] for d in l]<tab>None<eos>
<sos>[d['value'] for d in l if 'value' in d]<tab>None<eos>
<sos>np.array([[1, 2, 3], [4, 5, 6]]).tolist()<tab>convert numpy array into python list structure<eos>
<sos>ast.literal_eval('(1,2,3,4)')<tab>converting string '(1,2,3,4)' to a tuple<eos>
<sos>dataList.sort(key=lambda x: x[1])<tab>keep a list `dataList` of lists sorted as it is created by second element<eos>
<sos>list(map(list, set(map(lambda i: tuple(i), testdata))))<tab>remove duplicated items from list of lists `testdata`<eos>
<sos>[list(i) for i in set(tuple(i) for i in testdata)]<tab>uniqueness for list of lists `testdata`<eos>
<sos>return user.groups.filter(name='Member').exists()<tab>in django, check if a user is in a group 'Member'<eos>
<sos>return user.groups.filter(name__in=['group1', 'group2']).exists()<tab>check if a user `user` is in a group from list of groups `['group1', 'group2']`<eos>
<sos>logging.getLogger().setLevel(logging.DEBUG)<tab>Change log level dynamically to 'DEBUG' without restarting the application<eos>
<sos>"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))<tab>Concat each values in a tuple `(34.2424, -64.2344, 76.3534, 45.2344)` to get a string<eos>
<sos>"""""".join([s[x:x + 2][::-1] for x in range(0, len(s), 2)])<tab>swap each pair of characters in string `s`<eos>
<sos>plt.savefig('graph.png', dpi=1000)<tab>save current figure to file 'graph.png' with resolution of 1000 dpi<eos>
<sos>my_list = [[x for x in sublist if x not in to_del] for sublist in my_list]<tab>delete items from list `my_list` if the item exist in list `to_dell`<eos>
<sos>[item for item in a if 1 in item]<tab>find all the elements that consists value '1' in a list of tuples 'a'<eos>
<sos>[item for item in a if item[0] == 1]<tab>find all elements in a list of tuples `a` where the first element of each tuple equals 1<eos>
<sos>{p.id: {'id': p.id, 'position': ind} for ind, p in enumerate(p_list)}<tab>Get the index value in list `p_list` using enumerate in list comprehension<eos>
<sos>[dict(y) for y in set(tuple(x.items()) for x in d)]<tab>None<eos>
<sos>exec(compile(open('file.py').read(), 'file.py', 'exec'))<tab>load a file `file.py` into the python console<eos>
<sos>rows = session.query(Congress).count()<tab>SQLAlchemy count the number of rows in table `Congress`<eos>
<sos>subprocess.call(['test.sh', str(domid)])<tab>None<eos>
<sos>dfs = pd.read_excel(file_name, sheetname=None)<tab>read excel file `file_name` using pandas<eos>
<sos>struct.unpack('d', binascii.unhexlify('4081637ef7d0424a'))<tab>unpack the binary data represented by the hexadecimal string '4081637ef7d0424a' to a float<eos>
<sos>a[tuple(b)]<tab>Get index of numpy array `a` with another numpy array `b`<eos>
<sos>map(list, permutations([2, 3, 4]))<tab>find all possible sequences of elements in a list `[2, 3, 4]`<eos>
<sos>sorted(unsorted_list, key=presorted_list.index)<tab>sort a list `unsorted_list` based on another sorted list `presorted_list`<eos>
<sos>datetime.datetime.now() - datetime.timedelta(days=1)<tab>None<eos>
<sos>d = pd.DataFrame(0, index=np.arange(len(data)), columns=feature_list)<tab>create a dataframe `d` filled with zeros with indices from 0 to length of `data` and column names from `feature_list`<eos>
<sos>x.find('World')<tab>find the index of sub string 'World' in `x`<eos>
<sos>x.find('Aloha')<tab>find the index of sub string 'Aloha' in `x`<eos>
<sos>'sdfasdf'.index('cc')<tab>find the index of sub string 'cc' in string 'sdfasdf'<eos>
<sos>'sdfasdf'.index('df')<tab>find the index of sub string 'df' in string 'sdfasdf'<eos>
<sos>str.find('a')<tab>find the index of sub string 'a' in string `str`<eos>
<sos>str.find('g')<tab>find the index of sub string 'g' in string `str`<eos>
<sos>str.find('s', 11)<tab>find the index of sub string 's' in string `str` starting from index 11<eos>
<sos>str.find('s', 15)<tab>find the index of sub string 's' in string `str` starting from index 15<eos>
<sos>str.find('s', 16)<tab>find the index of sub string 's' in string `str` starting from index 16<eos>
<sos>str.find('s', 11, 14)<tab>find the index of sub string 's' in string `str` starting from index 11 and ending at index 14<eos>
<sos>sorted(d, key=lambda x: datetime.datetime.strptime(x, '%m-%Y'))<tab>sort list of date strings 'd'<eos>
<sos>re.split('\\.\\s', text)<tab>Get all the sentences from a string `text` using regex<eos>
<sos>re.split('\\.\\s', re.sub('\\.\\s*$', '', text))<tab>None<eos>
<sos>"""foobar"""[:4]<tab>get all characters in string 'foobar' up to the fourth index<eos>
<sos>s.rfind('&')<tab>cut a string by delimiter '&'<eos>
<sos>s[:s.rfind('&')]<tab>cut a string using delimiter '&'<eos>
<sos>driver.find_element_by_xpath("//option[@value='" + state + "']").click()<tab>find a tag `option` whose `value` attribute is `state` in selenium<eos>
<sos>with open('test.txt', 'a') as myfile:
    myfile.write('appended text')<tab>append line "appended text" to file "test.txt"<eos>
<sos>with open('foo', 'a') as f:
    f.write('cool beans...')<tab>append line "cool beans..." to file "foo"<eos>
<sos>with open('test1', 'ab') as f:
    pass<tab>append to file 'test1' content 'koko'<eos>
<sos>open('test', 'a+b').write('koko')<tab>append to file 'test' content 'koko'<eos>
<sos>print([i for i in re.split('([\\d.]+|\\W+)', 'x+13.5*10x-4e1') if i])<tab>split string 'x+13.5*10x-4e1' into tokens<eos>
<sos>re.findall('[\u4e00-\u9fff]+', ipath)<tab>Find all Chinese characters in string `ipath`<eos>
<sos>s.split('s')<tab>split string `s` by letter 's'<eos>
<sos>subprocess.Popen(['rm', '-r', 'some.file'])<tab>run shell command 'rm -r some.file' in the background<eos>
<sos>dict((d['name'], d) for d in listofdict)<tab>convert a list of dictionaries `listofdict into a dictionary of dictionaries<eos>
<sos>datetime.datetime.now().strftime('%Y-%m-%d %H:%M')<tab>print current date and time in a regular format<eos>
<sos>time.strftime('%Y-%m-%d %H:%M')<tab>print current date and time in a regular format<eos>
<sos>re.findall('[bcdfghjklmnpqrstvwxyz]+', 'CONCERTATION', re.IGNORECASE)<tab>find consecutive consonants in a word `CONCENTRATION` using regex<eos>
<sos>[i for i, e in enumerate(a) if e != 0]<tab>get a list of indices of non zero elements in a list `a`<eos>
<sos>map(int, re.findall('\\d+', string1))<tab>get multiple integer values from a string 'string1'<eos>
<sos>os.path.dirname(sys.executable)<tab>get the path of Python executable under windows<eos>
<sos>ax.xaxis.set_label_position('top')<tab>move an x-axis label to the top of a plot `ax` in matplotlib<eos>
<sos>ax.xaxis.tick_top()<tab>move x-axis to the top of a plot `ax`<eos>
<sos>ax.xaxis.set_ticks_position('top')<tab>Move x-axis of the pyplot object `ax` to the top of a plot in matplotlib<eos>
<sos>datetime.strptime('2015/01/01 12:12am', '%Y/%m/%d %I:%M%p')<tab>parse string '2015/01/01 12:12am' to DateTime object using format '%Y/%m/%d %I:%M%p'<eos>
<sos>img = Image.open('picture.jpg')
img.show()<tab>Open image 'picture.jpg'<eos>
<sos>img = Image.open('picture.jpg')
Img.show<tab>Open image "picture.jpg"<eos>
<sos>sys.exit(0)<tab>terminate the script using status value 0<eos>
<sos>sys.exit('aa! errors!')<tab>abort the execution of the script using message 'aa! errors!'<eos>
<sos>sys.exit()<tab>abort the execution of a python script<eos>
<sos>[max(abs(x) for x in arr[i:i + 4]) for i in range(0, len(arr), 4)]<tab>find maximum with lookahead = 4 in a list `arr`<eos>
<sos>os.chdir('c:\\Users\\uname\\desktop\\python')<tab>set the current working directory to 'c:\\Users\\uname\\desktop\\python'<eos>
<sos>os.chdir(path)<tab>set the current working directory to path `path`<eos>
<sos>no_integers = [x for x in mylist if not isinstance(x, int)]<tab>get a list `no_integers` of all the items in list `mylist` that are not of type `int`<eos>
<sos>tree.xpath(".//a[text()='Example']")[0].tag<tab>match contents of an element to 'Example' in xpath (lxml)<eos>
<sos>""", """.join([(str(k) + ' ' + str(v)) for k, v in list(a.items())])<tab>concatenate key/value pairs in dictionary `a` with string ', ' into a single string<eos>
<sos>print(set(re.sub('[\x00-\x7f]', '', '\xa3\u20ac\xa3\u20ac')))<tab>Strip all non-ASCII characters from a unicode string, `\xa3\u20ac\xa3\u20ac`<eos>
<sos>print(re.sub('[\x00-\x7f]', '', '\xa3100 is worth more than \u20ac100'))<tab>Get all non-ascii characters in a unicode string `\xa3100 is worth more than \u20ac100`<eos>
<sos>ast.literal_eval("{'muffin' : 'lolz', 'foo' : 'kitty'}")<tab>build a dict of key:value pairs from a string representation of a dict, `{'muffin' : 'lolz', 'foo' : 'kitty'}`<eos>
<sos>print(t.decode('unicode_escape'))<tab>Print string `t` with proper unicode representations<eos>
<sos>print(str.encode('cp1252').decode('utf-8').encode('cp1252').decode('utf-8'))<tab>Normalize string `str` from 'cp1252' code to 'utf-8' code<eos>
<sos>zip(list_a, list_b)<tab>merge lists `list_a` and `list_b` into a list of tuples<eos>
<sos>list(zip(a, b))<tab>merge lists `a` and `a` into a list of tuples<eos>
<sos>df.set_index('id').to_dict()<tab>convert pandas DataFrame `df` to a dictionary using `id` field as the key<eos>
<sos>df.set_index('id')['value'].to_dict()<tab>convert pandas dataframe `df` with fields 'id', 'value' to dictionary<eos>
<sos>sorted(list(mydict.items()), key=lambda a: map(int, a[0].split('.')))<tab>None<eos>
<sos>re.sub('\\([^)]*\\)', '', filename)<tab>remove parentheses and text within it in string `filename`<eos>
<sos>"""a b""".replace(' ', '').isalpha()<tab>Check if string 'a b' only contains letters and spaces<eos>
<sos>[(x + y) for x, y in zip(first, second)]<tab>sum each element `x` in list `first` with element `y` at the same index in list `second`.<eos>
<sos>sorted(list(a_dict.items()), key=lambda item: item[1][1])<tab>sort a python dictionary `a_dict` by element `1` of the value<eos>
<sos>re.compile('[^a-zA-Z0-9-]+')<tab>None<eos>
<sos>sorted(list(range(len(a))), key=lambda i: a[i])[-2:]<tab>get index of the biggest 2 values of a list `a`<eos>
<sos>zip(*sorted(enumerate(a), key=operator.itemgetter(1)))[0][-2:]<tab>get indexes of the largest `2` values from a list `a` using itemgetter<eos>
<sos>sorted(list(range(len(a))), key=lambda i: a[i], reverse=True)[:2]<tab>get the indexes of the largest `2` values from a list of integers `a`<eos>
<sos>list(x.keys()).index('c')<tab>get index of key 'c' in dictionary `x`<eos>
<sos>print('{0:+d}'.format(score))<tab>Print +1 using format '{0:+d}'<eos>
<sos>[k for k, g in itertools.groupby([1, 2, 2, 3, 2, 2, 4])]<tab>remove adjacent duplicate elements from a list `[1, 2, 2, 3, 2, 2, 4]`<eos>
<sos>"""0,1,2""".split(',')<tab>split string "0,1,2" based on delimiter ','<eos>
<sos>[int(x) for x in '0,1,2'.split(',')]<tab>convert the string '0,1,2' to a list of integers<eos>
<sos>dict([('A', 1), ('B', 2), ('C', 3)])<tab>convert list of key-value tuples `[('A', 1), ('B', 2), ('C', 3)]` into dictionary<eos>
<sos>np.savetxt('test.txt', x)<tab>save numpy array `x` into text file 'test.txt'<eos>
<sos>direct_output = subprocess.check_output('ls', shell=True)<tab>store the output of command 'ls' in variable `direct_output`<eos>
<sos>df[df.columns - ['T1_V6']]<tab>get all column name of dataframe `df` except for column 'T1_V6'<eos>
<sos>((25 < a) & (a < 100)).sum()<tab>get count of values in numpy array `a` that are between values `25` and `100`<eos>
<sos>date.today().strftime('%A')<tab>Get day name from a datetime object<eos>
<sos>re.search('\\bis\\b', your_string)<tab>None<eos>
<sos>{{car.date_of_manufacture | datetime}}<tab>Jinja parse datetime object `car.date_of_manufacture` to use format pattern `datetime`<eos>
<sos>{{car.date_of_manufacture.strftime('%Y-%m-%d')}}<tab>Get the date object `date_of_manufacture` of object `car` in string  format '%Y-%m-%d'<eos>
<sos>[item for sublist in l for item in sublist]<tab>make a flat list from list of lists `sublist`<eos>
<sos>list(itertools.chain(*list2d))<tab>make a flat list from list of lists `list2d`<eos>
<sos>list(itertools.chain.from_iterable(list2d))<tab>make a flat list from list of lists `list2d`<eos>
<sos>ord('a')<tab>convert ascii value 'a' to int<eos>
<sos>re.sub('(?m)^[^\\S\\n]+', '', '  a\n b\n c\nd  e')<tab>replace white spaces in string '  a\n b\n c\nd  e' with empty string ''<eos>
<sos>re.sub('(?m)^\\s+', '', 'a\n b\n c')<tab>remove white spaces from all the lines using a regular expression in string 'a\n b\n c'<eos>
<sos>a, b, c = [1, 2, 3]<tab>destruct elements of list `[1, 2, 3]` to variables `a`, `b` and `c`<eos>
<sos>[list(v) for k, v in itertools.groupby(mylist, key=lambda x: x[:5])]<tab>split list `mylist` into a list of lists whose elements have the same first five characters<eos>
<sos>line = re.sub('\\(+as .*?\\) ', '', line)<tab>remove all instances of parenthesesis containing text beginning with `as ` from string `line`<eos>
<sos>print(line.rstrip('\n'))<tab>skip the newline while printing `line`<eos>
<sos>df.index.values.tolist()<tab>get index values of pandas dataframe `df` as list<eos>
<sos>if (not a):
    pass<tab>check if list `a` is empty<eos>
<sos>if (not seq):
    pass<tab>check if list `seq` is empty<eos>
<sos>if (len(li) == 0):
    pass<tab>check if list `li` is empty<eos>
<sos>[i for i, v in enumerate(a) if v > 4]<tab>create a list containing the indices of elements greater than 4 in list `a`<eos>
<sos>sorted(yourdata, reverse=True)<tab>reverse list `yourdata`<eos>
<sos>sorted(yourdata, key=lambda d: d.get('key', {}).get('subkey'), reverse=True)<tab>sort list of nested dictionaries `yourdata` in reverse based on values associated with each dictionary's key 'subkey'<eos>
<sos>yourdata.sort(key=lambda e: e['key']['subkey'], reverse=True)<tab>sort list of nested dictionaries `yourdata` in reverse order of 'key' and 'subkey'<eos>
<sos>df.round()<tab>remove decimal points in pandas data frame using round<eos>
<sos>gca().get_lines()[n].get_xydata()<tab>Get data from matplotlib plot<eos>
<sos>A[:, -2:]<tab>get the maximum 2 values per row in array `A`<eos>
<sos>request.GET.get('username', '')<tab>Get value for  "username" parameter in GET request  in Django<eos>
<sos>pprint(dict(list(o.items())))<tab>pretty-print ordered dictionary `o`<eos>
<sos>url('^$', include('sms.urls')),<tab>Confirm urls in Django properly<eos>
<sos>url('^', include('sms.urls')),<tab>Configure url in django properly<eos>
<sos>max_item = max(a_list, key=operator.itemgetter(1))<tab>get the tuple in list `a_list` that has the largest item in the second index<eos>
<sos>max(a_list, key=operator.itemgetter(1))<tab>find tuple in list of tuples `a_list` with the largest second element<eos>
<sos>s.resample('3M', how='sum')<tab>resample series `s` into 3 months bins and sum each bin<eos>
<sos>[a[i] for i in (1, 2, 5)]<tab>extract elements at indices (1, 2, 5) from a list `a`<eos>
<sos>[line for line in open('textfile') if 'apple' in line]<tab>filter lines from a text file 'textfile' which contain a word 'apple'<eos>
<sos>datetime.datetime.strptime(s, '%Y-%m-%dT%H:%M:%SZ')<tab>convert a date string `s` to a datetime object<eos>
<sos>pandas.read_csv(filename, sep='\t', lineterminator='\r')<tab>reading tab-delimited csv file `filename` with pandas on mac<eos>
<sos>'longlongTESTstringTEST'.replace('TEST', '?', 1)<tab>replace only first occurence of string `TEST` from a string `longlongTESTstringTEST`<eos>
<sos>archive.write(pdffile, os.path.basename(pdffile))<tab>zip file `pdffile` using its basename as directory name<eos>
<sos>dict(x[1:] for x in reversed(myListOfTuples))<tab>create a dictionary of pairs from a list of tuples `myListOfTuples`<eos>
<sos>[(x1 - x2) for x1, x2 in zip(List1, List2)]<tab>subtract elements of list `List1` from elements of list `List2`<eos>
<sos>string[0].isdigit()<tab>check if string `string` starts with a number<eos>
<sos>strg.startswith(('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'))<tab>Check if string `strg` starts with any of the elements in list ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9')<eos>
<sos>print(os.path.dirname(os.path.realpath(__file__)))<tab>print script's directory<eos>
<sos>re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)<tab>split string `text` by the occurrences of regex pattern '(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)'<eos>
<sos>plt.scatter(*zip(*li))<tab>Make a scatter plot using unpacked values of list `li`<eos>
<sos>tuple(zip(*t))<tab>rearrange tuple of tuples `t`<eos>
<sos>df.groupby(np.arange(len(df.columns)) // 3, axis=1).mean()<tab>Get average for every three columns in `df` dataframe<eos>
<sos>"""""".join(chr(i) for i in L)<tab>convert a list `L` of ascii values to a string<eos>
<sos>sum(x == chosen_value for x in list(d.values()))<tab>count the number of pairs in dictionary `d` whose value equal to `chosen_value`<eos>
<sos>sum(1 for x in list(d.values()) if some_condition(x))<tab>count the number of values in `d` dictionary that are predicate to function `some_condition`<eos>
<sos>struct.unpack('f', struct.pack('f', 0.00582811585976))<tab>convert double 0.00582811585976 to float<eos>
<sos>timestamp = (dt - datetime(1970, 1, 1)).total_seconds()<tab>convert datetime.date `dt` to utc timestamp<eos>
<sos>df.sort('m')<tab>sort column `m` in panda dataframe `df`<eos>
<sos>a = sorted(a, key=lambda x: x.modified, reverse=True)<tab>Sort a data `a` in descending order based on the `modified` attribute of elements using lambda function<eos>
<sos>print(bool(a))<tab>print the truth value of `a`<eos>
<sos>df = df.rename(index={last: 'a'})<tab>rename `last` row index label in dataframe `df` to `a`<eos>
<sos>km.fit(x.reshape(-1, 1))<tab>Fit Kmeans function to a one-dimensional array `x` by reshaping it to be a multidimensional array of single values<eos>
<sos>sorted(words, key=lambda x: 'a' + x if x.startswith('s') else 'b' + x)<tab>Sort a list of strings 'words' such that items starting with 's' come first.<eos>
<sos>webbrowser.open('http://somesite.com/adminpanel/index.php')<tab>open the login site 'http://somesite.com/adminpanel/index.php' in the browser<eos>
<sos>dict((k, v) for k, v in parent_dict.items() if 2 < k < 4)<tab>fetch all elements in a dictionary `parent_dict`, falling between two keys 2 and 4<eos>
<sos>dict((k, v) for k, v in parent_dict.items() if k > 2 and k < 4)<tab>fetch all elements in a dictionary 'parent_dict' where the key is between the range of 2 to 4<eos>
<sos>[list(x) for x in zip(*sorted(zip(list1, list2), key=lambda pair: pair[0]))]<tab>sort two lists `list1` and `list2` together using lambda function<eos>
<sos>sum(((i > 5) for i in j))<tab>get the number of values in list `j` that is greater than 5<eos>
<sos>len([1 for i in j if (i > 5)])<tab>get the number of values in list `j` that is greater than 5<eos>
<sos>j = np.array(j)
sum((j > i))<tab>get the number of values in list `j` that is greater than `i`<eos>
<sos>[(x + tuple(y)) for x, y in zip(zip(a, b), c)]<tab>zip list `a`, `b`, `c` into a list of tuples<eos>
<sos>os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)<tab>changing permission of file `path` to `stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH`<eos>
<sos>parser.add_argument('file', nargs='*')<tab>argparse associate zero or more arguments with flag 'file'<eos>
<sos>z = [(i == j) for i, j in zip(x, y)]<tab>get a list of booleans `z` that shows wether the corresponding items in list `x` and `y` are equal<eos>
<sos>[(x[i] == y[i]) for i in range(len(x))]<tab>create a list which indicates whether each element in `x` and `y` is identical<eos>
<sos>[int(s) for s in re.findall('\\b\\d+\\b', "he33llo 42 I'm a 32 string 30")]<tab>None<eos>
<sos>df2 = pd.DataFrame(index=df1.index)<tab>create an empty data frame `df2` with index from another data frame `df1`<eos>
<sos>struct.unpack('h', pS[0:2])<tab>unpack first and second bytes of byte string `pS` into integer<eos>
<sos>print('\n'.join('  '.join(map(str, row)) for row in t))<tab>print list `t` into a table-like shape<eos>
<sos>df.sort_values(by='Date')<tab>None<eos>
<sos>driver.find_element_by_name('<check_box_name>').is_selected()<tab>check if a checkbox is checked in selenium python webdriver<eos>
<sos>driver.find_element_by_id('<check_box_id>').is_selected()<tab>determine if checkbox with id '<check_box_id>' is checked in selenium python webdriver<eos>
<sos>[(a if a else 2) for a in [0, 1, 0, 3]]<tab>replace `0` with `2` in the list `[0, 1, 0, 3]`<eos>
<sos>'M\\N{AMPERSAND}M\\N{APOSTROPHE}s'.encode().decode('unicode-escape')<tab>Produce a string that is suitable as Unicode literal from string 'M\\N{AMPERSAND}M\\N{APOSTROPHE}s'<eos>
<sos>'M\\N{AMPERSAND}M\\N{APOSTROPHE}s'.decode('unicode-escape')<tab>Parse a unicode string `M\\N{AMPERSAND}M\\N{APOSTROPHE}s`<eos>
<sos>chr(int('fd9b', 16)).encode('utf-8')<tab>convert Unicode codepoint to utf8 hex<eos>
<sos>print('0x%X' % value)<tab>use upper case letters to print hex value `value`<eos>
<sos>cleaned = [x for x in your_list if x]<tab>get a list `cleaned` that contains all non-empty elements in list `your_list`<eos>
<sos>slice(*[(int(i.strip()) if i else None) for i in string_slice.split(':')])<tab>create a slice object using string `string_slice`<eos>
<sos>soup.find_all(['a', 'div'])<tab>Find all the tags `a` and `div` from Beautiful Soup object `soup`<eos>
<sos>print(func.__name__)<tab>get the name of function `func` as a string<eos>
<sos>"""""".join('{}{}'.format(key, val) for key, val in sorted(adict.items()))<tab>convert dictionary `adict` into string<eos>
<sos>"""""".join('{}{}'.format(key, val) for key, val in list(adict.items()))<tab>convert dictionary `adict` into string<eos>
<sos>new_list = old_list[:]<tab>copy list `old_list` as `new_list`<eos>
<sos>new_list = list(old_list)<tab>copy list `old_list` as `new_list`<eos>
<sos>new_list = copy.copy(old_list)<tab>copy list `old_list` as `new_list`<eos>
<sos>new_list = copy.deepcopy(old_list)<tab>deep copy list `old_list` as `new_list`<eos>
<sos>[i for i in old_list]<tab>make a copy of list `old_list`<eos>
<sos>plt.legend(frameon=False)<tab>remove frame of legend in plot `plt`<eos>
<sos>"""\\ud83d\\ude4f""".encode('utf-16', 'surrogatepass').decode('utf-16')<tab>Print a emoji from a string `\\ud83d\\ude4f` having surrogate pairs<eos>
<sos>globals()['myfunction']()<tab>calling a function named 'myfunction' in the module<eos>
<sos>urllib.request.urlopen('http://www.stackoverflow.com').getcode()<tab>Check the status code of url "http://www.stackoverflow.com"<eos>
<sos>conn = httplib.HTTPConnection('www.python.org')
conn.request('HEAD', '/')
r1 = conn.getresponse()
print(r1.status, r1.reason)<tab>Check the status code of url "www.python.org"<eos>
<sos>r = requests.head(url)
return (r.status_code == 200)<tab>Check the status code of url `url`<eos>
<sos>print(urllib.request.urlopen('http://www.stackoverflow.com').getcode())<tab>Checking if website "http://www.stackoverflow.com" is up<eos>
<sos>driver.find_element_by_css_selector("a[href^='javascript']").click()<tab>Selenium `driver` click a hyperlink with the pattern "a[href^='javascript']"<eos>
<sos>df.to_pickle(file_name)<tab>store data frame `df` to file `file_name` using pandas, python<eos>
<sos>df.groupby(by=df.columns, axis=1).mean()<tab>calculate the mean of columns with same name in dataframe `df`<eos>
<sos>bar.sort(key=lambda x: (x.attrb1, x.attrb2), reverse=True)<tab>sort list `bar` by each element's attribute `attrb1` and attribute `attrb2` in reverse order<eos>
<sos>alpha = img.split()[-1]<tab>get alpha value `alpha` of a png image `img`<eos>
<sos>[len(x) for x in s.split()]<tab>None<eos>
<sos>soup.findAll('div', style='width=300px;')<tab>BeautifulSoup find tag 'div' with styling 'width=300px;' in HTML string `soup`<eos>
<sos>cursor.execute(sql, list(myDict.values()))<tab>Execute SQL statement `sql` with values of dictionary `myDict` as parameters<eos>
<sos>df.to_csv('Result.csv', index=False, sep=' ')<tab>Convert CSV file `Result.csv` to Pandas dataframe using separator ' '<eos>
<sos>globals().update(vars(args))<tab>update the `globals()` dictionary with the contents of the `vars(args)` dictionary<eos>
<sos>re.findall('\\[(.*?)\\]', mystring)<tab>find all substrings in `mystring` beginning and ending with square brackets<eos>
<sos>print('%.2f kg = %.2f lb = %.2f gal = %.2f l' % (var1, var2, var3, var4))<tab>Format all floating variables `var1`, `var2`, `var3`, `var1` to print to two decimal places.<eos>
<sos>d = dict((k, v) for k, v in d.items() if v > 0)<tab>Remove all items from a dictionary `d` where the values are less than `1`<eos>
<sos>d = {k: v for k, v in list(d.items()) if v > 0}<tab>Filter dictionary `d` to have items with value greater than 0<eos>
<sos>pd.to_datetime(pd.Series(date_stngs))<tab>convert a string of date strings `date_stngs ` to datetime objects and put them in a dataframe<eos>
<sos>df.iloc[2, 0]<tab>get  value at index `[2, 0]` in dataframe `df`<eos>
<sos>matplotlib.rcParams.update({'font.size': 22})<tab>change the font size on plot `matplotlib` to 22<eos>
<sos>pd.DataFrame(list(d.items()), columns=['Date', 'DateValue'])<tab>converting dictionary `d` into a dataframe `pd` with keys as data for column 'Date' and the corresponding values as data for column 'DateValue'<eos>
<sos>pd.DataFrame(df.values * df2.values, columns=df.columns, index=df.index)<tab>create a dataframe containing the multiplication of element-wise in dataframe `df` and dataframe `df2` using index name and column labels of dataframe `df`<eos>
<sos>re.findall('\\d+\\.\\d+', 'Current Level: 13.4 db.')<tab>extract floating number from string 'Current Level: 13.4 db.'<eos>
<sos>re.findall('[-+]?\\d*\\.\\d+|\\d+', 'Current Level: -13.2 db or 14.2 or 3')<tab>extract floating point numbers from a string 'Current Level: -13.2 db or 14.2 or 3'<eos>
<sos>zip(it, it, it)<tab>pair each element in list `it` 3 times into a tuple<eos>
<sos>df['x'].str.lower()<tab>lowercase a python dataframe string in column 'x' if it has missing values in dataframe `df`<eos>
<sos>jsobj['a']['b']['e'].append({'f': var6, 'g': var7, 'h': var8})<tab>append dict `{'f': var6, 'g': var7, 'h': var8}` to value of key `e` in dict `jsobj['a']['b']`<eos>
<sos>"""""".join(lst)<tab>Concat a list of strings `lst` using string formatting<eos>
<sos>sum(v for v in list(d.values()) if v > 0)<tab>sum values greater than 0 in dictionary `d`<eos>
<sos>app.run(debug=True)<tab>run flask application `app` in debug mode.<eos>
<sos>df.drop(df.index[[1, 3]], inplace=True)<tab>drop rows whose index value in list `[1, 3]` in dataframe `df`<eos>
<sos>df.apply(lambda x: x.fillna(x.mean()), axis=0)<tab>replace nan values in a pandas data frame with the average of columns<eos>
<sos>[o.my_attr for o in my_list]<tab>extract attribute `my_attr` from each object in list `my_list`<eos>
<sos>time.strftime('%m/%d/%Y', time.gmtime(os.path.getmtime(file)))<tab>python get time stamp on file `file` in '%m/%d/%Y' format<eos>
<sos>all(item in list(superset.items()) for item in list(subset.items()))<tab>check if dictionary `subset` is a subset of dictionary `superset`<eos>
<sos>[str(wi) for wi in wordids]<tab>Convert integer elements in list `wordids` to strings<eos>
<sos>df2 = df.reset_index()<tab>Reset the indexes of a pandas data frame<eos>
<sos>dt.strftime('%m/%d/%Y')<tab>format datetime in `dt` as string in format `'%m/%d/%Y`<eos>
<sos>print('Total cost is: ${:,.2f}'.format(TotalAmount))<tab>format floating point number  `TotalAmount` to be rounded off to two decimal places and have a comma thousands' seperator<eos>
<sos>df.groupby(np.arange(len(df.columns)) // 2 + 1, axis=1).sum().add_prefix('s')<tab>sum the values in each row of every two adjacent columns in dataframe `df`<eos>
<sos>randomList = [random.random() for _ in range(10)]<tab>create list `randomList` with 10 random floating point numbers between 0.0 and 1.0<eos>
<sos>print(soup.find('a', href=re.compile('.*follow\\?page.*')))<tab>find href value that has string 'follow?page' inside it<eos>
<sos>sys.stdout.flush()<tab>immediately see output of print statement that doesn't end in a newline<eos>
<sos>country, capital = random.choice(list(d.items()))<tab>get a random key `country` and value `capital` form a dictionary `d`<eos>
<sos>list('Word to Split')<tab>split string `Word to Split` into a list of characters<eos>
<sos>[w for w in open('file.txt') if not re.search('[aeiou]{2}', w)]<tab>Create a list containing words that contain vowel letter followed by the same vowel in file 'file.text'<eos>
<sos>pat = re.compile('^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$')<tab>Validate IP address using Regex<eos>
<sos>exec(compile(open('filename.py').read(), 'filename.py', 'exec'))<tab>execute file 'filename.py'<eos>
<sos>session.query(Tag).distinct(Tag.name).group_by(Tag.name).count()<tab>SQLAlchemy count the number of rows with distinct values in column `name` of table `Tag`<eos>
<sos>df = df.dropna(axis=1, how='all')<tab>remove null columns in a dataframe `df`<eos>
<sos>all(x.count(1) == 3 for x in L)<tab>check if all lists in list `L` have three elements of integer 1<eos>
<sos>[x[0] for x in l1 if any(x[0] == y[0] for y in l2)]<tab>Get a list comparing two lists of tuples `l1` and `l2` if any first value in `l1` matches with first value in `l2`<eos>
<sos>tex.delete('1.0', END)<tab>clear the textbox `text` in tkinter<eos>
<sos>datetime.datetime.fromtimestamp(myNumber).strftime('%Y-%m-%d %H:%M:%S')<tab>Convert long int `myNumber` into date and time represented in the the string format '%Y-%m-%d %H:%M:%S'<eos>
<sos>system('python myscript.py')<tab>Spawn a process to run python script `myscript.py` in C++<eos>
<sos>your_list.sort(key=operator.attrgetter('anniversary_score'))<tab>sort a list `your_list` of class objects by their values for the attribute `anniversary_score`<eos>
<sos>your_list.sort(key=lambda x: x.anniversary_score)<tab>sort list `your_list` by the `anniversary_score` attribute of each object<eos>
<sos>print(type(tf.Session().run(tf.constant([1, 2, 3]))))<tab>convert a tensor with list of constants `[1, 2, 3]` into a numpy array in tensorflow<eos>
<sos>list(itertools.chain(*a))<tab>convert list `a` from being consecutive sequences of tuples into a single sequence of elements<eos>
<sos>count.setdefault('a', 0)<tab>Set value for key `a` in dict `count` to `0` if key `a` does not exist or if value is `none`<eos>
<sos>df.groupby(['cluster']).mean()<tab>Do group by on `cluster` column in `df` and get its mean<eos>
<sos>min(myList, key=lambda x: abs(x - myNumber))<tab>get number in list `myList` closest in value to number `myNumber`<eos>
<sos>any(x in string for x in search)<tab>check if any of the items in  `search` appear in `string`<eos>
<sos>print(pattern.search(url).group(1))<tab>search for occurrences of regex pattern `pattern` in string `url`<eos>
<sos>(s.factorize()[0] + 1).astype('float')<tab>factorize all string values in dataframe `s` into floats<eos>
<sos>C = [(a - b) for a, b in zip(A, B)]<tab>Get a list `C` by subtracting values in one list `B` from corresponding values in another list `A`<eos>
<sos>datetime.datetime.strptime('2011, 4, 0', '%Y, %U, %w')<tab>derive the week start for the given week number and year ‘2011, 4, 0’<eos>
<sos>map(int, ['1', '-1', '1'])<tab>convert a list of strings `['1', '-1', '1']` to a list of numbers<eos>
<sos>datetime.datetime.strptime('16Sep2012', '%d%b%Y')<tab>create datetime object from "16sep2012"<eos>
<sos>Book.objects.filter(pk=pk).update(**d)<tab>update fields in Django model `Book` with arguments in dictionary `d` where primary key is equal to `pk`<eos>
<sos>Book.objects.create(**d)<tab>update the fields in django model `Book` using dictionary `d`<eos>
<sos>print('{0:.2f}'.format(your_number))<tab>print a digit `your_number` with exactly 2 digits after decimal<eos>
<sos>random.randint(100000000000, 999999999999)<tab>generate a 12-digit random number<eos>
<sos>int(''.join(str(random.randint(0, 9)) for _ in range(12)))<tab>generate a random 12-digit number<eos>
<sos>"""""".join(str(random.randint(0, 9)) for _ in range(12))<tab>generate a random 12-digit number<eos>
<sos>'%0.12d' % random.randint(0, 999999999999)<tab>generate a 12-digit random number<eos>
<sos>numpy.delete(a, index)<tab>remove specific elements in a numpy array `a`<eos>
<sos>sorted(trial_list, key=lambda x: trial_dict[x])<tab>sort list `trial_list` based on values of dictionary `trail_dict`<eos>
<sos>sys.stdin.read(1)<tab>read a single character from stdin<eos>
<sos>print(re.findall(pattern, x))<tab>get a list of characters in string `x` matching regex pattern `pattern`<eos>
<sos>k = soup.find(text=re.compile('My keywords')).parent.text<tab>get the context of a search by keyword 'My keywords' in beautifulsoup `soup`<eos>
<sos>df.apply(lambda x: x.tolist(), axis=1)<tab>convert rows in pandas data frame `df` into list<eos>
<sos>B = np.reshape(A, (-1, 2))<tab>convert a 1d `A` array to a 2d array `B`<eos>
<sos>app.run(host='192.168.0.58', port=9000, debug=False)<tab>run app `app` on host '192.168.0.58' and port 9000 in Flask<eos>
<sos>print('\xc5\xc4\xd6'.encode('UTF8'))<tab>encode unicode string '\xc5\xc4\xd6' to utf-8 code<eos>
<sos>[x[0] for x in G]<tab>get the first element of each tuple from a list of tuples `G`<eos>
<sos>re.findall('-(?!aa-|bb-)([^-]+)', string)<tab>regular expression matching all but 'aa' and 'bb' for string `string`<eos>
<sos>re.findall('-(?!aa|bb)([^-]+)', string)<tab>regular expression matching all but 'aa' and 'bb'<eos>
<sos>{k: v for k, v in list(hand.items()) if v}<tab>remove false entries from a dictionary `hand`<eos>
<sos>dict((k, v) for k, v in hand.items() if v)<tab>Get a dictionary from a dictionary `hand` where the values are present<eos>
<sos>sorted(L, key=operator.itemgetter('resultType'))<tab>sort list `L` based on the value of variable 'resultType' for each object in list `L`<eos>
<sos>s.sort(key=operator.attrgetter('resultType'))<tab>sort a list of objects `s` by a member variable 'resultType'<eos>
<sos>somelist.sort(key=lambda x: x.resultType)<tab>sort a list of objects 'somelist' where the object has member number variable `resultType`<eos>
<sos>df1.merge(df2, on='name').merge(df3, on='name')<tab>join multiple dataframes `d1`, `d2`, and `d3` on column 'name'<eos>
<sos>decimal.Decimal(random.randrange(10000)) / 100<tab>generate random Decimal<eos>
<sos>onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]<tab>list all files of a directory `mypath`<eos>
<sos>f = []
for (dirpath, dirnames, filenames) in walk(mypath):
    f.extend(filenames)
    break<tab>list all files of a directory `mypath`<eos>
<sos>print(glob.glob('/home/adam/*.txt'))<tab>list all ".txt" files of a directory "/home/adam/"<eos>
<sos>os.listdir('somedirectory')<tab>list all files of a directory "somedirectory"<eos>
<sos>cur.executemany('INSERT INTO table VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)', tup)<tab>execute sql query 'INSERT INTO table VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)' with all parameters in list `tup`<eos>
<sos>print([key for key in d if d[key] == 1])<tab>get keys with same value in dictionary `d`<eos>
<sos>print([key for key, value in d.items() if value == 1])<tab>get keys with same value in dictionary `d`<eos>
<sos>print([key for key, value in list(d.items()) if value == 1])<tab>Get keys from a dictionary 'd' where the value is '1'.<eos>
<sos>strs = ['' for x in range(size)]<tab>create list of 'size' empty strings<eos>
<sos>with open(input_filename, 'r') as f:
    html_text = markdown(f.read(), output_format='html4')
pdfkit.from_string(html_text, output_filename)<tab>generate pdf file `output_filename` from markdown file `input_filename`<eos>
<sos>[dict(t) for t in set([tuple(d.items()) for d in l])]<tab>remove duplicate dict in list `l`<eos>
<sos>TIME_ZONE = 'Europe/Istanbul'<tab>Set time zone `Europe/Istanbul` in Django<eos>
<sos>dates_dict.setdefault(key, []).append(date)<tab>append `date` to list value of `key` in dictionary `dates_dict`, or create key `key` with value `date` in a list if it does not exist<eos>
<sos>Article.objects.values('pub_date').annotate(article_count=Count('title'))<tab>Group the values from django model `Article` with group by value `pub_date` and annotate by `title`<eos>
<sos>canvas.delete('all')<tab>clear Tkinter Canvas `canvas`<eos>
<sos>s = pd.Series(['A', 'B', 'A1R', 'B2', 'AABB4'])<tab>Initialize a pandas series object `s` with columns `['A', 'B', 'A1R', 'B2', 'AABB4']`<eos>
<sos>datetime.datetime.strptime('2007-03-04T21:08:12', '%Y-%m-%dT%H:%M:%S')<tab>None<eos>
<sos>a.sort(key=lambda x: b.index(x[0]))<tab>sort list `a` using the first dimension of the element as the key to list `b`<eos>
<sos>a.sort(key=lambda x_y: b.index(x_y[0]))<tab>None<eos>
<sos>plt.savefig('filename.png')<tab>Save plot `plt` as png file 'filename.png'<eos>
<sos>plt.savefig('filename.png', dpi=300)<tab>Save matplotlib graph to image file `filename.png` at a resolution of `300 dpi`<eos>
<sos>p1.communicate()[0]<tab>get output from process `p1`<eos>
<sos>output = subprocess.Popen(['mycmd', 'myarg'], stdout=PIPE).communicate()[0]<tab>None<eos>
<sos>soup.body.findAll(text='Python')<tab>searche in HTML string for elements that have text 'Python'<eos>
<sos>soup.body.findAll(text='Python Jobs')<tab>BeautifulSoup find string 'Python Jobs' in HTML body `body`<eos>
<sos>sorted(list(d.items()), key=lambda name_num: (name_num[0].rsplit(None, 1)[0], name_num[1]))<tab>Sort items in dictionary `d`  using the first part of the key after splitting the key<eos>
<sos>set([1, 2, 3]) ^ set([3, 4, 5])<tab>create a set that is the exclusive or of [1, 2, 3] and [3, 4, 5]<eos>
<sos>request.POST.getlist('pass_id')<tab>Get a list values of a dictionary item `pass_id` from post requests in django<eos>
<sos>list(dict((x['id'], x) for x in L).values())<tab>Filter duplicate entries w.r.t. value in 'id' from a list of dictionaries 'L'<eos>
<sos>df.groupby(df.columns, axis=1).sum()<tab>Get pandas GroupBy object with sum over the rows with same column names within  dataframe `df`<eos>
<sos>dict(zip(list(range(1, 5)), list(range(7, 11))))<tab>convert the zip of range `(1, 5)` and range `(7, 11)` into a dictionary<eos>
<sos>numpy.where(mask)<tab>Get all indexes of boolean numpy array where boolean value `mask` is True<eos>
<sos>if (string1.lower() == string2.lower()):
    print('The strings are the same (case insensitive)')
else:
    print('The strings are not the same (case insensitive)')<tab>case insensitive comparison of strings `string1` and `string2`<eos>
<sos>if (string1.lower() == string2.lower()):
    pass<tab>case insensitive string comparison between `string1` and `string2`<eos>
<sos>(string1.lower() == string2.lower())<tab>case insensitive string comparison between `string1` and `string2`<eos>
<sos>(first.lower() == second.lower())<tab>case insensitive string comparison between `first` and `second`<eos>
<sos>(first.upper() == second.upper())<tab>case insensitive comparison between strings `first` and `second`<eos>
<sos>os.system("awk '{print $10, $11}' test.txt > test2.txt")<tab>Taking the results of a bash command "awk '{print $10, $11}' test.txt > test2.txt"<eos>
<sos>del my_list[2:6]<tab>remove multiple values from a list `my_list` at the same time with index starting at `2` and ending just before `6`.<eos>
<sos>int(s.encode('hex'), 16)<tab>convert a string `s` to its base-10 representation<eos>
<sos>re.findall('TAA(?:[ATGC]{3})+?TAA', seq)<tab>match regex pattern 'TAA(?:[ATGC]{3})+?TAA' on string `seq`<eos>
<sos>sorted(s, key=float)<tab>sort a set `s` by numerical value<eos>
<sos>hex(65)<tab>convert an int 65 to hex string<eos>
<sos>a.append(b).reset_index(drop=True)<tab>append a pandas series `b` to the series `a` and get a continuous index<eos>
<sos>pd.concat([a, b], ignore_index=True)<tab>simple way to append a pandas series `a` and `b` with same index<eos>
<sos>[(i, j) for i in range(1, 3) for j in range(1, 5)]<tab>Get a list of tuples with multiple iterators using list comprehension<eos>
<sos>sorted(iter(mydict.items()), key=itemgetter(1), reverse=True)<tab>reverse sort items in dictionary `mydict` by value<eos>
<sos>pd.date_range('1/1/2014', periods=12, freq='BM')<tab>select the last business day of the month for each month in 2014 in pandas<eos>
<sos>requests.get('https://kennethreitz.com', verify=False)<tab>disable the certificate check in https requests for url `https://kennethreitz.com`<eos>
<sos>df.ix[:-1]<tab>return dataframe `df` with last row dropped<eos>
<sos>if ('blah' not in somestring):
    pass<tab>check if "blah" is in string `somestring`<eos>
<sos>if (needle in haystack):
    pass<tab>check if string `needle` is in `haystack`<eos>
<sos>string.find('substring')<tab>check if string "substring" is in string<eos>
<sos>if (s.find('is') == (-1)):
    print("No 'is' here!")
else:
    print("Found 'is' in the string.")<tab>check if string `s` contains "is"<eos>
<sos>pd.concat([df.head(1), df.tail(1)])<tab>extract first and last row of a dataframe `df`<eos>
<sos>MyModel.objects.extra(where=['CHAR_LENGTH(text) > 254'])<tab>filter a Django model `MyModel` to have charfield length of max `255`<eos>
<sos>MyModel.objects.filter(text__regex='^.{254}.*')<tab>Filter queryset for all objects in Django model `MyModel` where texts length are greater than `254`<eos>
<sos>sum(df.apply(lambda x: sum(x.isnull().values), axis=1) > 0)<tab>count the number of rows with missing values in a pandas dataframe `df`<eos>
<sos>sorted(enumerate(a), key=lambda x: x[1])<tab>None<eos>
<sos>canvas.create_text(x, y, font=('Purisa', 12), text=k)<tab>set the font 'Purisa' of size 12 for a canvas' text item `k`<eos>
<sos>[y['baz'] for x in foos for y in x['bar']]<tab>create a list containing all values associated with key 'baz' in dictionaries of list `foos` using list comprehension<eos>
<sos>df = pd.read_csv('comma.csv', quotechar="'")<tab>read pandas data frame csv `comma.csv` with extra commas in column specifying string delimiter `'`<eos>
<sos>df['a'] = df['a'].str.replace('in.', ' in. ')<tab>replace string 'in.' with ' in. ' in dataframe `df` column 'a'<eos>
<sos>[i for i in range(len(a)) if a[i] > 2]<tab>Get all indexes of a list `a` where each value is greater than `2`<eos>
<sos>('myVar' in locals())<tab>check if a local variable `myVar` exists<eos>
<sos>('myVar' in globals())<tab>check if a global variable `myVar` exists<eos>
<sos>hasattr(obj, 'attr_name')<tab>check if object `obj` has attribute 'attr_name'<eos>
<sos>if ('myVar' in locals()):
    pass<tab>check if a local variable 'myVar' exists<eos>
<sos>if ('myVar' in globals()):
    pass<tab>check if a global variable 'myVar' exists<eos>
<sos>lambda x, y: x + y<tab>lambda function that adds two operands<eos>
<sos>sum(1 for i in it)<tab>count the number of items in a generator/iterator `it`<eos>
<sos>[(x, lst2[i]) for i, x in enumerate(lst)]<tab>get tuples of the corresponding elements from lists `lst` and `lst2`<eos>
<sos>[(i, j) for i, j in zip(lst, lst2)]<tab>create tuples containing elements that are at the same index of list `lst` and list `lst2`<eos>
<sos>[(lst[i], lst2[i]) for i in range(len(lst))]<tab>get tuples from lists `lst` and `lst2` using list comprehension in python 2<eos>
<sos>struct.unpack('BBB', rgbstr.decode('hex'))<tab>convert hex triplet string `rgbstr` to rgb tuple<eos>
<sos>(3 not in [2, 3, 4])<tab>Check if 3 is not in a list [2, 3, 4]<eos>
<sos>((2, 3) not in [(2, 3), (5, 6), (9, 1)])<tab>Check if tuple (2, 3) is not in a list [(2, 3), (5, 6), (9, 1)]<eos>
<sos>((2, 3) not in [(2, 7), (7, 3), 'hi'])<tab>Check if tuple (2, 3) is not in a list [(2, 7), (7, 3), "hi"]<eos>
<sos>(3 not in [4, 5, 6])<tab>Check if 3 is not in the list [4,5,6]<eos>
<sos>[value for pair in zip(a, b[::-1]) for value in pair]<tab>create a list by appending components from list `a` and reversed list `b` interchangeably<eos>
<sos>b = np.delete(a, -1, 1)<tab>delete the last column of numpy array `a` and assign resulting array to `b`<eos>
<sos>dbb.commit()<tab>commit all the changes after executing a query.<eos>
<sos>pd.merge(a, b, on=['A', 'B'], how='outer')<tab>join two dataframes based on values in selected columns<eos>
<sos>setStyleSheet('QPushButton {background-color: #A3C1DA; color: red;}')<tab>set text color as `red` and background color as `#A3C1DA` in qpushbutton<eos>
<sos>sum(l) / float(len(l))<tab>find the mean of elements in list `l`<eos>
<sos>[(k, v) for k, v in D.items() if 'Light' in k]<tab>Find all the items from a dictionary `D` if the key contains the string `Light`<eos>
<sos>k = hashlib.md5('thecakeisalie').hexdigest()<tab>Get a md5 hash from string `thecakeisalie`<eos>
<sos>os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))<tab>None<eos>
<sos>birthdays.sort(key=lambda d: (d.month, d.day))<tab>sort datetime objects `birthdays` by `month` and `day`<eos>
<sos>[[td.findNext(text=True) for td in tr.findAll('td')] for tr in rows]<tab>extract table data from table `rows` using beautifulsoup<eos>
<sos>"""Boat.txt.txt""".replace('.txt', '')<tab>strip the string `.txt` from anywhere in the string `Boat.txt.txt`<eos>
<sos>list(df.index)<tab>get a list of the row names from index of a pandas data frame<eos>
<sos>df.index<tab>get the row names from index in a pandas data frame<eos>
<sos>"""""".join(list(OrderedDict.fromkeys('aaabcabccd').keys()))<tab>create a list of all unique characters in string 'aaabcabccd'<eos>
<sos>list(set('aaabcabccd'))<tab>get list of all unique characters in a string 'aaabcabccd'<eos>
<sos>"""""".join(set('aaabcabccd'))<tab>None<eos>
<sos>df.loc[(df.loc[:, (df.dtypes != object)] != 0).any(1)]<tab>find rows with non zero values in a subset of columns where `df.dtypes` is not equal to `object` in pandas dataframe<eos>
<sos>br.form.add_file(open(filename), 'text/plain', filename)<tab>None<eos>
<sos>all(word in d for word in ['somekey', 'someotherkey', 'somekeyggg'])<tab>check if  dictionary `d` contains all keys in list `['somekey', 'someotherkey', 'somekeyggg']`<eos>
<sos>subprocess.check_output(['espeak', text], stderr=subprocess.STDOUT)<tab>hide output of subprocess `['espeak', text]`<eos>
<sos>df.fillna(method='ffill', inplace=True)<tab>replace nans by preceding values in pandas dataframe `df`<eos>
<sos>print(np.linspace(1, 3, num=4, endpoint=False))<tab>create 4 numbers in range between 1 and 3<eos>
<sos>print(np.linspace(1, 3, num=5))<tab>Create numpy array of `5` numbers starting from `1` with interval of `3`<eos>
<sos>kdll.CreateSymbolicLinkW('D:\\testdirLink', 'D:\\testdir', 1)<tab>create a symlink directory `D:\\testdirLink` for directory `D:\\testdir` with unicode support using ctypes library<eos>
<sos>slice = [arr[i][0:2] for i in range(0, 2)]<tab>get a list `slice` of array slices of the first two rows and columns from array `arr`<eos>
<sos>upload_url = blobstore.create_upload_url('/upload', gs_bucket_name='my_bucket')<tab>upload uploaded file from path '/upload' to Google cloud storage 'my_bucket' bucket<eos>
<sos>os.chdir(os.path.dirname(__file__))<tab>change directory to the directory of a python script<eos>
<sos>func(*args)<tab>call a function with argument list `args`<eos>
<sos>df['AB'].str.split(' ', 1, expand=True)<tab>split column 'AB' in dataframe `df` into two columns by first whitespace ' '<eos>
<sos>df['A'], df['B'] = df['AB'].str.split(' ', 1).str<tab>pandas dataframe, how do i split a column 'AB' into two 'A' and 'B' on delimiter ' '<eos>
<sos>print(sorted(xs, key=len))<tab>sort list `xs` based on the length of its elements<eos>
<sos>xs.sort(lambda x, y: cmp(len(x), len(y)))<tab>sort list `xs` in ascending order of length of elements<eos>
<sos>xs.sort(key=lambda s: len(s))<tab>sort list of strings `xs` by the length of string<eos>
<sos>ts.plot(marker='.')<tab>plot point marker '.' on series `ts`<eos>
<sos>lst = list(itertools.product([0, 1], repeat=n))<tab>get all combination of n binary values<eos>
<sos>lst = map(list, itertools.product([0, 1], repeat=n))<tab>get all combination of n binary values<eos>
<sos>bin = [0, 1]
[(x, y, z) for x in bin for y in bin for z in bin]<tab>get all combination of 3 binary values<eos>
<sos>lst = list(itertools.product([0, 1], repeat=3))<tab>get all combination of 3 binary values<eos>
<sos>df['col'] = 'str' + df['col'].astype(str)<tab>append string 'str' at the beginning of each value in column 'col' of dataframe `df`<eos>
<sos>dict((name, eval(name)) for name in ['some', 'list', 'of', 'vars'])<tab>get a dict of variable names `['some', 'list', 'of', 'vars']` as a string and their values<eos>
<sos>plt.colorbar(im, ax=ax)<tab>add a colorbar to plot `plt` using image `im` on axes `ax`<eos>
<sos>[a for c in Cards for b in c for a in b]<tab>convert nested list 'Cards' into a flat list<eos>
<sos>sorted(d, key=d.get)<tab>create a list containing keys of dictionary `d` and sort it alphabetically<eos>
<sos>print(len([x for x in lst if x is not None]))<tab>print the number of occurences of not `none` in a list `lst` in Python 2<eos>
<sos>{{json.key1}}<tab>lookup dictionary key `key1` in Django template `json`<eos>
<sos>mynewlist = list(myset)<tab>remove duplicates from list `myset`<eos>
<sos>set(['a', 'b', 'c', 'd'])<tab>get unique values from the list `['a', 'b', 'c', 'd']`<eos>
<sos>figure(figsize=(11.69, 8.27))<tab>set size of `figure` to landscape A4 i.e. `11.69, 8.27` inches<eos>
<sos>url.rsplit('/', 1)<tab>get every thing after last `/`<eos>
<sos>url.rsplit('/', 1)[-1]<tab>get everything after last slash in a url stored in variable 'url'<eos>
<sos>x_file = open(os.path.join(direct, '5_1.txt'), 'r')<tab>open file '5_1.txt' in directory `direct`<eos>
<sos>list('5+6')<tab>create a list with the characters of a string `5+6`<eos>
<sos>np.concatenate(input_list).ravel().tolist()<tab>concatenate a list of numpy arrays `input_list` together into a flattened list of values<eos>
<sos>print([y for x in list(dict.items()) for y in x])<tab>convert dictionary `dict` into a flat list<eos>
<sos>[y for x in list(dict.items()) for y in x]<tab>Convert a dictionary `dict` into a list with key and values as list items.<eos>
<sos>MyModel.objects.order_by('?').first()<tab>get a random record from model 'MyModel' using django's orm<eos>
<sos>os.chdir('chapter3')<tab>change current working directory to directory 'chapter3'<eos>
<sos>os.chdir('C:\\Users\\username\\Desktop\\headfirstpython\\chapter3')<tab>change current working directory<eos>
<sos>os.chdir('.\\chapter3')<tab>change current working directory<eos>
<sos>dict((key, sum(d[key] for d in dictList)) for key in dictList[0])<tab>create a flat dictionary by summing values associated with similar keys in each dictionary of list `dictlist`<eos>
<sos>df.sort(['c1', 'c2'], ascending=[True, True])<tab>sort pandas data frame `df` using values from columns `c1` and `c2` in ascending order<eos>
<sos>floats = [float(x) for x in s.split()]<tab>Converting string lists `s` to float list<eos>
<sos>floats = map(float, s.split())<tab>Converting string lists `s` to float list<eos>
<sos>plt.xticks([1, 2, 3, 4, 5])<tab>set labels `[1, 2, 3, 4, 5]` on axis X in plot `plt`<eos>
<sos>for line in fileinput.input():
    pass<tab>read line by line from stdin<eos>
<sos>for line in sys.stdin:
    pass<tab>read line by line from stdin<eos>
<sos>'one' in list(d.values())<tab>check if string `one` exists in the values of dictionary `d`<eos>
<sos>'one' in iter(d.values())<tab>Check if value 'one' is among the values of dictionary `d`<eos>
<sos>super(Instructor, self).__init__(name, year)<tab>call parent class `Instructor` of child class constructor<eos>
<sos>dict(zip(x, y))<tab>create a dictionary using two lists`x` and `y`<eos>
<sos>sorted(a, key=lambda i: list(i.values())[0], reverse=True)<tab>sort a list of dictionaries `a` by dictionary values in descending order<eos>
<sos>sorted(a, key=dict.values, reverse=True)<tab>sorting a list of dictionary `a` by values in descending order<eos>
<sos>df.groupby(level=0).agg(['sum', 'count', 'std'])<tab>Use multiple groupby and agg operations `sum`, `count`, `std` for pandas data frame `df`<eos>
<sos>a.setdefault('somekey', []).append('bob')<tab>for a dictionary `a`, set default value for key `somekey` as list and append value `bob`  in that key<eos>
<sos>sum(item['gold'] for item in example_list)<tab>sum values in list of dictionaries `example_list` with key 'gold'<eos>
<sos>sum([item['gold'] for item in example_list])<tab>get a sum of all values from key `gold` in a list of dictionary `example_list`<eos>
<sos>sum(item['gold'] for item in myLIst)<tab>Get all the values in key `gold` summed from a list of dictionary `myLIst`<eos>
<sos>f.write('text to write\n')<tab>writing string 'text to write\n' to file `f`<eos>
<sos>file.write('My String\n')<tab>Write a string `My String` to a file `file` including new line character<eos>
<sos>df.reset_index().groupby('A')['index'].apply(np.array)<tab>find consecutive segments from a column 'A' in a pandas data frame 'df'<eos>
<sos>fn = os.path.join(os.path.dirname(__file__), 'my_file')<tab>get a relative path of file 'my_file' into variable `fn`<eos>
<sos>e = next(iter(s))<tab>retrieve an element from a set `s` without removing it<eos>
<sos>os.system('dir c:\\')<tab>execute a command in the command prompt to list directory contents of the c drive `c:\\'<eos>
<sos>self.treeview.connect('size-allocate', self.treeview_changed)<tab>Make a auto scrolled window to the end of the list in gtk<eos>
<sos>3 in [1, 2, 3]<tab>check if 3 is inside list `[1, 2, 3]`<eos>
<sos>datetime.datetime.strptime('10/05/2012', '%d/%m/%Y').strftime('%Y-%m-%d')<tab>Represent DateTime object '10/05/2012' with format '%d/%m/%Y' into format '%Y-%m-%d'<eos>
<sos>s = s.replace('\\', '\\\\')<tab>convert a string literal `s` with values `\\` to raw string literal<eos>
<sos>print(proc.communicate()[0])<tab>get output of script `proc`<eos>
<sos>pd.concat([pd.DataFrame(l) for l in my_list], axis=1).T<tab>create a pandas data frame from list of nested dictionaries `my_list`<eos>
<sos>df.loc[:, ((df != 0).any(axis=0))]<tab>delete all columns in  DataFrame `df` that do not hold a non-zero value in its records<eos>
<sos>sorted(a, key=lambda x: x[1])<tab>sort a multidimensional array `a` by column with index 1<eos>
<sos>[x.strip() for x in s.split(',')]<tab>split string `s` to list conversion by ','<eos>
<sos>items = [item for item in container if item.attribute == value]<tab>Get a list of items in the list `container` with attribute equal to `value`<eos>
<sos>open('filename', 'w').write('\n'.join('%s %s' % x for x in mylist))<tab>create a file 'filename' with each tuple in the list `mylist` written to a line<eos>
<sos>pattern = re.compile('(?:review: )?(http://url.com/(\\d+))\\s?', re.IGNORECASE)<tab>Get multiple matched strings using regex pattern `(?:review: )?(http://url.com/(\\d+))\\s?`<eos>
<sos>str = open('very_Important.txt', 'r').read()<tab>read a text file 'very_Important.txt' into a string variable `str`<eos>
<sos>df.groupby(['A', 'B'])['C'].unique()<tab>Return values for column `C` after group by on column `A` and `B` in dataframe `df`<eos>
<sos>with open(fname) as f:
    content = f.readlines()<tab>read file `fname` line by line into a list `content`<eos>
<sos>with open('filename') as f:
    lines = f.readlines()<tab>read file 'filename' line by line into a list `lines`<eos>
<sos>lines = [line.rstrip('\n') for line in open('filename')]<tab>read file 'filename' line by line into a list `lines`<eos>
<sos>with open('file.txt', 'r') as ins:
    array = []
    for line in ins:
        array.append(line)<tab>read file "file.txt" line by line into a list `array`<eos>
<sos>df['col'] = pd.to_datetime(df['col'])<tab>convert the dataframe column 'col' from string types to datetime types<eos>
<sos>[k for d in list(foo.values()) for k in d]<tab>get a list of the keys in each dictionary in a dictionary of dictionaries `foo`<eos>
<sos>print('Hello, {0}, how do you do?'.format(input('Enter name here: ')))<tab>get user input using message 'Enter name here: ' and insert it to the first placeholder in string 'Hello, {0}, how do you do?'<eos>
<sos>df = pd.read_csv('filename.txt', sep=';', names=['Region Name'])<tab>create pandas data frame `df` from txt file `filename.txt` with column `Region Name` and separator `;`<eos>
<sos>df['a'] = df['a'].apply(lambda x: x + 1)<tab>None<eos>
<sos>platform.system()<tab>get the platform OS name<eos>
<sos>a = sorted(a, key=lambda x: float(x))<tab>sort list `a` in ascending order based on its elements' float values<eos>
<sos>re.search('name (.*)', s)<tab>finding words in string `s` after keyword 'name'<eos>
<sos>db.collection.find({}, {'_id': False})<tab>Find all records from collection `collection` without extracting mongo id `_id`<eos>
<sos>[row[1] for row in A]<tab>Get all the second values from a list of lists `A`<eos>
<sos>[row[0] for row in a]<tab>extract first column from a multi-dimensional array `a`<eos>
<sos>sorted(['10', '3', '2'], key=int)<tab>sort list `['10', '3', '2']` in ascending order based on the integer value of its elements<eos>
<sos>os.path.commonprefix(['/the/dir/', os.path.realpath(filename)]) == '/the/dir/'<tab>check if file `filename` is descendant of directory '/the/dir/'<eos>
<sos>any(substring in string for substring in substring_list)<tab>check if any element of list `substring_list` are in string `string`<eos>
<sos>df = pandas.DataFrame(data, columns=['R_Number', 'C_Number', 'Avg', 'Std'])<tab>construct pandas dataframe from a list of tuples<eos>
<sos>re.sub('^((?:(?!cat).)*cat(?:(?!cat).)*)cat', '\\1Bull', s)<tab>find and replace 2nd occurrence of word 'cat' by 'Bull' in a sentence 's'<eos>
<sos>re.sub('^((.*?cat.*?){1})cat', '\\1Bull', s)<tab>find and replace 2nd occurrence of word 'cat' by 'Bull' in a sentence 's'<eos>
<sos>sorted(the_list, key=lambda k: int(k.split('_')[1]))<tab>sort list of strings in list `the_list` by integer suffix<eos>
<sos>sorted(the_list, key=lambda x: int(x.split('_')[1]))<tab>sort list of strings `the_list` by integer suffix before "_"<eos>
<sos>[list(g) for _, g in itertools.groupby(test, lambda x: x.split('_')[0])]<tab>make a list of lists in which each list `g` are the elements from list `test` which have the same characters up to the first `_` character<eos>
<sos>[list(g) for _, g in itertools.groupby(test, lambda x: x.partition('_')[0])]<tab>None<eos>
<sos>driver.get('http://www.google.com')<tab>Load the url `http://www.google.com` in selenium webdriver `driver`<eos>
<sos>(datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year<tab>using python's datetime module, get the year that utc-11 is currently in<eos>
<sos>Counter([1, 2, 2, 2, 3]) - Counter([1, 2])<tab>Get the difference between two lists `[1, 2, 2, 2, 3]` and `[1, 2]` that may have duplicate values<eos>
<sos>re.sub('<[^>]*>', '', mystring)<tab>remove tags from a string `mystring`<eos>
<sos>data.encode('hex')<tab>encode string `data` as `hex`<eos>
<sos>User.objects.filter(userprofile__level__gte=0)<tab>filter `Users` by field `userprofile` with level greater than or equal to `0`<eos>
<sos>soup.findAll(id=re.compile('para$'))<tab>BeautifulSoup find a tag whose id ends with string 'para'<eos>
<sos>soup.select('div[id^="value_xxx_c_1_f_8_a_"]')<tab>select `div` tags whose `id`s begin with `value_xxx_c_1_f_8_a_`<eos>
<sos>cleaned_list = [x for x in some_list if x is not thing]<tab>delete an item `thing` in a list `some_list` if it exists<eos>
<sos>var = input('Please enter something: ')<tab>print "Please enter something: " to console, and read user input to `var`<eos>
<sos>foo.append(4)<tab>append 4 to list `foo`<eos>
<sos>foo.append([8, 7])<tab>append a list [8, 7] to list `foo`<eos>
<sos>x.insert(2, 77)<tab>insert 77 to index 2 of list `x`<eos>
<sos>plt.savefig('test.png', bbox_inches='tight')<tab>remove white space padding around a saved image `test.png` in matplotlib<eos>
<sos>(listone + listtwo)<tab>concatenate lists `listone` and `listtwo`<eos>
<sos>for item in itertools.chain(listone, listtwo):
    pass<tab>iterate items in lists `listone` and `listtwo`<eos>
<sos>males = df[(df[Gender] == 'Male') & (df[Year] == 2014)]<tab>create dataframe `males` containing data of dataframe `df` where column `Gender` is equal to 'Male' and column `Year` is equal to 2014<eos>
<sos>print('\\')<tab>print backslash<eos>
<sos>df.replace('-', np.nan)<tab>replace '-' in pandas dataframe `df` with `np.nan`<eos>
<sos>df = df.drop('column_name', 1)<tab>delete column 'column_name' from dataframe `df`<eos>
<sos>df.drop(df.columns[[0, 1, 3]], axis=1)<tab>delete 1st, 2nd and 4th columns from dataframe `df`<eos>
<sos>df.drop('column_name', axis=1, inplace=True)<tab>delete a column `column_name` without having to reassign from pandas data frame `df`<eos>
<sos>parser = argparse.ArgumentParser(allow_abbrev=False)<tab>disable abbreviation in argparse<eos>
<sos>feature3 = [d.get('Feature3') for d in df.dic]<tab>extract dictionary values by key 'Feature3' from data frame `df`<eos>
<sos>df.loc[gb.groups['foo'], ('A', 'B')]<tab>get data of column 'A' and column 'B' in dataframe `df` where column 'A' is equal to 'foo'<eos>
<sos>print('[%s, %s, %s]' % (1, 2, 3))<tab>print '[1, 2, 3]'<eos>
<sos>print('[{0}, {1}, {2}]'.format(1, 2, 3))<tab>Display `1 2 3` as a list of string<eos>
<sos>[v for k, v in list(my_dict.items()) if 'Date' in k]<tab>get values from a dictionary `my_dict` whose key contains the string `Date`<eos>
<sos>"""{0.month}/{0.day}/{0.year}""".format(my_date)<tab>None<eos>
<sos>df.drop(('col1', 'a'), axis=1)<tab>drop a single subcolumn 'a' in column 'col1' from a dataframe `df`<eos>
<sos>df.drop('a', level=1, axis=1)<tab>dropping all columns named 'a' from a multiindex 'df', across all level.<eos>
<sos>{_key: _value(_key) for _key in _container}<tab>build dictionary with keys of dictionary `_container` as keys and values of returned value of function `_value` with correlating key as parameter<eos>
<sos>browser.find_element_by_class_name('section-select-all').click()<tab>click on the text button 'section-select-all' using selenium python<eos>
<sos>dict((k, d.get(k, '') + d1.get(k, '')) for k in keys)<tab>combine two dictionaries `d ` and `d1`, concatenate string values with identical `keys`<eos>
<sos>hash(pformat(a)) == hash(pformat(b))<tab>generate unique equal hash for equal dictionaries `a` and `b`<eos>
<sos>list(map(tuple, [['tom', 'cat'], ['jerry', 'mouse'], ['spark', 'dog']]))<tab>convert nested list of lists `[['tom', 'cat'], ['jerry', 'mouse'], ['spark', 'dog']]` into a list of tuples<eos>
<sos>df.groupby(['stock', 'same1', 'same2'], as_index=False)['positions'].sum()<tab>sum the column `positions` along the  other columns `stock`, `same1`, `same2` in a pandas data frame `df`<eos>
<sos>df.groupby(['stock', 'same1', 'same2'])['positions'].sum().reset_index()<tab>None<eos>
<sos>s.upper()<tab>change string `s` to upper case<eos>
<sos>dict(item.split('=') for item in s.split(';'))<tab>split a string `s` by ';' and convert to a dictionary<eos>
<sos>br.addheaders = [('Cookie', 'cookiename=cookie value')]<tab>Add header `('Cookie', 'cookiename=cookie value')` to mechanize browser `br`<eos>
<sos>df['value'] = df['value'].str[0]<tab>set data in column 'value' of dataframe `df` equal to first element of each list<eos>
<sos>df['value'] = df['value'].str.get(0)<tab>get element at index 0 of each list in column 'value' of dataframe `df`<eos>
<sos>df['value'] = df['value'].str.strip('[]')<tab>remove square bracket '[]' from pandas dataframe `df` column 'value'<eos>
<sos>""", """.join(['{}_{}'.format(k, v) for k, v in d.items()])<tab>Get a string with string formatting from dictionary `d`<eos>
<sos>sum(sum(x) for x in lists)<tab>Sum of sums of each list, in a list of lists named 'lists'.<eos>
<sos>any(np.equal(a, [1, 2]).all(1))<tab>Check whether a numpy array `a` contains a given row `[1, 2]`<eos>
<sos>len(set(mylist)) == 1<tab>check if all elements in list `mylist` are the same<eos>
<sos>[map(int, x.split('\t')) for x in s.rstrip().split('\r\n')]<tab>split a string `s` at line breaks `\r\n`<eos>
<sos>t = sorted(list(a.items()), key=lambda x: x[1])<tab>sort a dictionary `a` by values that are list type<eos>
<sos>if ('blabla' in open('example.txt').read()):
    pass<tab>Search for string 'blabla' in txt file 'example.txt'<eos>
<sos>f = open('example.txt')
s = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)
if (s.find('blabla') != (-1)):
    pass<tab>Search for string 'blabla' in txt file 'example.txt'<eos>
<sos>datafile = file('example.txt')
found = False
for line in datafile:
    if (blabla in line):
        return True
return False<tab>Search for string `blabla` in txt file 'example.txt'<eos>
<sos>string2.replace('', string1)[len(string1):-len(string1)]<tab>insert string `string1` after each character of `string2`<eos>
<sos>list(itertools.combinations([1, 2, 3, 4, 5, 6], 2))<tab>getting every possible combination of two elements in a list<eos>
<sos>"""x = {}""".format(x.decode('utf8')).encode('utf8')<tab>get a utf-8 string literal representation of byte string `x`<eos>
<sos>isinstance(x, int)<tab>check if `x` is an integer<eos>
<sos>(type(x) == int)<tab>check if `x` is an integer<eos>
<sos>winsound.PlaySound('sound.wav', winsound.SND_FILENAME)<tab>play the wav file 'sound.wav'<eos>
<sos>[next(it) for _ in range(n)]<tab>create a list containing the `n` next values of generator `it`<eos>
<sos>list(itertools.islice(it, 0, n, 1))<tab>get list of n next values of a generator `it`<eos>
<sos>set(a).intersection(b)<tab>compare two lists in python `a` and `b` and return matches<eos>
<sos>[i for i, j in zip(a, b) if i == j]<tab>None<eos>
<sos>print(''.join(map(str, data)))<tab>convert list `data` into a string of its elements<eos>
<sos>re.match('\\$[0-9]+[^\\$]*$', '$1 off delicious $5 ham.')<tab>match regex pattern '\\$[0-9]+[^\\$]*$' on string '$1 off delicious $5 ham.'<eos>
<sos>importlib.import_module('.c', 'a.b')<tab>import a nested module `c.py` within `b` within `a` with importlib<eos>
<sos>importlib.import_module('a.b.c')<tab>import a module 'a.b.c' with importlib.import_module in python 2<eos>
<sos>a = np.array(a)<tab>Convert array `a` to numpy array<eos>
<sos>soup.find_all('div', class_=re.compile('comment-'))<tab>Find all `div` tags whose classes has the value `comment-` in a beautiful soup object `soup`<eos>
<sos>[[] for _ in range(n)]<tab>a sequence of empty lists of length `n`<eos>
<sos>dict((k, globals()[k]) for k in ('foo', 'bar'))<tab>create dictionary from list of variables 'foo' and 'bar' already defined<eos>
<sos>MyModel.objects.order_by('?')[:2]<tab>get two random records from model 'MyModel' in Django<eos>
<sos>"""Hello {user[name]}""".format(**{'user': {'name': 'Markus'}})<tab>Print a dictionary `{'user': {'name': 'Markus'}}` with string formatting<eos>
<sos>list_dict = {t[0]: t for t in tuple_list}<tab>create a dictionary `list_dict` containing each tuple in list `tuple_list` as values and the tuple's first element as the corresponding key<eos>
<sos>randint(0, 9)<tab>Generate a random integer between 0 and 9<eos>
<sos>random.randint(a, b)<tab>Generate a random integer between `a` and `b`<eos>
<sos>print((random.randint(0, 9)))<tab>Generate random integers between 0 and 9<eos>
<sos>"""""".join(reversed([a[i:i + 2] for i in range(0, len(a), 2)]))<tab>reverse a string `a` by 2 characters at a time<eos>
<sos>pd.pivot_table(df, index=df.index.date, columns=df.index.time, values='Close')<tab>transform time series `df` into a pivot table aggregated by column 'Close' using column `df.index.date` as index and values of column `df.index.time` as columns<eos>
<sos>any(item[2] == 0 for item in items)<tab>check if the third element of all the lists in a list "items" is equal to zero.<eos>
<sos>[x for x in items if x[2] == 0]<tab>Find all the lists from a lists of list 'items' if third element in all sub-lists is '0'<eos>
<sos>sorted(list(dic.items()), key=lambda x: x[1]['Fisher'], reverse=True)<tab>sort dictionary of dictionaries `dic` according to the key 'Fisher'<eos>
<sos>plt.yscale('log', nonposy='clip')<tab>plot a data logarithmically in y axis<eos>
<sos>map(int, re.findall('\\d+', s))<tab>None<eos>
<sos>os.listdir('/home/username/www/')<tab>list the contents of a directory '/home/username/www/'<eos>
<sos>os.listdir('path')<tab>list all the contents of the directory 'path'.<eos>
<sos>pd.concat([distancesDF, datesDF.dates], axis=1)<tab>merge a pandas data frame `distancesDF` and column `dates` in pandas data frame `datesDF` into single<eos>
<sos>[x[0] for x in a]<tab>get value of first index of each element in list `a`<eos>
<sos>[i[0] for i in a]<tab>python how to get every first element in 2 dimensional list `a`<eos>
<sos>re.sub('(?<=[a-z])\\r?\\n', ' ', textblock)<tab>remove line breaks from string `textblock` using regex<eos>
<sos>gzip.open('file.gz', 'rt', encoding='utf-8')<tab>Open gzip-compressed file encoded as utf-8 'file.gz' in text mode<eos>
<sos>set(['a', 'b']).issubset(['b', 'a', 'foo', 'bar'])<tab>test if either of strings `a` or `b` are members of the set of strings, `['b', 'a', 'foo', 'bar']`<eos>
<sos>all(x in ['b', 'a', 'foo', 'bar'] for x in ['a', 'b'])<tab>Check if all the values in a list `['a', 'b']` are present in another list `['b', 'a', 'foo', 'bar']`<eos>
<sos>line.translate(None, '!@#$')<tab>Remove characters "!@#$" from a string `line`<eos>
<sos>line = re.sub('[!@#$]', '', line)<tab>Remove characters "!@#$" from a string `line`<eos>
<sos>string.replace('1', '')<tab>Remove string "1" from string `string`<eos>
<sos>a = a.replace(char, '')<tab>Remove character `char` from a string `a`<eos>
<sos>a = a.replace(char, '')<tab>Remove characters in `b` from a string `a`<eos>
<sos>line = line.translate(string.maketrans('', ''), '!@#$')<tab>Remove characters in '!@#$' from a string `line`<eos>
<sos>pd.concat([df, pd.get_dummies(df, '', '').astype(int)], axis=1)[order]<tab>binarize the values in columns of list `order` in a pandas data frame<eos>
<sos>[3, 4, 1, 2]<tab>store integer 3, 4, 1 and 2 in a list<eos>
<sos>globals()['something'] = 'bob'<tab>define global variable `something` with value `bob`<eos>
<sos>re.sub('([a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))', '\\1 ', text)<tab>insert spaces before capital letters in string `text`<eos>
<sos>print('ex\xe1mple'.upper())<tab>print unicode string `ex\xe1mple` in uppercase<eos>
<sos>[l.split('\\')[-1] for l in list_dirs]<tab>get last element of string splitted by '\\' from list of strings `list_dirs`<eos>
<sos>dict(zip(keys, values))<tab>combine two sequences into a dictionary<eos>
<sos>formatter = logging.Formatter('%(asctime)s;%(levelname)s;%(message)s')<tab>customize the time format in python logging<eos>
<sos>new_string = re.sub('"(\\d+),(\\d+)"', '\\1.\\2', original_string)<tab>Replace comma with dot in a string `original_string` using regex<eos>
<sos>subprocess.call('test.sh otherfunc')<tab>call a function `otherfunc` inside a bash script `test.sh` using subprocess<eos>
<sos>subprocess.Popen(['bash', '-c', '. foo.sh; go'])<tab>None<eos>
<sos>""" """.join(foo.split())<tab>remove multiple spaces in a string `foo`<eos>
<sos>list('{0:0b}'.format(8))<tab>convert decimal 8 to a list of its binary values<eos>
<sos>[int(x) for x in list('{0:0b}'.format(8))]<tab>convert decimal integer 8 to a list of its binary values as elements<eos>
<sos>[int(x) for x in bin(8)[2:]]<tab>convert decimal `8` to binary list<eos>
<sos>dict(zip(my_list, map(my_dictionary.get, my_list)))<tab>get key-value pairs in dictionary `my_dictionary` for all keys in list `my_list` in the order they appear in `my_list`<eos>
<sos>numpy.dstack(numpy.meshgrid(x, y)).reshape(-1, 2)<tab>cartesian product of `x` and `y` array points into single array of 2d points<eos>
<sos>driver.implicitly_wait(60)<tab>selenium wait for driver `driver` 60 seconds before throwing a NoSuchElementExceptions exception<eos>
<sos>driver.switch_to_frame('frameName')<tab>selenium webdriver switch to frame 'frameName'<eos>
<sos>time.strftime('{%Y-%m-%d %H:%M:%S}')<tab>format current date to pattern '{%Y-%m-%d %H:%M:%S}'<eos>
<sos>sorted(['14:10:01', '03:12:08'])<tab>sort list `['14:10:01', '03:12:08']`<eos>
<sos>re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)<tab>find all occurrences of regex pattern '(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)' in string `x`<eos>
<sos>df1.groupby(['key', 'year']).size().reset_index()<tab>remove duplicate rows from dataframe `df1` and calculate their frequency<eos>
<sos>sorted(list(dictionary.items()), key=operator.itemgetter(1))<tab>sort dictionary `dictionary` in ascending order by its values<eos>
<sos>sorted(iter(d.items()), key=lambda x: x[1])<tab>Iterate over dictionary `d` in ascending order of values<eos>
<sos>sorted(list(dictionary.items()), key=lambda x: x[1])<tab>iterate over a python dictionary, ordered by values<eos>
<sos>np.split(a, [-1])<tab>split 1d array `a` into 2d array at the last element<eos>
<sos>df.pivot(index='order', columns='sample')<tab>convert dataframe `df` into a pivot table using column 'order' as index and values of column 'sample' as columns<eos>
<sos>df[(df['A'] > 1) | (df['B'] < -1)]<tab>select all rows from pandas DataFrame 'df' where the value in column 'A' is greater than 1 or less than -1 in column 'B'.<eos>
<sos>[list(a) for a in zip([1, 2, 3], [4, 5, 6], [7, 8, 9])]<tab>Get the zip output as list from the lists `[1, 2, 3]`, `[4, 5, 6]`, `[7, 8, 9]`<eos>
<sos>print(df.loc[df['A'] == 'foo'])<tab>select rows of dataframe `df` whose value for column `A` is `foo`<eos>
<sos>df.loc[df['column_name'] != some_value]<tab>select rows whose column value in column `column_name` does not equal `some_value` in pandas data frame<eos>
<sos>df.loc[~df['column_name'].isin(some_values)]<tab>select rows from a dataframe `df` whose value for column `column_name` is not in `some_values`<eos>
<sos>df.loc[df['column_name'] == some_value]<tab>select all rows whose values in a column `column_name` equals a scalar `some_value` in pandas data frame object `df`<eos>
<sos>print(df.loc[df['B'].isin(['one', 'three'])])<tab>Select rows whose value of the "B" column is "one" or "three" in the DataFrame `df`<eos>
<sos>"""""".join(map(lambda x: x * 7, 'map'))<tab>repeat every character for 7 times in string 'map'<eos>
<sos>os.rmdir()<tab>delete an empty directory<eos>
<sos>shutil.rmtree(path, ignore_errors=False, onerror=None)<tab>recursively delete all contents in directory `path`<eos>
<sos>os.removedirs(name)<tab>recursively remove folder `name`<eos>
<sos>df.loc[len(df)] = ['8/19/2014', 'Jun', 'Fly', '98765']<tab>Add row `['8/19/2014', 'Jun', 'Fly', '98765']` to dataframe `df`<eos>
<sos>glob.glob('*')<tab>list all files in a current directory<eos>
<sos>glob.glob('[!hello]*.txt')<tab>List all the files that doesn't contain the name `hello`<eos>
<sos>glob.glob('hello*.txt')<tab>List all the files that matches the pattern `hello*.txt`<eos>
<sos>eval('20<30')<tab>evaluate the expression '20<30'<eos>
<sos>new_list = [x[:] for x in old_list]<tab>Copy list `old_list` and name it `new_list`<eos>
<sos>"""{:.50f}""".format(float(a[0] / a[1]))<tab>convert scientific notation of variable `a` to decimal<eos>
<sos>df.to_sparse(0)<tab>convert dataframe `df` to integer-type sparse object<eos>
<sos>print([obj.attr for obj in my_list_of_objs])<tab>display attribute `attr` for each object `obj` in list `my_list_of_objs`<eos>
<sos>sum(1 if d['success'] else 0 for d in s)<tab>count the number of True values associated with key 'success' in dictionary `d`<eos>
<sos>sum(d['success'] for d in s)<tab>get the sum of values associated with the key ‘success’ for a list of dictionaries `s`<eos>
<sos>imp.find_module('os')[1]<tab>get complete path of a module named `os`<eos>
<sos>(bool(a) != bool(b))<tab>get logical xor of `a` and `b`<eos>
<sos>((a and (not b)) or ((not a) and b))<tab>get logical xor of `a` and `b`<eos>
<sos>(bool(a) ^ bool(b))<tab>get logical xor of `a` and `b`<eos>
<sos>xor(bool(a), bool(b))<tab>get logical xor of `a` and `b`<eos>
<sos>return (bool(str1) ^ bool(str2))<tab>get the logical xor of two variables `str1` and `str2`<eos>
<sos>my_list.sort(key=operator.itemgetter('name'))<tab>Sort list `my_list` in alphabetical order based on the values associated with key 'name' of each dictionary in the list<eos>
<sos>re.split('\\s*,\\s*|\\s*;\\s*', 'a , b; cdf')<tab>split a string `a , b; cdf`  using both commas and semicolons as delimeters<eos>
<sos>[t.strip() for s in string.split(',') for t in s.split(';')]<tab>Split a string `string` by multiple separators `,` and `;`<eos>
<sos>f = lambda x, y: x + y<tab>make a function `f` that calculates the sum of two integer variables `x` and `y`<eos>
<sos>instancelist = [MyClass() for i in range(29)]<tab>Create list `instancelist` containing 29 objects of type MyClass<eos>
<sos>{f[i + 1]: [f[i], f[i + 2]] for i in range(0, len(f), 3)}<tab>Make a dictionary from list `f` which is in the format of four sets of  "val, key, val"<eos>
<sos>struct.unpack('>q', s)[0]<tab>convert bytes string `s`  to an unsigned integer<eos>
<sos>pd.concat([students, pd.DataFrame(marks)], axis=1)<tab>concatenate a series `students` onto a dataframe `marks` with pandas<eos>
<sos>alist.sort(key=lambda x: x.foo)<tab>Sort list `alist` in ascending order based on each of its elements' attribute `foo`<eos>
<sos>soup.select('div[id$=_answer]')<tab>BeautifulSoup select 'div' elements with an id attribute value ending with sub-string '_answer' in HTML parsed string `soup`<eos>
<sos>linsolve(Matrix(([1, 1, 1, 1], [1, 1, 2, 3])), (x, y, z))<tab>sympy solve matrix of linear equations `(([1, 1, 1, 1], [1, 1, 2, 3]))` with variables `(x, y, z)`<eos>
<sos>{k: bigdict[k] for k in list(bigdict.keys()) & {'l', 'm', 'n'}}<tab>best way to extract subset of key-value pairs with keys matching 'l', 'm', or 'n' from python dictionary object<eos>
<sos>dict((k, bigdict[k]) for k in ('l', 'm', 'n'))<tab>extract subset of key-value pairs with keys as `('l', 'm', 'n')` from dictionary object `bigdict`<eos>
<sos>{k: bigdict.get(k, None) for k in ('l', 'm', 'n')}<tab>Get items from a dictionary `bigdict` where the keys are present in `('l', 'm', 'n')`<eos>
<sos>{k: bigdict[k] for k in ('l', 'm', 'n')}<tab>Extract subset of key value pair for keys 'l', 'm', 'n' from `bigdict` in python 3<eos>
<sos>driver.page_source<tab>Selenium get the entire `driver` page text<eos>
<sos>data[:, ([1, 9])]<tab>extracting column `1` and `9` from array `data`<eos>
<sos>re.sub('\\[.*?\\]', '', 'abcd[e]yth[ac]ytwec')<tab>remove all square brackets from string 'abcd[e]yth[ac]ytwec'<eos>
<sos>root.geometry('500x500')<tab>None<eos>
<sos>re.findall('\\b(?:b+a)+b+\\b', mystring)<tab>find all substrings in string `mystring` composed only of letters `a` and `b` where each `a` is directly preceded and succeeded by `b`<eos>
<sos>str_list = [tuple('{0:.8e}'.format(flt) for flt in sublist) for sublist in lst]<tab>convert list `lst` of tuples of floats to list `str_list` of tuples of strings of floats in scientific notation with eight decimal point precision<eos>
<sos>str_list = [['{0:.8e}'.format(flt) for flt in sublist] for sublist in lst]<tab>convert list of sublists `lst` of floats to a list of sublists `str_list` of strings of integers in scientific notation with 8 decimal points<eos>
<sos>t = tuple(x[0] for x in s)<tab>Create a tuple `t` containing first element of each tuple in tuple `s`<eos>
<sos>datetime.datetime.now().strftime('%a')<tab>obtain the current day of the week in a 3 letter format from a datetime object<eos>
<sos>ord('a')<tab>get the ASCII value of a character 'a' as an int<eos>
<sos>ord('\u3042')<tab>get the ASCII value of a character u'あ' as an int<eos>
<sos>ord()<tab>get the ASCII value of a character as an int<eos>
<sos>json.load(u)<tab>decode JSON string `u` to a dictionary<eos>
<sos>yourdf.drop(['columnheading1', 'columnheading2'], axis=1, inplace=True)<tab>Delete mulitple columns `columnheading1`, `columnheading2` in pandas data frame `yourdf`<eos>
<sos>[s.strip() for s in input().split(',')]<tab>get a list of of elements resulting from splitting user input by commas and stripping white space from each resulting string `s`<eos>
<sos>[int(d) for d in str(bin(x))[2:]]<tab>create a list containing the digits values from binary string `x` as elements<eos>
<sos>max(len(word) for word in i)<tab>get the max string length in list `i`<eos>
<sos>len(max(i, key=len))<tab>get the maximum string length in nested list `i`<eos>
<sos>os.system(my_cmd)<tab>execute os command `my_cmd`<eos>
<sos>mylist.sort(key=lambda x: x.lower())<tab>sort list `mylist` alphabetically<eos>
<sos>mylist.sort(key=str.lower)<tab>sort list `mylist` in alphabetical order<eos>
<sos>mylist.sort()<tab>sort a list of strings 'mylist'.<eos>
<sos>list.sort()<tab>sort a list of strings `list`<eos>
<sos>df.set_index(['Company', 'date'], inplace=True)<tab>Set multi index on columns 'Company' and 'date' of data frame `df` in pandas.<eos>
<sos>getattr(your_obj, x)<tab>get the attribute `x` from object `your_obj`<eos>
<sos>s.split(' ', 1)[1]<tab>remove first word in string `s`<eos>
<sos>workbook = xlsxwriter.Workbook('app/smth1/smth2/Expenses01.xlsx')<tab>save xlsxwriter file in 'app/smth1/smth2/Expenses01.xlsx' path and assign to variable `workbook`<eos>
<sos>workbook = xlsxwriter.Workbook('C:/Users/Steven/Documents/demo.xlsx')<tab>save xlsxwriter file to 'C:/Users/Steven/Documents/demo.xlsx' path<eos>
<sos>pyplot.legend(loc=2, fontsize='x-small')<tab>change legend size to 'x-small' in upper-left location<eos>
<sos>plot.legend(loc=2, prop={'size': 6})<tab>change legend font size with matplotlib.pyplot to 6<eos>
<sos>[l[i:i + n] for i in range(0, len(l), n)]<tab>split list `l` into `n` sized lists<eos>
<sos>[l[i:i + n] for i in range(0, len(l), n)]<tab>split a list `l` into evenly sized chunks `n`<eos>
<sos>df['a'].str.contains('-')<tab>check if character '-' exists in a dataframe `df` cell 'a'<eos>
<sos>re.sub("[^\\w' ]", '', "doesn't this mean it -technically- works?")<tab>remove all non -word, -whitespace, or -apostrophe characters from string `doesn't this mean it -technically- works?`<eos>
<sos>print(re.findall('\\d+', '\n'.join(re.findall('\xab([\\s\\S]*?)\xbb', text))))<tab>find all digits between two characters `\xab` and `\xbb`in a string `text`<eos>
<sos>monthly_mean.reset_index().plot(x='index', y='A')<tab>plot data of column 'index' versus column 'A' of dataframe `monthly_mean` after resetting its index<eos>
<sos>subprocess.check_output('echo "foo"', shell=True)<tab>get the output of a subprocess command `echo "foo"` in command line<eos>
<sos>[x.encode('UTF8') for x in EmployeeList]<tab>Encode each value to 'UTF8' in the list `EmployeeList`<eos>
<sos>pandas.concat([df['foo'].dropna(), df['bar'].dropna()]).reindex_like(df)<tab>combine two columns `foo` and `bar` in a pandas data frame<eos>
<sos>list(range(9))<tab>generate a list of consecutive integers from 0 to 8<eos>
<sos>"""""".join(chr(i) for i in myintegers)<tab>convert list `myintegers` into a unicode string<eos>
<sos>super(Executive, self).__init__(*args)<tab>inherit from class `Executive`<eos>
<sos>[item for item in my_sequence if item != 'item']<tab>Remove the string value `item` from a list of strings `my_sequence`<eos>
<sos>random.choice(foo)<tab>randomly select an item from list `foo`<eos>
<sos>set(['a', 'b']).issubset(['a', 'b', 'c'])<tab>check if all of the following items in list `['a', 'b']` are in a list `['a', 'b', 'c']`<eos>
<sos>set(['a', 'b']).issubset(set(l))<tab>Check if all the items in a list `['a', 'b']` exists in another list `l`<eos>
<sos>p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)
grep_stdout = p.communicate(input='one\ntwo\nthree\nfour\nfive\nsix\n')[0]<tab>set the stdin of the process 'grep f' to be b'one\ntwo\nthree\nfour\nfive\nsix\n'<eos>
<sos>p = subprocess.Popen(['grep', 'f'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)
p.stdin.write('one\ntwo\nthree\nfour\nfive\nsix\n')
p.communicate()[0]
p.stdin.close()<tab>set the stdin of the process 'grep f' to be 'one\ntwo\nthree\nfour\nfive\nsix\n'<eos>
<sos>[list(t) for t in zip(*list_of_tuples)]<tab>to convert a list of tuples `list_of_tuples` into list of lists<eos>
<sos>zip(*list_of_tuples)<tab>group a list `list_of_tuples` of tuples by values<eos>
<sos>pd.merge(y, x, on='k')[['a', 'b', 'y']]<tab>merge pandas dataframe `x` with columns 'a' and 'b' and dataframe `y` with column 'y'<eos>
<sos>[item.strip() for item in my_string.split(',')]<tab>Split string with comma (,) and remove whitespace from a string 'my_string'<eos>
<sos>print((obj.__dict__))<tab>Get all object attributes of object `obj`<eos>
<sos>dir()<tab>Get all object attributes of an object<eos>
<sos>dir()<tab>Get all object attributes of an object<eos>
<sos>window.set_position(Gtk.WindowPosition.CENTER)<tab>pygobject center window `window`<eos>
<sos>plt.rc('font', **{'size': '30'})<tab>change the size of the sci notation to '30' above the y axis in matplotlib `plt`<eos>
<sos>df.isnull().values.any()<tab>check if datafram `df` has any NaN vlaues<eos>
<sos>some_func(*params)<tab>unpack the arguments out of list `params` to function `some_func`<eos>
<sos>urllib.parse.unquote(h.path.encode('utf-8')).decode('utf-8')<tab>decode encodeuricomponent in GAE<eos>
<sos>(trace_df['ratio'] > 0).mean()<tab>get proportion of rows in dataframe `trace_df` whose values for column `ratio` are greater than 0<eos>
<sos>emaillist = '\n'.join(item[0] for item in queryresult)<tab>convert a set of tuples `queryresult` to a string `emaillist`<eos>
<sos>[item[0] for item in queryresult]<tab>convert a set of tuples `queryresult` to a list of strings<eos>
<sos>emaillist = '\n'.join([item[0] for item in queryresult])<tab>convert a list of tuples `queryresult` to a string from the first indexes.<eos>
<sos>print(('focus object class:', window2.focus_get().__class__))<tab>get the widget which has currently the focus in tkinter instance `window2`<eos>
<sos>a = [0] * 10000<tab>Initialize a list `a` with `10000` items and each item's value `0`<eos>
<sos>print(' '.join(sorted(set(words), key=words.index)))<tab>Keep only unique words in list of words `words` and join into string<eos>
<sos>random.sample(range(1, 50), 6)<tab>generate 6 random numbers between 1 and 50<eos>
<sos>random.sample(range(1, 50), 6)<tab>generate six unique random numbers in the range of 1 to 49.<eos>
<sos>{k.lower(): v.lower() for k, v in list({'My Key': 'My Value'}.items())}<tab>lowercase keys and values in dictionary `{'My Key': 'My Value'}`<eos>
<sos>dict((k.lower(), v) for k, v in {'My Key': 'My Value'}.items())<tab>lowercase all keys and values in dictionary `{'My Key': 'My Value'}`<eos>
<sos>dict((k.lower(), v.lower()) for k, v in {'My Key': 'My Value'}.items())<tab>Convert each key,value pair in a dictionary `{'My Key': 'My Value'}` to lowercase<eos>
<sos>[sorted(item) for item in data]<tab>sorting the lists in list of lists `data`<eos>
<sos>names = list(map(lambda x: x[0], cursor.description))<tab>SQLite get a list of column names from cursor object `cursor`<eos>
<sos>os.path.abspath(__file__)<tab>get the absolute path of a running python script<eos>
<sos>sorted(matrix, key=itemgetter(1))<tab>sort 2d array `matrix` by row with index 1<eos>
<sos>[index for index, letter in enumerate(word) if letter == 'e']<tab>Get all indexes of a letter `e` from a string `word`<eos>
<sos>print(str(x).decode('raw_unicode_escape'))<tab>decode utf-8 code `x` into a raw unicode literal<eos>
<sos>re.findall('\\w', 'abcdefg')<tab>split string 'abcdefg' into a list of characters<eos>
<sos>os.path.isfile(fname)<tab>check whether a file `fname` exists<eos>
<sos>my_file = Path('/path/to/file')
if my_file.is_file():
    pass<tab>check whether file "/path/to/file" exists<eos>
<sos>os.path.exists(file_path)<tab>check whether file `file_path` exists<eos>
<sos>print(os.path.isfile('/etc/password.txt'))<tab>check whether a file "/etc/password.txt" exists<eos>
<sos>print(os.path.isfile('/etc'))<tab>check whether a file "/etc" exists<eos>
<sos>print(os.path.exists('/does/not/exist'))<tab>check whether a path "/does/not/exist" exists<eos>
<sos>print(os.path.isfile('/does/not/exist'))<tab>check whether a file "/does/not/exist" exists<eos>
<sos>print(os.path.exists('/etc'))<tab>check whether a path "/etc" exists<eos>
<sos>print(os.path.exists('/etc/password.txt'))<tab>check whether a path "/etc/password.txt" exists<eos>
<sos>"""a;bcd,ef g""".replace(';', ' ').replace(',', ' ').split()<tab>split string "a;bcd,ef g" on delimiters ';' and ','<eos>
<sos>list(i for i in range(3))<tab>get a list each value `i` in the implicit tuple `range(3)`<eos>
<sos>writer.writeheader()<tab>add field names as headers in csv constructor `writer`<eos>
<sos>[(a, b, c) for a, (b, c) in l]<tab>flatten a tuple `l`<eos>
<sos>"""0x{0:08X}""".format(3652458)<tab>convert 3652458 to string represent a 32bit hex number<eos>
<sos>[(v, k) for k, v in list(d.items())]<tab>convert a python dictionary `d` to a list of tuples<eos>
<sos>[(v, k) for k, v in d.items()]<tab>convert dictionary of pairs `d` to a list of tuples<eos>
<sos>[(v, k) for k, v in a.items()]<tab>convert python 2 dictionary `a` to a list of tuples where the value is the first tuple element and the key is the second tuple element<eos>
<sos>[(k, v) for k, v in a.items()]<tab>convert a python dictionary 'a' to a list of tuples<eos>
<sos>[int(x, 16) for x in ['BB', 'A7', 'F6', '9E']]<tab>convert a list of hex byte strings `['BB', 'A7', 'F6', '9E']` to a list of hex integers<eos>
<sos>[int(x, 16) for x in L]<tab>convert the elements of list `L` from hex byte strings to hex integers<eos>
<sos>var1, var2 = input('Enter two numbers here: ').split()<tab>assign values to two variables, `var1` and `var2` from user input response to `'Enter two numbers here: ` split on whitespace<eos>
<sos>Test.objects.filter(actions__contains=[{'fixed_key_1': 'foo2'}])<tab>Filter a json from a key-value pair as `{'fixed_key_1': 'foo2'}` in Django<eos>
<sos>itertools.product(list(range(2)), repeat=4)<tab>create a list containing a four elements long tuples of permutations of binary values<eos>
<sos>(datetime.now() - timedelta(1)).strftime('%Y-%m-%d')<tab>get yesterday's date as a string in `YYYY-MM-DD` format using timedelta<eos>
<sos>np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])<tab>Get the dot product of matrix `[1,0,0,1,0,0]` and matrix `[[0,1],[1,1],[1,0],[1,0],[1,1],[0,1]]`<eos>
<sos>df['date'] = pd.to_datetime(df['date'], format='%d%b%Y')<tab>convert date strings in pandas dataframe column`df['date']` to pandas timestamps using the format '%d%b%Y'<eos>
<sos>sys.path.insert(0, '/path/to/application/app/folder')
import file<tab>Importing file `file` from folder '/path/to/application/app/folder'<eos>
<sos>x.reset_index().merge(y, how='left', on='state', sort=False).sort('index')<tab>do a `left` merge of dataframes `x` and `y` on the column `state` and sort by `index`<eos>
<sos>json.loads(request.POST.get('mydata', '{}'))<tab>Create a default empty json object if no json is available in request parameter `mydata`<eos>
<sos>list(zip(*((iter([1, 2, 3, 4, 5, 6, 7, 8, 9]),) * 3)))<tab>get a list of tuples of every three consecutive items in list `[1, 2, 3, 4, 5, 6, 7, 8, 9]`<eos>
<sos>list(grouper(2, [1, 2, 3, 4, 5, 6, 7]))<tab>slice list `[1, 2, 3, 4, 5, 6, 7]` into lists of two elements each<eos>
<sos>[input[i:i + n] for i in range(0, len(input), n)]<tab>None<eos>
<sos>keys.sort(key=lambda x: map(int, x.split('.')))<tab>Sort list `keys` based on its elements' dot-seperated numbers<eos>
<sos>keys.sort(key=lambda x: [int(y) for y in x.split('.')])<tab>Sort a list of integers `keys` where each value is in string format<eos>
<sos>img.transpose(2, 0, 1).reshape(3, -1)<tab>convert a 3d array `img` of dimensions 4x2x3 to a 2d array   of dimensions 3x8<eos>
<sos>df['BrandName'].replace(['ABC', 'AB'], 'A')<tab>replacing 'ABC' and 'AB' values in column 'BrandName' of dataframe `df` with 'A'<eos>
<sos>df['BrandName'] = df['BrandName'].replace(['ABC', 'AB'], 'A')<tab>replace values `['ABC', 'AB']` in a column 'BrandName' of  pandas dataframe `df` with another value 'A'<eos>
<sos>df.sub(df.mean(axis=1), axis=0)<tab>Subtract the mean of each row in dataframe `df` from the corresponding row's elements<eos>
<sos>"""""".join([i for i in s if i.isalpha()])<tab>remove all non-alphabet chars from string `s`<eos>
<sos>l = (int(x) for x in s.split())<tab>split a string `s` into integers<eos>
<sos>"""42 0""".split()<tab>split a string `42 0` by white spaces.<eos>
<sos>map(int, '42 0'.split())<tab>None<eos>
<sos>[i for i, elem in enumerate(bool_list, 1) if elem]<tab>get indexes of all true boolean values from a list `bool_list`<eos>
<sos>data.groupby(data['date'].map(lambda x: x.year))<tab>group dataframe `data` entries by year value of the date in column 'date'<eos>
<sos>np.in1d(b, a).nonzero()[0]<tab>Get the indices in array `b` of each element appearing in array `a`<eos>
<sos>time.strftime('%l:%M%p %z on %b %d, %Y')<tab>display current time in readable format<eos>
<sos>ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)<tab>rotate x-axis text labels of plot `ax` 45 degrees<eos>
<sos>"""""".join(['x', 'x', 'x'])<tab>append array of strings `['x', 'x', 'x']` into one string<eos>
<sos>x[(np.arange(x.shape[0]) != 1), :, :]<tab>retrieve all items in an numpy array 'x' except the item of the index 1<eos>
<sos>print(item['name'])<tab>pull a value with key 'name' from a json object `item`<eos>
<sos>result = sys.stdin.read()<tab>read a file from redirected stdin and save to variable `result`<eos>
<sos>"""""".join(soup.findAll(text=True))<tab>Get all the texts without tags from beautiful soup object `soup`<eos>
<sos>data[data['Value'] == True]<tab>extract all rows from dataframe `data` where the value of column 'Value' is True<eos>
<sos>"""""".join(set(foo))<tab>removing duplicate characters from a string variable "foo"<eos>
<sos>sorted(Profile.objects.all(), key=lambda p: p.reputation)<tab>sort objects in model `Profile` based on Theirs `reputation` attribute<eos>
<sos>df.values.flatten()<tab>flatten a dataframe df to a list<eos>
<sos>users.sort(key=lambda x: order.index(x['id']))<tab>sort list `users` using values associated with key 'id' according to elements in list `order`<eos>
<sos>users.sort(key=lambda x: order.index(x['id']))<tab>sort a python list of dictionaries `users` by a given list `order` of ids 'id' with the desired order<eos>
<sos>r = requests.get('<MY_URI>', headers={'Authorization': 'TOK:<MY_TOKEN>'})<tab>request URI '<MY_URI>' and pass authorization token 'TOK:<MY_TOKEN>' to the header<eos>
<sos>print('"Hello,\\nworld!"'.decode('string_escape'))<tab>un-escape a backslash-escaped string in `Hello,\\nworld!`<eos>
<sos>re.findall('a*?bc*?', 'aabcc', re.DOTALL)<tab>match regex pattern 'a*?bc*?' on string 'aabcc' with DOTALL enabled<eos>
<sos>a.shape[1]<tab>get second array column length of array `a`<eos>
<sos>d.apply(lambda row: min([row['A'], row['B']]) - row['C'], axis=1)<tab>use operations like max/min within a row to a dataframe 'd' in pandas<eos>
<sos>"""abcdabcva""".count('ab')<tab>count number of occurrences of a substring 'ab' in a string "abcdabcva"<eos>
<sos>[d['key'] for d in l if 'key' in d]<tab>get a list of values with key 'key' from a list of dictionaries `l`<eos>
<sos>[d['key'] for d in l]<tab>get a list of values for key 'key' from a list of dictionaries `l`<eos>
<sos>[d['key'] for d in l]<tab>get a list of values for key "key" from a list of dictionaries in `l`<eos>
<sos>l1.sort(key=lambda x: int(x[0]))<tab>order a list of lists `l1` by the first value<eos>
<sos>sorted([[1, 'mike'], [1, 'bob']])<tab>order a list of lists `[[1, 'mike'], [1, 'bob']]` by the first value of individual list<eos>
<sos>"""Abc""".translate(maketrans('abcABC', 'defDEF'))<tab>replace a string `Abc` in case sensitive way using maketrans<eos>
<sos>"""<br/>""".join([('%s:: %s' % (key, value)) for key, value in list(d.items())])<tab>dictionary `d` to string, custom format<eos>
<sos>self.writer.writerow([str(s).encode('utf-8') for s in row])<tab>None<eos>
<sos>os.system('cls')<tab>clear terminal screen on windows<eos>
<sos>os.system('clear')<tab>clear the terminal screen in Linux<eos>
<sos>os.system('tcsh your_own_script')<tab>execute external commands/script `your_own_script` with csh instead of bash<eos>
<sos>os.system("zsh -c 'echo $0'")<tab>execute command 'echo $0' in Z shell<eos>
<sos>[dict(d, count=n) for d, n in zip(l1, l2)]<tab>update a list `l1` dictionaries with a key `count` and value from list `l2`<eos>
<sos>[sum(x) for x in zip(*l)]<tab>create a list with the sum of respective elements of the tuples of list `l`<eos>
<sos>map(sum, zip(*l))<tab>sum each value in a list `l` of tuples<eos>
<sos>np.count_nonzero(~np.isnan(data))<tab>count the number of non-nan elements in a numpy ndarray matrix `data`<eos>
<sos>map(list, zip(*main_list))<tab>Convert each list in list `main_list` into a tuple<eos>
<sos>request.POST.get('title', '')<tab>django get the value of key 'title' from POST request `request` if exists, else return empty string ''<eos>
<sos>"""test.mp3""".endswith(('.mp3', '.avi'))<tab>check if string `test.mp3` ends with one of the strings from a tuple `('.mp3', '.avi')`<eos>
<sos>re.findall('\\[[^\\]]*\\]|"[^"]*"|\\S+', s)<tab>split a string 's' by space while ignoring spaces within square braces and quotes.<eos>
<sos>data.apply(lambda x: sorted(x, 3))<tab>get biggest 3 values from each column of the pandas dataframe `data`<eos>
<sos>os.chdir('C:/Users/Name/Desktop')<tab>permanently set the current directory to the 'C:/Users/Name/Desktop'<eos>
<sos>re.findall('\\$([^$]*)\\$', string)<tab>get all characters between two `$` characters in string `string`<eos>
<sos>re.findall('\\$(.*?)\\$', '$sin (x)$ is an function of x')<tab>getting the string between 2 '$' characters in '$sin (x)$ is an function of x'<eos>
<sos>datetime.datetime.strptime(str_date, '%m/%d/%Y').date().isoformat()<tab>Format a date object `str_data` into iso fomrat<eos>
<sos>A[[0, 1], [0, 1]]<tab>get element at index 0 of first row and element at index 1 of second row in array `A`<eos>
<sos>a[np.arange(3), (0, 1, 0)]<tab>subset numpy array `a` by column and row, returning the values from the first row, first column and the second row, second column and the third row, first column.<eos>
<sos>[k for k, v in dictA.items() if v.count('duck') > 1]<tab>Get a list of all keys from dictionary `dictA` where the number of occurrences of value `duck` in that key is more than `1`<eos>
<sos>[[2, 3, 4], [2, 3, 4], [2, 3, 4]]<tab>Create sub matrix of a list of lists `[[2, 3, 4], [2, 3, 4], [2, 3, 4]]` (without numpy)<eos>
<sos>print(arr[1, 1])<tab>get an element at index `[1,1]`in a numpy array `arr`<eos>
<sos>quadmesh.set_clim(vmin=0, vmax=15)<tab>Set colorbar range from `0` to `15` for pyplot object `quadmesh` in matplotlib<eos>
<sos>my_data = genfromtxt('my_file.csv', delimiter=',')<tab>read csv file 'my_file.csv' into numpy array<eos>
<sos>df = pd.read_csv('myfile.csv', sep=',', header=None)<tab>read csv file 'myfile.csv' into array<eos>
<sos>np.genfromtxt('myfile.csv', delimiter=',')<tab>read csv file 'myfile.csv' into array<eos>
<sos>np.genfromtxt('myfile.csv', delimiter=',', dtype=None)<tab>read csv file 'myfile.csv' into array<eos>
<sos>my_string.splitlines()[0]<tab>read the first line of a string `my_string`<eos>
<sos>my_string.split('\n', 1)[0]<tab>None<eos>
<sos>df.values.tolist()<tab>generate a list from a pandas dataframe `df` with the column name and column values<eos>
<sos>re.sub('\\*\\*+', '*', text)<tab>Replace repeated instances of a character '*' with a single instance in a string 'text'<eos>
<sos>re.sub('\\*+', '*', text)<tab>replace repeated instances of "*" with a single instance of "*"<eos>
<sos>dict((k, v * dict2[k]) for k, v in list(dict1.items()) if k in dict2)<tab>multiply values of dictionary `dict` with their respective values in dictionary `dict2`<eos>
<sos>return ''.join(random.choice(string.lowercase) for i in range(length))<tab>Get a random string of length `length`<eos>
<sos>sum(len(x) for x in list(food_colors.values()))<tab>Get total number of values in a nested dictionary `food_colors`<eos>
<sos>sum(len(v) for v in food_colors.values())<tab>count all elements in a nested dictionary `food_colors`<eos>
<sos>all(a_list)<tab>apply logical operator 'AND' to all elements in list `a_list`<eos>
<sos>"""""".join(c for c in text if c not in 'aeiouAEIOU')<tab>removing vowel characters 'aeiouAEIOU' from string `text`<eos>
<sos>[(x / y) for x, y in zip(a, b)]<tab>Divide elements in list `a` from elements at the same index in list `b`<eos>
<sos>re.findall('abc(de)fg(123)', 'abcdefg123 and again abcdefg123')<tab>match regex 'abc(de)fg(123)' on string 'abcdefg123 and again abcdefg123'<eos>
<sos>df.groupby('type').apply(lambda x: np.mean(np.log2(x['v'])))<tab>apply function `log2` to the grouped values by 'type' in dataframe `df`<eos>
<sos>[key for key, value in list(my_dict.items()) if set(value).intersection(lst)]<tab>get geys of dictionary `my_dict` that contain any values from list `lst`<eos>
<sos>[key for item in lst for key, value in list(my_dict.items()) if item in value]<tab>get list of keys in dictionary `my_dict` whose values contain values from list `lst`<eos>
<sos>c = [[(i + j) for i, j in zip(e, b)] for e in a]<tab>Sum elements of tuple `b` to their respective elements of each tuple in list `a`<eos>
<sos>os.path.commonprefix(['/usr/var', '/usr/var2/log'])<tab>get the common prefix from comparing two absolute paths '/usr/var' and '/usr/var2/log'<eos>
<sos>print(os.path.relpath('/usr/var/log/', '/usr/var'))<tab>get relative path of path '/usr/var' regarding path '/usr/var/log/'<eos>
<sos>grouped.filter(lambda x: len(x) > 1)<tab>filter dataframe `grouped` where the length of each group `x` is bigger than 1<eos>
<sos>sorted(list(myDict.items()), key=lambda e: e[1][2])<tab>sort dictionary of lists `myDict` by the third item in each list<eos>
<sos>"""hello {name}, how are you {name}, welcome {name}""".format(name='john')<tab>Format string `hello {name}, how are you {name}, welcome {name}` to be interspersed by `name` three times, specifying the value as `john` only once<eos>
<sos>df.reindex(['Z', 'C', 'A'])<tab>reorder indexed rows `['Z', 'C', 'A']` based on a list in pandas data frame `df`<eos>
<sos>any(isinstance(el, list) for el in input_list)<tab>check if any values in a list `input_list` is a list<eos>
<sos>len(items)<tab>get the size of list `items`<eos>
<sos>len([1, 2, 3])<tab>get the size of a list `[1,2,3]`<eos>
<sos>items.__len__()<tab>get the size of object `items`<eos>
<sos>len()<tab>function to get the size of object<eos>
<sos>len(s)<tab>get the size of list `s`<eos>
<sos>df.sort(axis=1, ascending=False)<tab>sort each row in a pandas dataframe `df` in descending order<eos>
<sos>df.sort(df.columns, axis=1, ascending=False)<tab>None<eos>
<sos>df.groupby(['col5', 'col2']).size().groupby(level=1).max()<tab>get count of rows in each series grouped by column 'col5' and column 'col2' of dataframe `df`<eos>
<sos>'x' in ['x', 'd', 'a', 's', 'd', 's']<tab>check if string 'x' is  in list `['x', 'd', 'a', 's', 'd', 's']`<eos>
<sos>mydict.pop('key', None)<tab>Delete an item with key "key" from `mydict`<eos>
<sos>del mydict[key]<tab>Delete an item with key `key` from `mydict`<eos>
<sos>try:
    del mydict[key]
except KeyError:
    pass
try:
    del mydict[key]
except KeyError:
    pass<tab>Delete an item with key `key` from `mydict`<eos>
<sos>parser.add_argument('input', nargs='+')<tab>specify multiple positional arguments with argparse<eos>
<sos>pyplot.plot(x, y, color='#112233')<tab>Plot using the color code `#112233` in matplotlib pyplot<eos>
<sos>re.sub('<[^<]+?>', '', text)<tab>strip html from strings<eos>
<sos>a[np.in1d(a, b)]<tab>align values in array `b` to the order of corresponding values in array `a`<eos>
<sos>"""jvm.args= -Dappdynamics.com=true, -Dsomeotherparam=false,""".split('=', 1)<tab>split string "jvm.args= -Dappdynamics.com=true, -Dsomeotherparam=false," on the first occurrence of delimiter '='<eos>
<sos>print('[%s]' % ', '.join('%.3f' % val for val in list))<tab>print numbers in list `list` with precision of 3 decimal places<eos>
<sos>print('[' + ', '.join('%5.3f' % v for v in l) + ']')<tab>format print output of list of floats `l` to print only up to 3 decimal points<eos>
<sos>print([('%5.3f' % val) for val in l])<tab>print a list of floating numbers `l` using string formatting<eos>
<sos>os.chdir('..')<tab>Change the current directory one level up<eos>
<sos>print(text.encode('windows-1252'))<tab>print a unicode string `text`<eos>
<sos>struct.unpack('d', struct.pack('Q', int(s2, 0)))[0]<tab>convert string representation `s2` of binary string rep of integer to floating point number<eos>
<sos>float(int('-0b1110', 0))<tab>convert a binary '-0b1110' to a float number<eos>
<sos>struct.unpack('d', b8)[0]<tab>convert a binary `b8` to a float number<eos>
<sos>df.colour.value_counts().plot(kind='bar')<tab>plot a bar graph from the column 'color' in the DataFrame 'df'<eos>
<sos>df.groupby('colour').size().plot(kind='bar')<tab>plot categorical data in series `df` with kind `bar` using pandas and matplotlib<eos>
<sos>line.strip().split(' ')<tab>strip and split each line `line` on white spaces<eos>
<sos>df.groupby(lambda idx: 0).agg(['mean', 'std'])<tab>apply functions `mean` and `std` to each column in dataframe `df`<eos>
<sos>sorted(list(tag_weight.items()), key=lambda x: int(x[1]), reverse=True)<tab>sort dictionary `tag_weight` in reverse order by values cast to integers<eos>
<sos>int(math.ceil(x)) - 1<tab>find the largest integer less than `x`<eos>
<sos>if (not myString):
    pass<tab>check if the string `myString` is empty<eos>
<sos>if (not some_string):
    pass<tab>check if string `some_string` is empty<eos>
<sos>if (not my_string):
    pass<tab>check if string `my_string` is empty<eos>
<sos>if some_string:
    pass<tab>check if string `my_string` is empty<eos>
<sos>it = iter(sorted(d.items()))<tab>iterate over a dictionary `d` in sorted order<eos>
<sos>for (key, value) in sorted(d.items()):
    pass<tab>iterate over a dictionary `d` in sorted order<eos>
<sos>return sorted(dict.items())<tab>iterate over a dictionary `dict` in sorted order<eos>
<sos>return iter(sorted(dict.items()))<tab>iterate over a dictionary `dict` in sorted order<eos>
<sos>for (k, v) in sorted(foo.items()):
    pass<tab>iterate over a dictionary `foo` in sorted order<eos>
<sos>for k in sorted(foo.keys()):
    pass<tab>iterate over a dictionary `foo` sorted by the key<eos>
<sos>last = len(s) - s[::-1].index(x) - 1<tab>assign the index of the last occurence of `x` in list `s` to the variable `last`<eos>
<sos>str1 = ''.join(list1)<tab>concatenating values in `list1` to a string<eos>
<sos>' '.join((str(x) for x in L))<tab>concatenating values in list `L` to a string, separate by space<eos>
<sos>str1 = ''.join((str(e) for e in list1))<tab>concatenating values in `list1` to a string<eos>
<sos>makeitastring = ''.join(map(str, L))<tab>concatenating values in list `L` to a string<eos>
<sos>[x for x in L if x is not None]<tab>remove None value from list `L`<eos>
<sos>random.choice([1, 2, 3])<tab>select a random element from array `[1, 2, 3]`<eos>
<sos>x = [[None for _ in range(5)] for _ in range(6)]<tab>creating a 5x6 matrix filled with `None` and save it as `x`<eos>
<sos>A[(np.random.choice(A.shape[0], 2, replace=False)), :]<tab>create a new 2D array with 2 random rows from array `A`<eos>
<sos>A[(np.random.randint(A.shape[0], size=2)), :]<tab>create a new 2 dimensional array containing two random rows from array `A`<eos>
<sos>df.groupby(df.index).sum()<tab>combining rows in pandas by adding their values<eos>
<sos>root.findall('{http://www.w3.org/2002/07/owl#}Class')<tab>find all `owl:Class` tags by parsing xml with namespace<eos>
<sos>"""""".join(random.choice(string.lowercase) for x in range(X))<tab>generate a random string of length `x`  containing lower cased ASCII letters<eos>
<sos>sys.path.append('/path/to/2014_07_13_test')<tab>add a path `/path/to/2014_07_13_test` to system path<eos>
<sos>int(round(x))<tab>round number `x` to nearest integer<eos>
<sos>h = int(round(h))<tab>round number `h` to nearest integer<eos>
<sos>round(32.268907563, 3)<tab>round number 32.268907563 up to 3 decimal points<eos>
<sos>round(value, significantDigit)<tab>round number `value` up to `significantDigit` decimal places<eos>
<sos>round(1.0005, 3)<tab>round number 1.0005 up to 3 decimal places<eos>
<sos>round(2.0005, 3)<tab>round number 2.0005 up to 3 decimal places<eos>
<sos>round(3.0005, 3)<tab>round number 3.0005 up to 3 decimal places<eos>
<sos>round(4.0005, 3)<tab>round number 4.0005 up to 3 decimal places<eos>
<sos>round(8.005, 2)<tab>round number 8.005 up to 2 decimal places<eos>
<sos>round(7.005, 2)<tab>round number 7.005 up to 2 decimal places<eos>
<sos>round(6.005, 2)<tab>round number 6.005 up to 2 decimal places<eos>
<sos>round(1.005, 2)<tab>round number 1.005 up to 2 decimal places<eos>
<sos>df['Cat1'].fillna(df['Cat2'])<tab>fill missing value in one column 'Cat1' with the value of another column 'Cat2'<eos>
<sos>logging.info('date=%s', date)<tab>convert the argument `date` with string formatting in logging<eos>
<sos>logging.info('date={}'.format(date))<tab>Log message of level 'info' with value of `date` in the message<eos>
<sos>{k: int(v) for k, v in d.items()}<tab>convert values in dictionary `d` into integers<eos>
<sos>map(sum, zip(*lists))<tab>sum elements at the same index of each list in list `lists`<eos>
<sos>s.decode('hex')<tab>Convert a string `s` containing hex bytes to a hex string<eos>
<sos>binascii.a2b_hex(s)<tab>convert a string `s` containing hex bytes to a hex string<eos>
<sos>connection.send('HTTP/1.0 200 established\r\n\r\n')<tab>send data 'HTTP/1.0 200 OK\r\n\r\n' to socket `connection`<eos>
<sos>connection.send('HTTP/1.0 200 OK\r\n\r\n')<tab>send data 'HTTP/1.0 200 OK\r\n\r\n' to socket `connection`<eos>
<sos>df['x']['C'] = 10<tab>set the value of cell `['x']['C']` equal to 10 in dataframe `df`<eos>
<sos>np.sqrt(np.square(df).sum(axis=1))<tab>normalize the dataframe `df` along the rows<eos>
<sos>sorted(set(my_list))<tab>remove identical items from list `my_list` and sort it alphabetically<eos>
<sos>max(enumerate(a), key=lambda x: x[1])[0]<tab>find the index of the element with the maximum value from a list 'a'.<eos>
<sos>[d['Name'] for d in thisismylist]<tab>create a list where each element is a value of the key 'Name' for each dictionary `d` in the list `thisismylist`<eos>
<sos>[(d['Name'], d['Age']) for d in thisismylist]<tab>create a list of tuples with the values of keys 'Name' and 'Age' from each dictionary `d` in the list `thisismylist`<eos>
<sos>model.objects.all().order_by('?')[0]<tab>grab one random item from a database `model` in django/postgresql<eos>
<sos>os.system('script2.py 1')<tab>run python script 'script2.py' from another python script, passing in 1 as an argument<eos>
<sos>re.findall('\\w+(?:-\\w+)+', text)<tab>python regex for hyphenated words in `text`<eos>
<sos>parser.add_argument('--conf', nargs=2, action='append')<tab>create variable key/value pairs with argparse<eos>
<sos>random.sample(list(range(1, 16)), 3)<tab>Get `3` unique items from a list<eos>
<sos>strings.sort(key=lambda str: re.sub('.*%(.).*', '\\1', str))<tab>sort list `strings` in alphabetical order based on the letter after percent character `%` in each element<eos>
<sos>strings.sort(key=lambda str: re.sub('.*%', '', str))<tab>sort a list of strings `strings` based on regex match<eos>
<sos>listy = [[] for i in range(3)]<tab>Create list `listy` containing 3 empty lists<eos>
<sos>A = np.array(sorted(A, key=tuple))<tab>sort numpy float array `A` column by column<eos>
<sos>[(x + y) for x in '12345' for y in 'ab']<tab>Get a list from two strings `12345` and `ab` with values as each character concatenated<eos>
<sos>' Hello '.strip()<tab>trim string " Hello "<eos>
<sos>myString.strip()<tab>trim string `myString `<eos>
<sos>' Hello '.strip()<tab>Trimming a string " Hello "<eos>
<sos>' Hello'.strip()<tab>Trimming a string " Hello"<eos>
<sos>'Bob has a cat'.strip()<tab>Trimming a string "Bob has a cat"<eos>
<sos>'          Hello        '.strip()<tab>Trimming a string "          Hello        "<eos>
<sos>str.strip()<tab>Trimming a string `str`<eos>
<sos>myString.strip('\n')<tab>Trimming "\n" from string `myString`<eos>
<sos>myString.lstrip('\n\r')<tab>left trimming "\n\r" from string `myString`<eos>
<sos>myString.rstrip('\n\t')<tab>right trimming "\n\t" from string `myString`<eos>
<sos>'  Hello\n'.strip(' ')<tab>Trimming a string "  Hello\n" by space<eos>
<sos>sorted(unsorted, key=lambda element: (element[1], element[2]))<tab>sort a list of tuples 'unsorted' based on two elements, second and third<eos>
<sos>print(content.decode('utf8'))<tab>decode string `content` to UTF-8 code<eos>
<sos>np.ma.array(np.tile(arr, 2).reshape(2, 3), mask=~cond).argmax(axis=1)<tab>find the index of the maximum value in the array `arr` where the boolean condition in array `cond` is true<eos>
<sos>pd.to_datetime(df.ID.str[1:-3])<tab>convert a dataframe `df`'s column `ID` into datetime, after removing the first and last 3 letters<eos>
<sos>df = pd.read_csv('my.csv', dtype={'my_column': np.float64}, na_values=['n/a'])<tab>read CSV file 'my.csv' into a dataframe `df` with datatype of float for column 'my_column' considering character 'n/a' as NaN value<eos>
<sos>df = pd.read_csv('my.csv', na_values=['n/a'])<tab>convert nan values to ‘n/a’ while reading rows from a csv `read_csv` with pandas<eos>
<sos>list(itertools.product(*a))<tab>create a list containing all cartesian products of elements in list `a`<eos>
<sos>re.sub('[^A-Z]', '', s)<tab>remove uppercased characters in string `s`<eos>
<sos>datetime.strptime('2011221', '%Y%W%w')<tab>convert string '2011221' into a DateTime object using format '%Y%W%w'<eos>
<sos>codecs.open('myfile', 'r', 'iso-8859-1').read()<tab>read file 'myfile' using encoding 'iso-8859-1'<eos>
<sos>[f(x) for x in list]<tab>create a list containing elements from list `list` that are predicate to function `f`<eos>
<sos>re.findall('(?<!\\d)\\d{5}(?!\\d)', s)<tab>regex matching 5-digit substrings not enclosed with digits in `s`<eos>
<sos>[item for item in a if sum(item) > 10]<tab>create a list containing elements of list `a` if the sum of the element is greater than 10<eos>
<sos>cents_int = int(round(float(dollars.strip('$')) * 100))<tab>convert currency string `dollars` to decimal `cents_int`<eos>
<sos>"""""".join(dropwhile(lambda x: x in bad_chars, example_line[::-1]))[::-1]<tab>remove letters from string `example_line` if the letter exist in list `bad_chars`<eos>
<sos>l = []<tab>Creating an empty list `l`<eos>
<sos>l = list()<tab>Creating an empty list `l`<eos>
<sos>list()<tab>Creating an empty list<eos>
<sos>[]<tab>Creating an empty list<eos>
<sos>sys.exit(0)<tab>properly quit a program<eos>
<sos>s[:4] + '-' + s[4:]<tab>add string `-` in `4th` position of a string `s`<eos>
<sos>[[] for i in range(3)]<tab>append 3 lists in one list<eos>
<sos>a = [[] for i in range(3)]<tab>Initialize a list of empty lists `a` of size 3<eos>
<sos>requests.get(url, headers={'referer': my_referer})<tab>request URL `url` using http header `{'referer': my_referer}`<eos>
<sos>pylab.ylim([0, 1000])<tab>set the y axis range to `0, 1000` in subplot using pylab<eos>
<sos>pd.get_dummies(s.apply(pd.Series).stack()).sum(level=0)<tab>convert a column of list in series `s` to dummies<eos>
<sos>max(abs(x - y) for x, y in zip(values[1:], values[:-1]))<tab>None<eos>
<sos>y = str(int(x, 16))<tab>convert a hex string `x` to string<eos>
<sos>a.isdigit()<tab>check if string `a` is an integer<eos>
<sos>isdigit()<tab>function to check if a string is a number<eos>
<sos>b.isdigit()<tab>check if string `b` is a number<eos>
<sos>pd.read_csv(StringIO(s), sep=',', comment='#')<tab>pandas read comma-separated CSV file `s` and skip commented lines starting with '#'<eos>
<sos>df['Date'] = df['Date'].apply(lambda x: int(str(x)[-4:]))<tab>pandas: change all the values of a column 'Date' into "int(str(x)[-4:])"<eos>
<sos>sum(list_of_nums)<tab>sum a list of numbers `list_of_nums`<eos>
<sos>max(lst, key=lambda x: x['score'])<tab>Get an item from a list of dictionary `lst` which has maximum value in the key `score` using lambda function<eos>
<sos>soup.findAll(attrs={'name': 'description'})<tab>BeautifulSoup find all tags with attribute 'name' equal to 'description'<eos>
<sos>str({'a': 1, 'b': 'as df'}).replace(': ', ':').replace(', ', ',')<tab>remove all spaces from a string converted from dictionary `{'a': 1, 'b': 'as df'}`<eos>
<sos>'{' + ','.join('{0!r}:{1!r}'.format(*x) for x in list(dct.items())) + '}'<tab>convert dictionary `dict` into a string formatted object<eos>
<sos>"""""".join(parts[1:])<tab>concatenate items from list `parts` into a string starting from the second element<eos>
<sos>""",+""".join(c.rsplit('+', 1))<tab>insert a character ',' into a string in front of '+' character in second part of the string<eos>
<sos>a[np.all(a != 0, axis=1)]<tab>delete all rows in a numpy array `a` where any value in a row is zero `0`<eos>
<sos>""" """.join(re.split('[^a-zA-Z]*', 'your string'))<tab>extract only alphabetic characters from a string `your string`<eos>
<sos>re.split('[^a-zA-Z]*', 'your string')<tab>Extract only characters from a string as a list<eos>
<sos>results_union = set().union(*results_list)<tab>get the union set from list of lists `results_list`<eos>
<sos>return list(set(itertools.chain(*result_list)))<tab>get the union of values in list of lists `result_list`<eos>
<sos>np.any(np.in1d(a1, a2))<tab>check if a numpy array `a1` contains any element of another array `a2`<eos>
<sos>return ''.join(ch for ch in s if unicodedata.category(ch)[0] != 'C')<tab>removing control characters from a string `s`<eos>
<sos>all(i < j for i, j in zip(a, b))<tab>Compare if each value in list `a` is less than respective index value in list `b`<eos>
<sos>driver.find_element_by_css_selector('.button.c_button.s_button').click()<tab>python selenium click on button '.button.c_button.s_button'<eos>
<sos>driver.find_element_by_css_selector('.button .c_button .s_button').click()<tab>None<eos>
<sos>os.system('taskkill /im make.exe')<tab>kill a process `make.exe` from python script on windows<eos>
<sos>print(select([my_table, func.current_date()]).execute())<tab>SQLAlchemy select records of columns of table `my_table` in addition to current date column<eos>
<sos>re.sub('([a-z])\\1+', '\\1', 'ffffffbbbbbbbqqq')<tab>remove duplicate characters from string 'ffffffbbbbbbbqqq'<eos>
<sos>re.sub('(?<!\\w)([A-Z])\\.', '\\1', s)<tab>remove periods inbetween capital letters that aren't immediately preceeded by word character(s) in a string `s` using regular expressions<eos>
<sos>split_list = [the_list[i:i + n] for i in range(0, len(the_list), n)]<tab>Get a list of strings `split_text` with fixed chunk size `n` from a string `the_list`<eos>
<sos>re.sub('\\b(this|string)\\b', '<markup>\\1</markup>', 'this is my string')<tab>match string 'this is my string' with regex '\\b(this|string)\\b'
then replace it with regex '<markup>\\1</markup>'<eos>
<sos>pandas.set_option('display.max_columns', 7)<tab>output data of the first 7 columns of Pandas dataframe<eos>
<sos>pandas.set_option('display.max_columns', None)<tab>Display maximum output data of columns in dataframe `pandas` that will fit into the screen<eos>
<sos>df.ix[df.A == 0, 'B'] = np.nan<tab>set the value in column 'B' to NaN if the corresponding value in column 'A' is equal to 0 in pandas dataframe `df`<eos>
<sos>driver.find_element_by_xpath("//li/label/input[contains(..,'polishpottery')]")<tab>Selecting Element "//li/label/input" followed by text "polishpottery" with Selenium WebDriver `driver`<eos>
<sos>mylist.sort(key=operator.itemgetter('weight', 'factor'))<tab>Sort a list of dictionaries `mylist` by keys "weight" and "factor"<eos>
<sos>mylist.sort(key=lambda d: (d['weight'], d['factor']))<tab>ordering a list of dictionaries `mylist` by elements 'weight' and 'factor'<eos>
<sos>{x[1]: x for x in lol}<tab>Convert a list of lists `lol` to a dictionary with key as second value of a list and value as list itself<eos>
<sos>sorted(d, key=lambda k: d[k][1])<tab>sort keys of dictionary 'd' based on their values<eos>
<sos>int(round(123, -2))<tab>round 123 to 100<eos>
<sos>fd = os.open('x', os.O_WRONLY | os.O_CREAT | os.O_EXCL)<tab>create file 'x' if file 'x' does not exist<eos>
<sos>new_list = [x.split()[-1] for x in Original_List]<tab>get a list of last trailing words from another list  of strings`Original_List`<eos>
<sos>'hello world'[::(-1)]<tab>Reverse a string 'hello world'<eos>
<sos>s[::(-1)]<tab>Reverse list `s`<eos>
<sos>''.join(reversed('foo'))<tab>Reverse string 'foo'<eos>
<sos>''.join(reversed(string))<tab>Reverse a string `string`<eos>
<sos>'foo'[::(-1)]<tab>Reverse a string "foo"<eos>
<sos>a_string[::(-1)]<tab>Reverse a string `a_string`<eos>
<sos>def reversed_string(a_string):
    return a_string[::(-1)]<tab>Reverse a string `a_string`<eos>
<sos>''.join(reversed(s))<tab>Reverse a string `s`<eos>
<sos>""",""".join(str(i) for i in range(100) if i % 4 in (1, 2))<tab>generate a string of numbers separated by comma which is divisible by `4` with remainder `1` or `2`.<eos>
<sos>dict([(e[0], int(e[1])) for e in lst])<tab>convert list `lst` of key, value pairs into a dictionary<eos>
<sos>sorted(list_of_tuples, key=lambda tup: tup[::-1])<tab>sorting a list of tuples `list_of_tuples` where each tuple is reversed<eos>
<sos>sorted(list_of_tuples, key=lambda tup: tup[1])<tab>sorting a list of tuples `list_of_tuples` by second key<eos>
<sos>numpy.concatenate([a, b])<tab>Concatenating two one-dimensional NumPy arrays 'a' and 'b'.<eos>
<sos>for item in thelist:
    thefile.write(('%s\n' % item))<tab>writing items in list `thelist` to file `thefile`<eos>
<sos>for item in thelist:
    pass<tab>writing items in list `thelist` to file `thefile`<eos>
<sos>pickle.dump(itemlist, outfile)<tab>serialize `itemlist` to file `outfile`<eos>
<sos>outfile.write('\n'.join(itemlist))<tab>writing items in list `itemlist` to file `outfile`<eos>
<sos>session.query(User).filter_by(id=123).update({'name': 'Bob Marley'})<tab>Update a user's name as `Bob Marley` having id `123` in SQLAlchemy<eos>
<sos>r = requests.post('http://wikipedia.org', cookies=cookie)<tab>send cookies `cookie` in a post request to url 'http://wikipedia.org' with the python requests library<eos>
<sos>sys.path.insert(0, 'libs')<tab>insert directory 'libs' at the 0th index of current directory<eos>
<sos>datetime.datetime.now()<tab>get current date and time<eos>
<sos>datetime.datetime.now().time()<tab>get current time<eos>
<sos>strftime('%Y-%m-%d %H:%M:%S', gmtime())<tab>get current time in pretty format<eos>
<sos>str(datetime.now())<tab>get current time in string format<eos>
<sos>datetime.datetime.time(datetime.datetime.now())<tab>get current time<eos>
<sos>ord('\xff')<tab>convert hex '\xff' to integer<eos>
<sos>df.groupby(['PplNum', 'RoomNum']).cumcount() + 1<tab>identify duplicated rows in columns 'PplNum' and 'RoomNum' with additional column in dataframe `df`<eos>
<sos>datetime.utcnow()<tab>get current utc time<eos>
<sos>a[-1:] + a[:-1]<tab>move last item of array `a` to the first position<eos>
<sos>df.set_index(['year', 'month', 'item']).unstack(level=-1)<tab>Convert dataframe `df` to a pivot table using column 'year', 'month', and 'item' as indexes<eos>
<sos>df.pivot_table(values='value', index=['year', 'month'], columns='item')<tab>run a pivot with a multi-index `year` and `month` in a pandas data frame<eos>
<sos>print('\n\x1b[4m' + '3' + '\x1b[0m' + '\n2')<tab>print a rational number `3/2`<eos>
<sos>li1.sort(key=lambda x: not x.startswith('b.'))<tab>None<eos>
<sos>range(10, 0, -1)<tab>iterate backwards from 10 to 0<eos>
<sos>name[0].firstChild.nodeValue<tab>get value of first child of xml node `name`<eos>
<sos>thread.start_new_thread(myfunction, ('MyStringHere', 1))<tab>start a new thread for `myfunction` with parameters 'MyStringHere' and 1<eos>
<sos>thread.start_new_thread(myfunction, ('MyStringHere', 1))<tab>start a new thread for `myfunction` with parameters 'MyStringHere' and 1<eos>
<sos>a.index(max(a))<tab>get index of the first biggest element in list `a`<eos>
<sos>re.sub('\\.(?=[^ .])', '. ', para)<tab>replace periods `.` that are not followed by periods or spaces with a period and a space `. `<eos>
<sos>[i.split() for i in re.findall('\\[([^\\[\\]]+)\\]', a)]<tab>convert a string `a` of letters embedded in squared brackets into embedded lists<eos>
<sos>[d for d in a if d['name'] == 'pluto']<tab>extract dictionary `d` from list `a` where the value associated with the key 'name' of dictionary `d` is equal to 'pluto'<eos>
<sos>[d for d in a if d['name'] == 'pluto']<tab>extract dictionary from list of dictionaries based on a key's value.<eos>
<sos>list(d.values())<tab>Retrieve list of values from dictionary 'd'<eos>
<sos>re.sub(' +', ' ', s)<tab>replace occurrences of two whitespaces or more with one whitespace ' ' in string `s`<eos>
<sos>os.chmod('my_script.sh', 484)<tab>Change the mode of file 'my_script.sh' to permission number 484<eos>
<sos>df.to_csv('c:\\data\\t.csv', index=False)<tab>write pandas dataframe `df` to the file 'c:\\data\\t.csv' without row names<eos>
<sos>re.sub('\\w*\\d\\w*', '', words).strip()<tab>remove all words which contains number from a string `words` using regex<eos>
<sos>dogtail.rawinput.click(100, 100)<tab>control the keyboard and mouse with dogtail in linux<eos>
<sos>datetime.strptime('2009/05/13 19:19:30 -0400', '%Y/%m/%d %H:%M:%S %z')<tab>parse date string '2009/05/13 19:19:30 -0400' using format '%Y/%m/%d %H:%M:%S %z'<eos>
<sos>re.search('\\bis\\b', String).start()<tab>Get the position of a regex match for word `is` in a string `String`<eos>
<sos>re.search('is', String).start()<tab>Get the position of a regex match `is` in a string `String`<eos>
<sos>tuple(map(int, input().split(',')))<tab>input an integer tuple from user<eos>
<sos>tuple(int(x.strip()) for x in input().split(','))<tab>input a tuple of integers from user<eos>
<sos>str.decode('utf-8').replace('\u2022', '*').encode('utf-8')<tab>replace unicode character '\u2022' in string 'str' with '*'<eos>
<sos>str.decode('utf-8').replace('\u2022', '*')<tab>replace unicode characters ''\u2022' in string 'str' with '*'<eos>
<sos>np.zeros((3, 3)).ravel()<tab>convert ndarray with shape 3x3 to array<eos>
<sos>import platform
platform.system()<tab>get os name<eos>
<sos>import platform
platform.release()<tab>get os version<eos>
<sos>print(os.name)<tab>get the name of the OS<eos>
<sos>[x for x in my_list if not x.startswith('#')]<tab>None<eos>
<sos>"""Day old bread, 50% sale {0}""".format('today')<tab>replace fields delimited by braces {} in string "Day old bread, 50% sale {0}" with string 'today'<eos>
<sos>min(list, key=lambda x: float('inf') if math.isnan(x[1]) else x[1])<tab>Get a minimum value from a list of tuples `list` with values of type `string` and `float` with nan<eos>
<sos>a = [(sum(x) / len(x)) for x in zip(*a)]<tab>Find average of a nested list `a`<eos>
<sos>logging.info('Log message', extra={'app_name': 'myapp'})<tab>Log info message 'Log message' with attributes `{'app_name': 'myapp'}`<eos>
<sos>df.applymap(lambda x: isinstance(x, (int, float)))<tab>replace values of dataframe `df` with True if numeric<eos>
<sos>sorted(l, key=lambda x: int(re.search('\\d+', x).group(0)))<tab>sort list `l` based on its elements' digits<eos>
<sos>self.root.destroy()<tab>close the window in tkinter<eos>
<sos>df.iloc[:, ([2, 5, 6, 7, 8])].mean(axis=1)<tab>get mean of columns `2, 5, 6, 7, 8` for all rows in dataframe `df`<eos>
<sos>df[df.index.map(lambda x: x[1].endswith('0630'))]<tab>filter dataframe `df` by sub-level index '0630' in pandas<eos>
<sos>db.session.delete(page)<tab>flask-sqlalchemy delete row `page`<eos>
<sos>"""""".join(chr(ord(c)) for c in 'Andr\xc3\xa9')<tab>Format a string `u'Andr\xc3\xa9'` that has unicode characters<eos>
<sos>"""""".join(chr(ord(c)) for c in 'Andr\xc3\xa9').decode('utf8')<tab>convert a unicode 'Andr\xc3\xa9' to a string<eos>
<sos>for (dirname, dirnames, filenames) in os.walk('.'):
    for subdirname in dirnames:
        print(os.path.join(dirname, subdirname))
    for filename in filenames:
        pass<tab>list all files in directory "."<eos>
<sos>os.listdir(path)<tab>list all files in directory `path`<eos>
<sos>os.rename(dir, dir + '!')<tab>rename file `dir` to `dir` + '!'<eos>
<sos>"""-""".join(a + b for a, b in zip(s[::2], s[1::2]))<tab>Insert a character `-` after every two elements in a string `s`<eos>
<sos>print('%.3f' % 3.1415)<tab>printing numbers rounding up to third decimal place<eos>
<sos>data[0]['f'] = var<tab>add variable `var` to key 'f' of first element in JSON data `data`<eos>
<sos>print(a_module.__file__)<tab>get the path of module `a_module`<eos>
<sos>print(os.getcwd())<tab>get the path of the current python module<eos>
<sos>path = os.path.abspath(amodule.__file__)<tab>get the path of the python module `amodule`<eos>
<sos>self.myList.extend([0] * (4 - len(self.myList)))<tab>fill list `myList` with 4 0's<eos>
<sos>df[~df.index.duplicated()]<tab>drop duplicate indexes in a pandas data frame `df`<eos>
<sos>foo(*i)<tab>unpack elements of list `i` as arguments into function `foo`<eos>
<sos>[('%.2d' % i) for i in range(16)]<tab>generate list of numbers in specific format using string formatting precision.<eos>
<sos>sorted(iter(mydict.items()), key=lambda tup: sum(tup[1]), reverse=True)[:3]<tab>sort dictionary `mydict` in descending order based on the sum of each value in it<eos>
<sos>heapq.nlargest(3, iter(mydict.items()), key=lambda tup: sum(tup[1]))<tab>get top `3` items from a dictionary `mydict` with largest sum of values<eos>
<sos>['a', 'b'].index('b')<tab>get index of character 'b' in list '['a', 'b']'<eos>
<sos>plt.setp(legend.get_title(), fontsize='xx-small')<tab>set font size of axis legend of plot `plt` to 'xx-small'<eos>
<sos>int('  23  ')<tab>None<eos>
<sos>[x[1] for x in elements]<tab>extract the 2nd elements from a list of tuples<eos>
<sos>np.diag(np.rot90(array))<tab>get the opposite diagonal of a numpy array `array`<eos>
<sos>list(chain.from_iterable(a))<tab>flatten list of tuples `a`<eos>
<sos>re.sub('\\s{2,}', '|', line.strip())<tab>substitute two or more whitespace characters with character '|' in string `line`<eos>
<sos>print(('%.2f' % a))<tab>print float `a` with two decimal points<eos>
<sos>print(('{0:.2f}'.format(a)))<tab>print float `a` with two decimal points<eos>
<sos>print(('{0:.2f}'.format(round(a, 2))))<tab>print float `a` with two decimal points<eos>
<sos>print(('%.2f' % round(a, 2)))<tab>print float `a` with two decimal points<eos>
<sos>('%.2f' % 13.9499999)<tab>limit float 13.9499999 to two decimal points<eos>
<sos>('%.2f' % 3.14159)<tab>limit float 3.14159 to two decimal points<eos>
<sos>float('{0:.2f}'.format(13.95))<tab>limit float 13.949999999999999 to two decimal points<eos>
<sos>'{0:.2f}'.format(13.95)<tab>limit float 13.949999999999999 to two decimal points<eos>
<sos>DataFrame.from_csv('c:/~/trainSetRel3.txt', sep='\t')<tab>load a tsv file `c:/~/trainSetRel3.txt` into a pandas data frame<eos>
<sos>dateutil.parser.parse('2013/09/11 00:17 +0900')<tab>set UTC offset by 9 hrs ahead for date '2013/09/11 00:17'<eos>
<sos>cur.mogrify('SELECT * FROM table WHERE column IN %s;', ((1, 2, 3),))<tab>pass a list of parameters `((1, 2, 3),) to sql queue 'SELECT * FROM table WHERE column IN %s;'<eos>
<sos>sum([sum(x) for x in [[1, 2, 3, 4], [2, 4, 5, 6]]])<tab>sum all elements of two-dimensions list `[[1, 2, 3, 4], [2, 4, 5, 6]]]`<eos>
<sos>next(iter(dict.values()))<tab>Retrieve an arbitrary value from dictionary `dict`<eos>
<sos>next(iter(list(dict.values())))<tab>access an arbitrary value from dictionary `dict`<eos>
<sos>df.groupby(['Month', 'Fruit']).sum().unstack(level=0)<tab>group dataframe `df` by columns 'Month' and 'Fruit'<eos>
<sos>sorted(mylist, key=lambda x: order.index(x[1]))<tab>sort list `mylist` of tuples by arbitrary key from list `order`<eos>
<sos>sorted(persons, key=lambda x: x['passport']['birth_info']['date'])<tab>sort a list of dictionary `persons` according to the key `['passport']['birth_info']['date']`<eos>
<sos>urlparse.urldefrag('http://www.address.com/something#something')<tab>remove the fragment identifier `#something` from a url `http://www.address.com/something#something`<eos>
<sos>urllib.request.urlretrieve('http://example.com/file.ext', '/path/to/dir/filename.ext')<tab>download to a directory '/path/to/dir/filename.ext' from source 'http://example.com/file.ext'<eos>
<sos>list(set(frozenset(item) for item in L))<tab>remove all duplicates from a list of sets `L`<eos>
<sos>[set(item) for item in set(frozenset(item) for item in L)]<tab>remove duplicates from a list of sets 'L'<eos>
<sos>p.terminate()<tab>terminate process `p`<eos>
<sos>del mylist[:]<tab>delete all values in a list `mylist`<eos>
<sos>ctypes.windll.user32.MessageBoxW(0, 'Error', 'Error', 0)<tab>throw an error window in python in windows<eos>
<sos>str_list = list([_f for _f in str_list if _f])<tab>remove empty strings from list `str_list`<eos>
<sos>re.sub('[\\ \\n]{2,}', '', yourstring)<tab>remove newlines and whitespace from string `yourstring`<eos>
<sos>re.sub('\\.[^.]+$', '', s)<tab>remove the last dot and all text beyond it in string `s`<eos>
<sos>A[np.all(np.any(A - B[:, (None)], axis=2), axis=0)]<tab>remove elements from an array `A` that are in array `B`<eos>
<sos>a.to_csv('test.csv', cols=['sum'])<tab>Write column 'sum' of DataFrame `a` to csv file 'test.csv'<eos>
<sos>exec(compile(open('test2.py').read(), 'test2.py', 'exec'))<tab>call a Python script "test2.py"<eos>
<sos>subprocess.call('test1.py', shell=True)<tab>call a Python script "test1.py"<eos>
<sos>sorted(zipped, key=lambda x: x[1])<tab>sort a zipped list `zipped` using lambda function<eos>
<sos>zipped.sort(key=lambda t: t[1])<tab>None<eos>
<sos>sorted(list(y.items()), key=lambda x: (x[1], x[0]), reverse=True)<tab>sort a dictionary `y` by value then by key<eos>
<sos>soup.find_all('div', class_='crBlock ')<tab>using beautifulsoup to select div blocks within html `soup`<eos>
<sos>[element for i, element in enumerate(centroids) if i not in index]<tab>remove elements from list `centroids` the indexes of which are in array `index`<eos>
<sos>list(set(listA) & set(listB))<tab>list duplicated elements in two lists `listA` and `listB`<eos>
<sos>testfile = urllib.request.URLopener()
testfile.retrieve('http://randomsite.com/file.gz', 'file.gz')<tab>download "http://randomsite.com/file.gz" from http and save as "file.gz"<eos>
<sos>urllib.request.urlretrieve('http://randomsite.com/file.gz', 'file.gz')<tab>download file from http url "http://randomsite.com/file.gz" and save as "file.gz"<eos>
<sos>file_name = wget.download(file_url)<tab>download file from http url `file_url`<eos>
<sos>ax.set_yticklabels(['\xe9', '\xe3', '\xe2'])<tab>set an array of unicode characters `[u'\xe9', u'\xe3', u'\xe2']` as labels in Matplotlib `ax`<eos>
<sos>list(itertools.product(list(range(-x, y)), repeat=dim))<tab>get a list of all integer points in a `dim` dimensional hypercube with coordinates from `-x` to `y` for all dimensions<eos>
<sos>print(s.encode('unicode_escape'))<tab>convert unicode string `s` into string literals<eos>
<sos>'Hello %s' % ', '.join(my_args)<tab>how to format a list of arguments `my_args` into a string<eos>
<sos>re.split('(ddd)', 'aaa bbb ccc ddd eee fff', 1)<tab>search and split string 'aaa bbb ccc ddd eee fff' by delimiter '(ddd)'<eos>
<sos>re.split('(d(d)d)', 'aaa bbb ccc ddd eee fff', 1)<tab>regex search and split string 'aaa bbb ccc ddd eee fff' by delimiter '(d(d)d)'<eos>
<sos>pd.DataFrame(d)<tab>convert a list of dictionaries `d` to pandas data frame<eos>
<sos>"""This is a string""".split()<tab>split string "This is a string" into words that do not contain whitespaces<eos>
<sos>"""This     is a     string""".split()<tab>split string "This     is a     string" into words that does not contain whitespaces<eos>
<sos>my_series.apply(your_function, args=(2, 3, 4), extra_kw=1)<tab>None<eos>
<sos>woduplicates = list(set(lseperatedOrblist))<tab>remove all duplicate items from a list `lseperatedOrblist`<eos>
<sos>sum([(i * j) for i, j in list(itertools.combinations(l, 2))])<tab>sum of product of combinations in a list `l`<eos>
<sos>re.compile('{}-\\d*'.format(user))<tab>regular expression for validating string 'user' containing a sequence of characters ending with '-' followed by any number of digits.<eos>
<sos>[float(i) for i in lst]<tab>convert all of the items in a list `lst` to float<eos>
<sos>from functools import reduce
reduce(lambda x, y: x * y, [1, 2, 3, 4, 5, 6])<tab>multiply all items in a list `[1, 2, 3, 4, 5, 6]` together<eos>
<sos>writer.writerow(A)<tab>write a tuple of tuples `A` to a csv file using python<eos>
<sos>writer.writerows(A)<tab>Write all tuple of tuples `A` at once into csv file<eos>
<sos>"""{} %s {}""".format('foo', 'bar')<tab>python, format string "{} %s {}" to have 'foo' and 'bar' in the first and second positions<eos>
<sos>example = [x.replace('\r\n', '') for x in example]<tab>Truncate `\r\n` from each string in a list of string `example`<eos>
<sos>[i.partition('\t')[-1] for i in l if '\t' in i]<tab>split elements of a list `l` by '\t'<eos>
<sos>re.search('Test(.*)print', testStr, re.DOTALL)<tab>search for regex pattern 'Test(.*)print' in string `testStr` including new line character '\n'<eos>
<sos>next = driver.find_element_by_css_selector('li.next>a')<tab>find button that is in li class `next` and assign it to variable `next`<eos>
<sos>os.stat('C:\\Python27\\Lib\\genericpath.py').st_size<tab>get the  size of file 'C:\\Python27\\Lib\\genericpath.py'<eos>
<sos>imtag = re.match('<img.*?>', line).group(0)<tab>return a string from a regex match with pattern '<img.*?>' in string 'line'<eos>
<sos>os.rename('Joe Blow', 'Blow, Joe')<tab>Rename a folder `Joe Blow` to `Blow, Joe`<eos>
<sos>re.findall('(?=(\\w\\w))', 'hello')<tab>find overlapping matches from a string `hello` using regex<eos>
<sos>bin(173)<tab>convert 173 to binary string<eos>
<sos>int('01010101111', 2)<tab>convert binary string '01010101111' to integer<eos>
<sos>int('010101', 2)<tab>convert binary string '010101' to integer<eos>
<sos>int('0b0010101010', 2)<tab>convert binary string '0b0010101010' to integer<eos>
<sos>bin(21)<tab>convert 21 to binary string<eos>
<sos>int('11111111', 2)<tab>convert binary string '11111111' to integer<eos>
<sos>re.sub('$\\d+\\W+|\\b\\d+\\b|\\W+\\d+$', '', s)<tab>delete all digits in string `s` that are not directly attached to a word character<eos>
<sos>re.sub('\\b\\d+\\b', '', s)<tab>delete digits at the end of string `s`<eos>
<sos>s = re.sub('^\\d+\\s|\\s\\d+\\s|\\s\\d+$', ' ', s)<tab>Delete self-contained digits from string `s`<eos>
<sos>s.split(':', 1)[1]<tab>truncate string `s` up to character ':'<eos>
<sos>print(s.split(','))<tab>print a string `s` by splitting with comma `,`<eos>
<sos>mystring.split(',')<tab>Create list  by splitting string `mystring` using "," as delimiter<eos>
<sos>re.sub('\\((\\w+)\\)', '\\1', s)<tab>remove parentheses only around single words in a string `s` using regex<eos>
<sos>webbrowser.open_new(url)<tab>webbrowser open url `url`<eos>
<sos>webbrowser.open('http://example.com')<tab>webbrowser open url 'http://example.com'<eos>
<sos>self.pushButton.setStyleSheet('background-color: red')<tab>change the background colour of the button `pushbutton` to red<eos>
<sos>[x(y) for x, y in zip(functions, values)]<tab>apply a list of functions named 'functions' over a list of values named 'values'<eos>
<sos>wx.TextCtrl(self, -1, size=(300, -1))<tab>modify the width of a text control as `300` keeping default height in wxpython<eos>
<sos>imshow(imageArray, cmap='Greys_r')<tab>display a grayscale image from array of pixels `imageArray`<eos>
<sos>df.fillna(0)<tab>replace all the nan values with 0 in a pandas dataframe `df`<eos>
<sos>df.toPandas().to_csv('mycsv.csv')<tab>export a table dataframe `df` in pyspark to csv 'mycsv.csv'<eos>
<sos>df.write.csv('mycsv.csv')<tab>Write DataFrame `df` to csv file 'mycsv.csv'<eos>
<sos>sum(x[1] for x in structure)<tab>get the sum of each second value from a list of tuple `structure`<eos>
<sos>df.groupby('STNAME')['COUNTY_POP'].agg(lambda x: x.nlargest(3).sum())<tab>sum the 3 largest integers in groupby by 'STNAME' and 'COUNTY_POP'<eos>
<sos>datetime.strptime('21/11/06 16:30', '%d/%m/%y %H:%M')<tab>Parse string '21/11/06 16:30' according to format '%d/%m/%y %H:%M'<eos>
<sos>os.path.dirname(os.path.abspath(__file__))<tab>get current script directory<eos>
<sos>re.sub('(.)', '\\1\\1', text.read(), 0, re.S)<tab>double each character in string `text.read()`<eos>
<sos>"""""".join(('a', 'b', 'c', 'd', 'g', 'x', 'r', 'e'))<tab>concatenate strings in tuple `('a', 'b', 'c', 'd', 'g', 'x', 'r', 'e')` into a single string<eos>
<sos>os.path.dirname(os.path.abspath(__file__))<tab>get full path of current directory<eos>
<sos>"""{0:.{1}%}""".format(value, digits)<tab>variable number of digits `digits` in variable `value` in format string "{0:.{1}%}"<eos>
<sos>self.request.url<tab>get current requested url<eos>
<sos>random_choice = random.choice(choices)<tab>get a random item from list `choices`<eos>
<sos>length = sum(len(s) for s in strings)<tab>sum the length of all strings in a list `strings`<eos>
<sos>s = sorted(s, key=lambda x: (x[1], x[2]))<tab>sort a list `s` by first and second attributes<eos>
<sos>s.sort(key=operator.itemgetter(1, 2))<tab>sort a list of lists `s` by second and third element in each list.<eos>
<sos>con.commit()<tab>Mysql commit current transaction<eos>
<sos>[k for k in lst if 'ab' in k]<tab>filtering out strings that contain 'ab' from a list of strings `lst`<eos>
<sos>output = ''.join(item[0].upper() for item in input.split())<tab>find the first letter of each element in string `input`<eos>
<sos>CustomPK._meta.pk.name<tab>get name of primary field `name` of django model `CustomPK`<eos>
<sos>len(s.split())<tab>count the number of words in a string `s`<eos>
<sos>np.einsum('ji,i->j', a, b)<tab>multiply array `a` and array `b`respective elements then sum each row of the new array<eos>
<sos>sys.version<tab>check python version<eos>
<sos>sys.version_info<tab>check python version<eos>
<sos>print('\\num{{{0:.2g}}}'.format(1000000000.0))<tab>format number 1000000000.0 using latex notation<eos>
<sos>x = [[] for i in range(3)]<tab>Initialize a list of empty lists `x` of size 3<eos>
<sos>{{my_variable | forceescape | linebreaks}}<tab>apply jinja2 filters `forceescape` and `linebreaks` on variable `my_variable`<eos>
<sos>zip(*[(1, 4), (2, 5), (3, 6)])<tab>zip a list of tuples `[(1, 4), (2, 5), (3, 6)]` into a list of tuples according to original tuple index<eos>
<sos>[list(group) for key, group in itertools.groupby(data, operator.itemgetter(1))]<tab>split a list of tuples `data` into sub-lists of the same tuple field using itertools<eos>
<sos>list('hello')<tab>Convert a string into a list<eos>
<sos>df['A_perc'] = df['A'] / df['sum']<tab>create new column `A_perc` in dataframe `df` with row values equal to the value in column `A` divided by the value in column `sum`<eos>
<sos>os.walk(directory)<tab>getting a list of all subdirectories in the directory `directory`<eos>
<sos>[x[0] for x in os.walk(directory)]<tab>get a list of all subdirectories in the directory `directory`<eos>
<sos>{i: 'updated' for i, j in list(d.items()) if j != 'None'}<tab>update all values associated with key `i` to string 'updated' if value `j` is not equal to 'None' in dictionary `d`<eos>
<sos>dict((k, 'updated') for k, v in d.items() if v is None)<tab>Filter a dictionary `d` to remove keys with value None and replace other values with 'updated'<eos>
<sos>dict((k, 'updated') for k, v in d.items() if v != 'None')<tab>Filter a dictionary `d` to remove keys with value 'None' and replace other values with 'updated'<eos>
<sos>df.groupby(key_columns).size()<tab>count number of rows in a group `key_columns` in pandas groupby object `df`<eos>
<sos>result = [sum(b) for b in a]<tab>return list `result` of sum of elements of each list `b` in list of lists `a`<eos>
<sos>any(d['site'] == 'Superuser' for d in data)<tab>What's the best way to search for a Python dictionary value in a list of dictionaries?<eos>
<sos>nodes = [[Node() for j in range(cols)] for i in range(rows)]<tab>create a 2D array of `Node` objects with dimensions `cols` columns and `rows` rows<eos>
<sos>print(os.path.splitext('/home/user/somefile.txt')[0] + '.jpg')<tab>replace extension '.txt' in basename '/home/user/somefile.txt' with extension '.jpg'<eos>
<sos>pygame.display.set_mode((0, 0), pygame.FULLSCREEN)<tab>Set the resolution of a monitor as `FULLSCREEN` in pygame<eos>
<sos>ax.set_title('$%s \\times 10^{%s}$' % ('3.5', '+20'))<tab>format float `3.5e+20`  to `$3.5 \\times 10^{20}$` and set as title of matplotlib plot `ax`<eos>
<sos>print(os.path.getmtime('/tmp'))<tab>Get the age of directory (or file) `/tmp` in seconds.<eos>
<sos>today.strftime('%B')<tab>how to get month name of datetime `today`<eos>
<sos>today.strftime('%B')<tab>get month name from a datetime object `today`<eos>
<sos>[j for i in x for j in i]<tab>Convert nested list `x` into a flat list<eos>
<sos>print(list(itertools.chain.from_iterable(a)))<tab>get each value from a list of lists `a` using itertools<eos>
<sos>datetime.datetime.strptime('January 11, 2010', '%B %d, %Y').strftime('%A')<tab>convert date string 'January 11, 2010'  into day of week<eos>
<sos>datetime.datetime.strptime('January 11, 2010', '%B %d, %Y').strftime('%a')<tab>None<eos>
<sos>a.remove('b')<tab>remove item "b" in list `a`<eos>
<sos>a.remove(c)<tab>remove item `c` in list `a`<eos>
<sos>a.remove(6)<tab>delete the element 6 from list `a`<eos>
<sos>a.remove(6)<tab>delete the element 6 from list `a`<eos>
<sos>if (c in a):
    a.remove(c)<tab>delete the element `c` from list `a`<eos>
<sos>try:
    a.remove(c)
except ValueError:
    pass<tab>delete the element `c` from list `a`<eos>
<sos>re.findall('(?=(a.*?a))', 'a 1 a 2 a 3 a 4 a')<tab>Get all matching patterns 'a.*?a' from a string 'a 1 a 2 a 3 a 4 a'.<eos>
<sos>np.einsum('ij,kj->jik', X, X)<tab>outer product of each column of a 2d `X` array to form a 3d array `X`<eos>
<sos>some_list[(-1)]<tab>Getting the last element of list `some_list`<eos>
<sos>some_list[(-2)]<tab>Getting the second to last element of list `some_list`<eos>
<sos>some_list[(- n)]<tab>gets the `n` th-to-last element in list `some_list`<eos>
<sos>alist[(-1)]<tab>get the last element in list `alist`<eos>
<sos>astr[(-1)]<tab>get the last element in list `astr`<eos>
<sos>print([u for v in [[i, i] for i in range(5)] for u in v])<tab>make a list of integers from 0 to `5` where each second element is a duplicate of the previous element<eos>
<sos>[0, 0, 1, 1, 2, 2, 3, 3, 4, 4]<tab>create a list of integers with duplicate values `[0, 0, 1, 1, 2, 2, 3, 3, 4, 4]`<eos>
<sos>[(i // 2) for i in range(10)]<tab>create a list of integers from 1 to 5 with each value duplicated<eos>
<sos>s[s.find('\n') + 1:s.rfind('\n')]<tab>remove first and last lines of string `s`<eos>
<sos>{(x ** 2) for x in range(100)}<tab>create dict of squared int values in range of 100<eos>
<sos>zip(*[[1, 2], [3, 4], [5, 6]])<tab>zip lists `[1, 2], [3, 4], [5, 6]` in a list<eos>
<sos>zip(*[[1, 2], [3, 4], [5, 6]])<tab>zip lists in a list [[1, 2], [3, 4], [5, 6]]<eos>
<sos>requests.get('https://www.mysite.com/', auth=('username', 'pwd'))<tab>request page 'https://www.mysite.com/' with credentials of username 'username' and password 'pwd'<eos>
<sos>x[2:]<tab>get a new string from the 3rd character to the end of the string `x`<eos>
<sos>x[:2]<tab>get a new string including the first two characters of string `x`<eos>
<sos>x[:(-2)]<tab>get a new string including all but the last character of string `x`<eos>
<sos>x[(-2):]<tab>get a new string including the last two characters of string `x`<eos>
<sos>x[2:(-2)]<tab>get a new string with the 3rd to the second-to-last characters of string `x`<eos>
<sos>some_string[::(-1)]<tab>reverse a string `some_string`<eos>
<sos>'H-e-l-l-o- -W-o-r-l-d'[::2]<tab>select alternate characters of "H-e-l-l-o- -W-o-r-l-d"<eos>
<sos>s = s[beginning:(beginning + LENGTH)]<tab>select a substring of `s` beginning at `beginning` of length `LENGTH`<eos>
<sos>sys.exit()<tab>terminate the program<eos>
<sos>quit()<tab>terminate the program<eos>
<sos>sys.exit('some error message')<tab>Terminating a Python script with error message "some error message"<eos>
<sos>data['City'].encode('ascii', 'ignore')<tab>encode value of key `City` in dictionary `data` as `ascii`, ignoring non-ascii characters<eos>
<sos>psutil.cpu_percent()
psutil.virtual_memory()<tab>get current CPU and RAM usage<eos>
<sos>pid = os.getpid()
py = psutil.Process(pid)
memoryUse = (py.memory_info()[0] / (2.0 ** 30))<tab>get current RAM usage of current program<eos>
<sos>print((psutil.cpu_percent()))
print((psutil.virtual_memory()))<tab>print cpu and memory usage<eos>
<sos>pd.read_csv('D:/Temp/tt.csv', names=list('abcdef'))<tab>read a ragged csv file `D:/Temp/tt.csv` using `names` parameter in pandas<eos>
<sos>df.stack().groupby(level=0).first()<tab>get first non-null value per each row from dataframe `df`<eos>
<sos>"""{0} {1}""".format(10, 20)<tab>print two numbers `10` and `20` using string formatting<eos>
<sos>"""{1} {ham} {0} {foo} {1}""".format(10, 20, foo='bar', ham='spam')<tab>replace placeholders in string '{1} {ham} {0} {foo} {1}' with arguments `(10, 20, foo='bar', ham='spam')`<eos>
<sos>changed_list = [(int(f) if f.isdigit() else f) for f in original_list]<tab>create list `changed_list ` containing elements of list `original_list` whilst converting strings containing digits to integers<eos>
<sos>dict(zip(keys, zip(*data)))<tab>get a dictionary with keys from one list `keys` and values from other list `data`<eos>
<sos>apple.decode('iso-8859-1').encode('utf8')<tab>convert string `apple` from iso-8859-1/latin1 to utf-8<eos>
<sos>df.to_csv('filename.csv', header=False)<tab>Exclude column names when writing dataframe `df` to a csv file `filename.csv`<eos>
<sos>print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))<tab>Escape character '}' in string '{0}:<15}}{1}:<15}}{2}:<8}}' while using function `format` with arguments `('1', '2', '3')`<eos>
<sos>max(ld, key=lambda d: d['size'])<tab>get dictionary with max value of key 'size' in list of dicts `ld`<eos>
<sos>"""{0}\\w{{2}}b{1}\\w{{2}}quarter""".format('b', 'a')<tab>format parameters 'b' and 'a' into plcaeholders in string "{0}\\w{{2}}b{1}\\w{{2}}quarter"<eos>
<sos>user = models.ForeignKey('User', unique=True)<tab>django create a foreign key column `user` and link it to table 'User'<eos>
<sos>re.compile('^([^A]*)AA([^A]|AA)*$')<tab>write a regex pattern to match even number of letter `A`<eos>
<sos>b = np.concatenate((a, a), axis=0)<tab>join Numpy array `b` with Numpy array 'a' along axis 0<eos>
<sos>sorted(l, key=lambda x: x.replace('0', 'Z'))<tab>custom sort an alphanumeric list `l`<eos>
<sos>ax.set_yscale('log')<tab>plot logarithmic axes with matplotlib<eos>
<sos>os.environ['HOME']<tab>Access environment variable "HOME"<eos>
<sos>os.environ['HOME']<tab>get value of environment variable "HOME"<eos>
<sos>print(os.environ)<tab>print all environment variables<eos>
<sos>os.environ<tab>get all environment variables<eos>
<sos>print(os.environ.get('KEY_THAT_MIGHT_EXIST'))<tab>get value of the environment variable 'KEY_THAT_MIGHT_EXIST'<eos>
<sos>print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))<tab>get value of the environment variable 'KEY_THAT_MIGHT_EXIST' with default value `default_value`<eos>
<sos>print(os.environ.get('HOME', '/home/username/'))<tab>get value of the environment variable 'HOME' with default value '/home/username/'<eos>
<sos>print(dict([s.split('=') for s in my_list]))<tab>create a dictionary containing each string in list `my_list` split by '=' as a key/value pairs<eos>
<sos>min(enumerate(a), key=lambda x: abs(x[1] - 11.5))<tab>find the index of element closest to number 11.5 in list `a`<eos>
<sos>e = root.xpath('.//a[contains(text(),"TEXT A")]')<tab>find element `a` that contains string "TEXT A" in file `root`<eos>
<sos>e = root.xpath('.//a[starts-with(text(),"TEXT A")]')<tab>Find the`a` tag in html `root` which starts with the text `TEXT A`  and assign it to `e`<eos>
<sos>e = root.xpath('.//a[text()="TEXT A"]')<tab>find the element that holds string 'TEXT A' in file `root`<eos>
<sos>c = [b[i] for i in index]<tab>create list `c` containing items from list `b` whose index is in list `index`<eos>
<sos>np.dot(a[:, (None)], b[(None), :])<tab>get the dot product of two one dimensional numpy arrays<eos>
<sos>np.outer(a, b)<tab>multiplication of two 1-dimensional arrays  in numpy<eos>
<sos>subprocess.call(['./abc.py', arg1, arg2])<tab>execute a file './abc.py' with arguments `arg1` and `arg2` in python shell<eos>
<sos>df[['value']].fillna(df.groupby('group').transform('mean'))<tab>Replace NaN values in  column 'value' with the mean of data in column 'group' of dataframe `df`<eos>
<sos>re.sub('(.)(?=.)', '\\1-', s)<tab>separate each character in string `s` by '-'<eos>
<sos>re.sub('(?<=.)(?=.)', '-', str)<tab>concatenate '-' in between characters of string `str`<eos>
<sos>i, j = np.where(a == value)<tab>get the indexes of the x and y axes in Numpy array `np` where variable `a` is equal to variable `value`<eos>
<sos>print(collections.Counter(s).most_common(1)[0])<tab>print letter that appears most frequently in string `s`<eos>
<sos>float(re.findall('(?:^|_)' + par + '(\\d+\\.\\d*)', dir)[0])<tab>find float number proceeding sub-string `par` in string `dir`<eos>
<sos>re.findall('[^a]', 'abcd')<tab>Get all the matches from a string `abcd` if it begins with a character `a`<eos>
<sos>print([item for item in dir(adfix) if not item.startswith('__')])<tab>get a list of variables from module 'adfix.py' in current module.<eos>
<sos>[x[0] for x in rows]<tab>get the first element of each tuple in a list `rows`<eos>
<sos>res_list = [x[0] for x in rows]<tab>get a list `res_list` of the first elements of each tuple in a list of tuples `rows`<eos>
<sos>pd.concat([x] * 5, ignore_index=True)<tab>duplicate data in pandas dataframe `x` for 5 times<eos>
<sos>pd.concat([x] * 5)<tab>Get a repeated pandas data frame object `x` by `5` times<eos>
<sos>sorted_list_of_keyvalues = sorted(list(ips_data.items()), key=item[1]['data_two'])<tab>sort json `ips_data` by a key 'data_two'<eos>
<sos>pd.read_json(elevations)<tab>read json `elevations` to pandas dataframe `df`<eos>
<sos>numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])<tab>generate a random number in 1 to 7 with a given distribution [0.1, 0.05, 0.05, 0.2, 0.4, 0.2]<eos>
<sos>df.loc[df['Value'].idxmax()]<tab>Return rows of data associated with the maximum value of column 'Value' in dataframe `df`<eos>
<sos>re.findall('^(.+?)((.+)\\3+)$', '42344343434')[0][:-1]<tab>find recurring patterns in a string '42344343434'<eos>
<sos>np.fromstring('\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@', dtype='<f4')<tab>convert binary string '\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@' to numpy array<eos>
<sos>np.fromstring('\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@', dtype='>f4')<tab>convert binary string to numpy array<eos>
<sos>cursor.execute('INSERT INTO table VALUES (?, ?, ?)', (var1, var2, var3))<tab>insert variables `(var1, var2, var3)` into sql statement 'INSERT INTO table VALUES (?, ?, ?)'<eos>
<sos>cursor.execute('INSERT INTO table VALUES (%s, %s, %s)', (var1, var2, var3))<tab>Execute a sql statement using variables `var1`, `var2` and `var3`<eos>
<sos>cursor.execute('INSERT INTO table VALUES (%s, %s, %s)', (var1, var2, var3))<tab>None<eos>
<sos>df['stats'].str[1:-1].str.split(',', expand=True).astype(float)<tab>pandas split strings in column 'stats' by ',' into columns in dataframe `df`<eos>
<sos>df['stats'].str[1:-1].str.split(',').apply(pd.Series).astype(float)<tab>split string in column 'stats' by ',' into separate columns in dataframe `df`<eos>
<sos>df['stats'].apply(pd.Series)<tab>Unpack column 'stats' in dataframe `df` into a series of columns<eos>
<sos>p.wait()<tab>wait for shell command `p` evoked by  subprocess.Popen to complete<eos>
<sos>s.encode('utf8')<tab>encode string `s` to utf-8 code<eos>
<sos>datetime.datetime.strptime('01-Jan-1995', '%d-%b-%Y')<tab>parse string '01-Jan-1995' into a datetime object using format '%d-%b-%Y'<eos>
<sos>copyfile(src, dst)<tab>copy a file from `src` to `dst`<eos>
<sos>shutil.copy2('/dir/file.ext', '/new/dir/newname.ext')<tab>copy file "/dir/file.ext" to "/new/dir/newname.ext"<eos>
<sos>shutil.copy2('/dir/file.ext', '/new/dir')<tab>copy file '/dir/file.ext' to '/new/dir'<eos>
<sos>print(', '.join(str(x) for x in list_of_ints))<tab>print a list of integers `list_of_ints` using string formatting<eos>
<sos>df[['A', 'B']].multiply(df['C'], axis='index')<tab>multiply column 'A' and column 'B' by column 'C' in datafram `df`<eos>
<sos>hex(ord('a'))<tab>convert string 'a' to hex<eos>
<sos>sum(j ** i for i, j in enumerate(l, 1))<tab>Get the sum of values to the power of their indices in a list `l`<eos>
<sos>""" """.join(s.split())<tab>remove extra white spaces & tabs from a string `s`<eos>
<sos>s = s.replace(',', '')<tab>replace comma in string `s` with empty string ''<eos>
<sos>frame.resample('1H').agg({'radiation': np.sum, 'tamb': np.mean})<tab>Resample dataframe `frame` to resolution of 1 hour `1H` for timeseries index, summing values in the column `radiation` averaging those in column `tamb`<eos>
<sos>root.destroy()<tab>None<eos>
<sos>df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})<tab>create a pandas dataframe `df` from elements of a dictionary `nvalues`<eos>
<sos>first_name = request.args.get('firstname')<tab>Flask get value of request variable 'firstname'<eos>
<sos>first_name = request.form.get('firstname')<tab>Flask get posted form data 'firstname'<eos>
<sos>[s[:5] for s in buckets]<tab>get a list of substrings consisting of the first 5 characters of every string in list `buckets`<eos>
<sos>the_list.sort(key=lambda item: (-len(item), item))<tab>sort list `the_list` by the length of string followed by alphabetical order<eos>
<sos>df = df.set_index(['TRX_DATE'])<tab>Set index equal to field 'TRX_DATE' in dataframe `df`<eos>
<sos>list(accumulate(list(range(10))))<tab>List comprehension with an accumulator in range of 10<eos>
<sos>datetime.datetime.strptime('2013-1-25', '%Y-%m-%d').strftime('%m/%d/%y')<tab>How to convert a date string '2013-1-25' in format '%Y-%m-%d' to different format '%m/%d/%y'<eos>
<sos>datetime.datetime.strptime('2013-1-25', '%Y-%m-%d').strftime('%-m/%d/%y')<tab>convert a date string '2013-1-25' in format '%Y-%m-%d' to different format '%-m/%d/%y'<eos>
<sos>df2 = df.ix[:, (~df.columns.str.endswith('prefix'))]<tab>get a dataframe `df2` that contains all the columns of dataframe `df` that do not end in `prefix`<eos>
<sos>new_list = my_list[-10:]<tab>create list `new_list` containing the last 10 elements of list `my_list`<eos>
<sos>my_list[-10:]<tab>get the last 10 elements from a list `my_list`<eos>
<sos>np.array(x._data).reshape(x.size[::-1]).T<tab>convert matlab engine array `x` to a numpy ndarray<eos>
<sos>df.groupby(level=0, as_index=False).nth(0)<tab>select the first row grouped per level 0 of dataframe `df`<eos>
<sos>numpy.concatenate(LIST, axis=0)<tab>concatenate sequence of numpy arrays  `LIST` into a one dimensional array along the first axis<eos>
<sos>"""\\xc3\\x85あ""".encode('utf-8').decode('unicode_escape')<tab>convert and escape string "\\xc3\\x85あ" to UTF-8 code<eos>
<sos>"""\\xc3\\x85あ""".encode('utf-8')<tab>encode string "\\xc3\\x85あ" to bytes<eos>
<sos>[j for i in zip(a, b) for j in i]<tab>interleave the elements of two lists `a` and `b`<eos>
<sos>[j for i in zip(a, b) for j in i]<tab>merge two lists `a` and `b` into a single list<eos>
<sos>print([s.replace('8', '') for s in lst])<tab>delete all occureces of `8` in each string `s` in list `lst`<eos>
<sos>""",""".join('Hello')<tab>Split string `Hello` into a string of letters seperated by `,`<eos>
<sos>Content.objects.all().order_by('?')[:100]<tab>in Django, select 100 random records from the database `Content.objects`<eos>
<sos>A[np.arange(A.shape[0])[:, (None)], B]<tab>create a NumPy array containing elements of array `A` as pointed to by index in array `B`<eos>
<sos>df.pivot_table(index='saleid', columns='upc', aggfunc='size', fill_value=0)<tab>pivot dataframe `df` so that values for `upc` become column headings and values for `saleid` become the index<eos>
<sos>re.findall('([a-z]*)', 'f233op')<tab>match zero-or-more instances of lower case alphabet characters in a string `f233op `<eos>
<sos>re.findall('([a-z])*', 'f233op')<tab>match zero-or-more instances of lower case alphabet characters in a string `f233op `<eos>
<sos>re.split('_for_', 'happy_hats_for_cats')<tab>split string 'happy_hats_for_cats' using string '_for_'<eos>
<sos>re.split('_(?:for|or|and)_', 'sad_pandas_and_happy_cats_for_people')<tab>Split string 'sad_pandas_and_happy_cats_for_people' based on string 'and', 'or' or 'for'<eos>
<sos>[re.split('_(?:f?or|and)_', s) for s in l]<tab>Split a string `l` by multiple words `for` or `or` or `and`<eos>
<sos>[dict(zip(k, x)) for x in v]<tab>zip keys with individual values in lists `k` and `v`<eos>
<sos>sorted(lst, reverse=True)<tab>Sort a list 'lst' in descending order.<eos>
<sos>order_array.sort(order=['year', 'month', 'day'])<tab>sort array `order_array` based on column 'year', 'month' and 'day'<eos>
<sos>df.sort(['year', 'month', 'day'])<tab>Sort a structured numpy array 'df' on multiple columns 'year', 'month' and 'day'.<eos>
<sos>return my_list == list(range(my_list[0], my_list[-1] + 1))<tab>check if elements in list `my_list` are coherent in order<eos>
<sos>df.groupby('id').agg(lambda x: x.tolist())<tab>group rows of pandas dataframe `df` with same 'id'<eos>
<sos>'X\xc3\xbcY\xc3\x9f'.encode('raw_unicode_escape').decode('utf-8')<tab>encode `u'X\xc3\xbcY\xc3\x9f'` as unicode and decode with utf-8<eos>
<sos>float(a)<tab>parse string `a` to float<eos>
<sos>try:
    return int(s)
except ValueError:
    return float(s)<tab>Parse String `s` to Float or Int<eos>
<sos>if hasattr(a, 'property'):
    pass<tab>check if object `a` has property 'property'<eos>
<sos>if hasattr(a, 'property'):
    pass<tab>check if object `a` has property 'property'<eos>
<sos>getattr(a, 'property', 'default value')<tab>get the value of attribute 'property' of object `a` with default value 'default value'<eos>
<sos>np.delete(a, list(range(0, a.shape[1], 8)), axis=1)<tab>delete every 8th column in a numpy array 'a'.<eos>
<sos>datetime.datetime.fromtimestamp(ms / 1000.0)<tab>convert `ms` milliseconds to a datetime object<eos>
<sos>np.einsum('...j,...j->...', vf, vf)<tab>find the magnitude (length) squared of a vector `vf` field<eos>
<sos>r = requests.get(url)<tab>request http url `url`<eos>
<sos>r = requests.get(url, params=payload)<tab>request http url `url` with parameters `payload`<eos>
<sos>r = requests.post(url, data=payload)<tab>post request url `url` with parameters `payload`<eos>
<sos>post_response = requests.post(url='http://httpbin.org/post', json=post_data)<tab>make an HTTP post request with data `post_data`<eos>
<sos>{{(mylist | slice): '3:8'}}<tab>django jinja slice list `mylist` by '3:8'<eos>
<sos>df1 = pd.read_hdf('/home/.../data.h5', 'firstSet')<tab>create dataframe `df` with content of hdf store file '/home/.../data.h5' with key of 'firstSet'<eos>
<sos>max(test_string.rfind(i) for i in '([{')<tab>get the largest index of the last occurrence of characters '([{' in string `test_string`<eos>
<sos>print('here is your checkmark: ' + '\u2713')<tab>print 'here is your checkmark: ' plus unicode character u'\u2713'<eos>
<sos>print('\u0420\u043e\u0441\u0441\u0438\u044f')<tab>print unicode characters in a string `\u0420\u043e\u0441\u0441\u0438\u044f`<eos>
<sos>print('{0}'.format('5'.zfill(2)))<tab>pads string '5' on the left with 1 zero<eos>
<sos>sorted(set(itertools.chain.from_iterable(sequences)))<tab>Remove duplicates elements from list `sequences` and sort it in ascending order<eos>
<sos>df['a'].values.tolist()<tab>pandas dataframe `df` column 'a' to list<eos>
<sos>df['a'].tolist()<tab>Get a list of all values in column `a` in pandas data frame `df`<eos>
<sos>replace('"', '\\"')<tab>escaping quotes in string<eos>
<sos>print(all(word[0].isupper() for word in words))<tab>check if all string elements in list `words` are upper-cased<eos>
<sos>myDict = {key: val for key, val in list(myDict.items()) if val != 42}<tab>remove items from dictionary `myDict` if the item's value `val` is equal to 42<eos>
<sos>{key: val for key, val in list(myDict.items()) if val != 42}<tab>Remove all items from a dictionary `myDict` whose values are `42`<eos>
<sos>return len(s.encode('utf-8'))<tab>Determine the byte length of a utf-8 encoded string `s`<eos>
<sos>os.kill(process.pid, signal.SIGKILL)<tab>kill a process with id `process.pid`<eos>
<sos>df[pd.isnull(df).any(axis=1)]<tab>get data of columns with Null values in dataframe `df`<eos>
<sos>url.split('&')[-1].replace('=', '') + '.html'<tab>strip everything up to and including the character `&` from url `url`, strip the character `=` from the remaining string and concatenate `.html` to the end<eos>
<sos>parser.ParseFile(open('sample.xml', 'rb'))<tab>Parse a file `sample.xml` using expat parsing in python 3<eos>
<sos>sys.exit()<tab>Exit script<eos>
<sos>setattr(self, attr, group)<tab>assign value in `group` dynamically to class property `attr`<eos>
<sos>urllib.parse.unquote(urllib.parse.unquote(some_string))<tab>decode url-encoded string `some_string` to its character equivalents<eos>
<sos>urllib.parse.unquote(urllib.parse.unquote('FireShot3%2B%25282%2529.png'))<tab>decode a double URL encoded string 
'FireShot3%2B%25282%2529.png' to
'FireShot3+(2).png'<eos>
<sos>app.config['SECURITY_REGISTER_URL'] = '/create_account'<tab>change flask security register url to `/create_account`<eos>
<sos>output = open('/home/user/test/wsservice/data.pkl', 'wb')<tab>open a file `/home/user/test/wsservice/data.pkl` in binary write mode<eos>
<sos>del a[(-1)]<tab>remove the last element in list `a`<eos>
<sos>a.pop(1)<tab>remove the element in list `a` with index 1<eos>
<sos>a.pop()<tab>remove the last element in list `a`<eos>
<sos>a.pop(index)<tab>remove the element in list `a` at index `index`<eos>
<sos>del a[index]<tab>remove the element in list `a` at index `index`<eos>
<sos>ax.set_xlabel('Temperature (\u2103)')<tab>print a celsius symbol on x axis of a plot `ax`<eos>
<sos>ax.set_xlabel('Temperature ($^\\circ$C)')<tab>Print a celsius symbol with matplotlib<eos>
<sos>[''.join(l) for l in list_of_lists]<tab>convert a list of lists `list_of_lists` into a list of strings keeping empty sub-lists as empty string ''<eos>
<sos>pd.concat(g for _, g in df.groupby('ID') if len(g) > 1)<tab>get a list of all the duplicate items in dataframe `df` using pandas<eos>
<sos>x = numpy.delete(x, 2, axis=1)<tab>Delete third row in a numpy array `x`<eos>
<sos>x = numpy.delete(x, 0, axis=0)<tab>delete first row of array `x`<eos>
<sos>pd.concat((df1, df2), axis=1).mean(axis=1)<tab>merge rows from dataframe `df1` with rows from dataframe `df2` and calculate the mean for rows that have the same value of axis 1<eos>
<sos>np.mean(np.array([old_set, new_set]), axis=0)<tab>Get the average values from two numpy arrays `old_set` and `new_set`<eos>
<sos>scatter(x, y, s=500, color='green', marker='h')<tab>Matplotlib change marker size to 500<eos>
<sos>result = [item for word in words for item in word.split(',')]<tab>Create new list `result` by splitting each item in list `words`<eos>
<sos>datetime.datetime.strptime('2012-05-29T19:30:03.283Z', '%Y-%m-%dT%H:%M:%S.%fZ')<tab>convert JSON string '2012-05-29T19:30:03.283Z' into a DateTime object using format '%Y-%m-%dT%H:%M:%S.%fZ'<eos>
<sos>sum(item['one'] for item in list(tadas.values()))<tab>count `True` values associated with key 'one' in dictionary `tadas`<eos>
<sos>a = open('pdf_reference.pdf', 'rb').read().encode('base64')<tab>encode a pdf file `pdf_reference.pdf` with `base64` encoding<eos>
<sos>a.rstrip().split('\n')<tab>split string `a` using new-line character '\n' as separator<eos>
<sos>a.split('\n')[:-1]<tab>split a string `a` with new line character<eos>
<sos>return HttpResponse(status=204)<tab>return http status code 204 from a django view<eos>
<sos>(7 in a)<tab>check if 7 is in `a`<eos>
<sos>('a' in a)<tab>check if 'a' is in list `a`<eos>
<sos>sorted(results, key=itemgetter('year'))<tab>sort list `results` by keys value 'year'<eos>
<sos>print(browser.current_url)<tab>get current url in selenium webdriver `browser`<eos>
<sos>re.split('; |, ', str)<tab>split string `str` with delimiter '; ' or delimiter ', '<eos>
<sos>"""\\u003Cp\\u003E""".decode('unicode-escape')<tab>un-escaping characters in a string with python<eos>
<sos>time.mktime(datetime.datetime.strptime(s, '%d/%m/%Y').timetuple())<tab>convert date string `s` in format pattern '%d/%m/%Y' into a timestamp<eos>
<sos>int(datetime.datetime.strptime('01/12/2011', '%d/%m/%Y').strftime('%s'))<tab>convert string '01/12/2011' to an integer timestamp<eos>
<sos>request.headers['your-header-name']<tab>get http header of the key 'your-header-name' in flask<eos>
<sos>df.groupby('User')['X'].filter(lambda x: x.sum() == 0)<tab>select records of dataframe `df` where the sum of column 'X' for each value in column 'User' is 0<eos>
<sos>df.loc[df.groupby('User')['X'].transform(sum) == 0]<tab>Get data of dataframe `df` where the sum of column 'X' grouped by column 'User' is equal to 0<eos>
<sos>df.groupby('User')['X'].transform(sum) == 0<tab>Get data from dataframe `df` where column 'X' is equal to 0<eos>
<sos>driver.find_elements_by_xpath("//*[contains(text(), 'My Button')]")<tab>None<eos>
<sos>df.set_index(['Name', 'Destination'])<tab>convert pandas group by object to multi-indexed dataframe with indices 'Name' and 'Destination'<eos>
<sos>print(re.sub('(\\W)\\1+', '\\1', a))<tab>coalesce non-word-characters in string `a`<eos>
<sos>os.system('start "$file"')<tab>open a file "$file" under Unix<eos>
<sos>unicodedata.normalize('NFKD', title).encode('ascii', 'ignore')<tab>Convert a Unicode string `title` to a 'ascii' string<eos>
<sos>a.encode('ascii', 'ignore')<tab>Convert a Unicode string `a` to a 'ascii' string<eos>
<sos>files = [f for f in os.listdir('.') if re.match('[0-9]+.*\\.jpg', f)]<tab>create a list `files` containing all files in directory '.' that starts with numbers between 0 and 9 and ends with the extension '.jpg'<eos>
<sos>np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]<tab>adding a 1-d array `[1, 2, 3, 4, 5, 6, 7, 8, 9]` to a 3-d array `np.zeros((6, 9, 20))`<eos>
<sos>np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))<tab>add array of shape `(6, 9, 20)` to array `[1, 2, 3, 4, 5, 6, 7, 8, 9]`<eos>
<sos>os.system('start excel.exe <path/to/file>')<tab>None<eos>
<sos>print(max(x, key=sum))<tab>get the list with the highest sum value in list `x`<eos>
<sos>sum(len(y) for y in x if len(y) > 1)<tab>sum the length of lists in list `x` that are more than 1 item in length<eos>
<sos>re.sub('(\\d+)', '"\\1"', 'This is number 1 and this is number 22')<tab>Enclose numbers in quotes in a string `This is number 1 and this is number 22`<eos>
<sos>numpy.dot(numpy.dot(a, m), a)<tab>multiply the columns of sparse matrix `m` by array `a` then multiply the rows of the resulting matrix by array `a`<eos>
<sos>Entry.objects.filter(name='name', title='title').exists()<tab>Django check if an object with criteria `name` equal to 'name' and criteria `title` equal to 'title' exists in model `Entry`<eos>
<sos>sorted(l, key=lambda x: (-int(x[1]), x[0]))<tab>sort a nested list by the inverse of element 2, then by element 1<eos>
<sos>request.META['HTTP_HOST']<tab>get domain/host name from request object in Django<eos>
<sos>re.findall("api\\('(.*?)'", "api('randomkey123xyz987', 'key', 'text')")<tab>get a string `randomkey123xyz987` between two substrings in a string `api('randomkey123xyz987', 'key', 'text')` using regex<eos>
<sos>subprocess.call(['/usr/bin/perl', './uireplace.pl', var])<tab>invoke perl script './uireplace.pl' using perl interpeter '/usr/bin/perl' and send argument `var` to it<eos>
<sos>print('\n'.join(str(p) for p in myList))<tab>print list of items `myList`<eos>
<sos>mydic.update({i: o['name']})<tab>update the dictionary `mydic` with dynamic keys `i` and values with key 'name' from dictionary `o`<eos>
<sos>list(stru.decode('utf-8'))<tab>split a `utf-8` encoded string `stru` into a list of characters<eos>
<sos>u = s.decode('utf-8-sig')<tab>convert utf-8 with bom string `s` to utf-8 with no bom `u`<eos>
<sos>Entry.objects.filter(~Q(id=3))<tab>Filter model 'Entry' where 'id' is not equal to 3 in Django<eos>
<sos>getattr(__builtins__, 'range')<tab>lookup an attribute in any scope by name 'range'<eos>
<sos>subprocess.call(['shutdown', '/r', '/t', '900'])<tab>restart a computer after `900` seconds using subprocess<eos>
<sos>subprocess.call(['shutdown', '/s'])<tab>shutdown a computer using subprocess<eos>
<sos>subprocess.call(['shutdown', '/a '])<tab>abort a computer shutdown using subprocess<eos>
<sos>subprocess.call(['shutdown', '/l '])<tab>logoff computer having windows operating system using python<eos>
<sos>subprocess.call(['shutdown', '/r'])<tab>shutdown and restart a computer running windows from script<eos>
<sos>open('filename', 'w').close()<tab>erase the contents of a file `filename`<eos>
<sos>open('file.txt', 'w').close()<tab>None<eos>
<sos>df.to_dict('index')<tab>convert dataframe `df` to list of dictionaries including the index values<eos>
<sos>df.to_dict('records')<tab>Create list of dictionaries from pandas dataframe `df`<eos>
<sos>df.groupby(pd.TimeGrouper(freq='M'))<tab>Group a pandas data frame by monthly frequenct `M` using groupby<eos>
<sos>[(c / t) for c, t in zip(conversions, trials)]<tab>divide the members of a list `conversions` by the corresponding members of another list `trials`<eos>
<sos>sorted(data, key=data.get)<tab>sort dict `data` by value<eos>
<sos>sorted(data.values())<tab>Sort a dictionary `data` by its values<eos>
<sos>sorted(list(data.items()), key=lambda x: x[1])<tab>Get a list of pairs of key-value sorted by values in dictionary `data`<eos>
<sos>sorted(list(data.items()), key=lambda x: x[1])<tab>None<eos>
<sos>now = datetime.datetime.now().strftime('%H:%M:%S')<tab>display current time<eos>
<sos>"""foo bar bar bar""".replace('bar', 'XXX', 1).find('bar')<tab>find the index of the second occurrence of the substring `bar` in string `foo bar bar bar`<eos>
<sos>set(['stackoverflow', 'google']).issubset(sites)<tab>check if key 'stackoverflow' and key 'google' are presented in dictionary `sites`<eos>
<sos>stuff.replace(' and ', '/')<tab>replace string ' and ' in string `stuff` with character '/'<eos>
<sos>np.savez(tmp, *[getarray[0], getarray[1], getarray[8]])<tab>Save array at index 0, index 1 and index 8 of array `np` to tmp file `tmp`<eos>
<sos>t = datetime.datetime.now()
(t - datetime.timedelta(hours=1, minutes=10))<tab>substract 1 hour and 10 minutes from current time<eos>
<sos>(t - datetime.timedelta(hours=1, minutes=10))<tab>subtract 1 hour and 10 minutes from time object `t`<eos>
<sos>dt = datetime.datetime.combine(datetime.date.today(), t)<tab>add 1 hour and 2 minutes to time object `t`<eos>
<sos>dt -= datetime.timedelta(hours=5)<tab>subtract 5 hours from the time object `dt`<eos>
<sos>print(data.encode('hex'))<tab>encode string `data` using hex 'hex' encoding<eos>
<sos>print(' '.join([str(ord(a)) for a in data]))<tab>Return the decimal value for each hex character in data `data`<eos>
<sos>[x for x in l if x[1] == 1]<tab>Get all the items from a list of tuple 'l' where second item in tuple is '1'.<eos>
<sos>a.fromlist([int(val) for val in stdin.read().split()])<tab>Create array `a` containing integers from stdin<eos>
<sos>print(re.sub('[_%^$]', '\\\\\\g<0>', line))<tab>place '\' infront of each non-letter char in string `line`<eos>
<sos>doc.xpath("//a[starts-with(text(),'some text')]")<tab>Get all `a` tags where the text starts with value `some text` using regex<eos>
<sos>zip(*a)<tab>convert a list of lists `a` into list of tuples of appropriate elements form nested lists<eos>
<sos>[map(int, sublist) for sublist in lst]<tab>convert a list of strings `lst` to list of integers<eos>
<sos>[[int(x) for x in sublist] for sublist in lst]<tab>convert strings in list-of-lists `lst` to ints<eos>
<sos>np.where(np.in1d(A, B))[0]<tab>get index of elements in array `A` that occur in another array `B`<eos>
<sos>[{'key1': a, 'key2': b} for a, b in zip(d['key1'], d['key2'])]<tab>create a list where each element is a dictionary with keys 'key1' and 'key2' and values corresponding to each value in the lists referenced by keys 'key1' and 'key2' in dictionary `d`<eos>
<sos>map(dict, zip(*[[(k, v) for v in value] for k, value in list(d.items())]))<tab>None<eos>
<sos>calendar.monthrange(2002, 1)<tab>Get Last Day of the first month in 2002<eos>
<sos>calendar.monthrange(2008, 2)<tab>Get Last Day of the second month in 2002<eos>
<sos>calendar.monthrange(2100, 2)<tab>Get Last Day of the second month in 2100<eos>
<sos>calendar.monthrange(year, month)[1]<tab>Get Last Day of the month `month` in year `year`<eos>
<sos>monthrange(2012, 2)<tab>Get Last Day of the second month in year 2012<eos>
<sos>(datetime.date(2000, 2, 1) - datetime.timedelta(days=1))<tab>Get Last Day of the first month in year 2000<eos>
<sos>from subprocess import call<tab>Calling an external command "ls -l"<eos>
<sos>os.system('some_command with args')<tab>Calling an external command "some_command with args"<eos>
<sos>os.system('some_command < input_file | another_command > output_file')<tab>Calling an external command "some_command < input_file | another_command > output_file"<eos>
<sos>stream = os.popen('some_command with args')<tab>Calling an external command "some_command with args"<eos>
<sos>print(subprocess.Popen('echo Hello World', shell=True, stdout=subprocess.PIPE).stdout.read())<tab>Calling an external command "echo Hello World"<eos>
<sos>print(os.popen('echo Hello World').read())<tab>Calling an external command "echo Hello World"<eos>
<sos>return_code = subprocess.call('echo Hello World', shell=True)<tab>Calling an external command "echo Hello World"<eos>
<sos>p = subprocess.Popen('ls', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
for line in p.stdout.readlines():
    print(line, end=' ')
retval = p.wait()<tab>Calling an external command "ls"<eos>
<sos>call(['ls', '-l'])<tab>Calling an external command "ls -l"<eos>
<sos>print(urllib.parse.unquote(url).decode('utf8'))<tab>decode url `url` with utf8 and print it<eos>
<sos>url = urllib.parse.unquote(url).decode('utf8')<tab>decode a urllib escaped url string `url` with `utf8`<eos>
<sos>"""""".join(filter(str.isdigit, '12454v'))<tab>delete letters from string '12454v'<eos>
<sos>df['Season'].str.split('-').str[0].astype(int)<tab>Update row values for a column `Season` using vectorized string operation in pandas<eos>
<sos>my_list.sort(key=lambda x: x[1])<tab>sort a list of tuples `my_list` by second parameter in the tuple<eos>
<sos>[m.start() for m in re.finditer('(?=tt)', 'ttt')]<tab>find indexes of all occurrences of a substring `tt` in a string `ttt`<eos>
<sos>[m.start() for m in re.finditer('test', 'test test test test')]<tab>find all occurrences of a substring in a string<eos>
<sos>re.findall('\\s+|\\S+', s)<tab>split string `s` based on white spaces<eos>
<sos>rdata.set_index(['race_date', 'track_code', 'race_number'])<tab>set columns `['race_date', 'track_code', 'race_number']` as indexes in dataframe `rdata`<eos>
<sos>for (root, subFolders, files) in os.walk(rootdir):
    pass<tab>recursively go through all subdirectories and files in `rootdir`<eos>
<sos>list.sort(key=lambda item: item['date'], reverse=True)<tab>sort a list of dictionary values by 'date' in reverse order<eos>
<sos>"""{:.5}""".format('aaabbbccc')<tab>display first 5 characters of string 'aaabbbccc'<eos>
<sos>struct.unpack('11B', s)<tab>unpack hexadecimal string `s` to a list of integer values<eos>
<sos>[i for i, j in enumerate(['foo', 'bar', 'baz']) if j == 'foo']<tab>finding the index of an item 'foo' given a list `['foo', 'bar', 'baz']` containing it<eos>
<sos>print(list(itertools.product([1, 2, 3], [4, 5, 6])))<tab>generate all permutations of list `[1, 2, 3]` and list `[4, 5, 6]`<eos>
<sos>itertools.permutations([1, 2, 3])<tab>generate all permutations of a list `[1, 2, 3]`<eos>
<sos>return re.sub('\\p{P}+', '', text)<tab>substitute occurrences of unicode regex pattern u'\\p{P}+' with empty string '' in string `text`<eos>
<sos>raise ValueError('A very specific bad thing happened')<tab>manually throw/raise a `ValueError` exception with the message 'A very specific bad thing happened'<eos>
<sos>raise Exception('I know Python!')<tab>throw an exception "I know Python!"<eos>
<sos>raise Exception('I know python!')<tab>Manually throw an exception "I know python!"<eos>
<sos>raise ValueError('represents a hidden bug, do not catch this')<tab>throw a ValueError with message 'represents a hidden bug, do not catch this'<eos>
<sos>raise Exception('This is the exception you expect to handle')<tab>throw an Exception with message 'This is the exception you expect to handle'<eos>
<sos>raise ValueError('A very specific bad thing happened')<tab>throw a value error with message 'A very specific bad thing happened', 'foo', 'bar', 'baz'<eos>
<sos>raise RuntimeError('specific message')<tab>throw a runtime error with message 'specific message'<eos>
<sos>raise AssertionError("Unexpected value of 'distance'!", distance)<tab>throw an assertion error with message "Unexpected value of 'distance'!", distance<eos>
<sos>driver.find_element_by_id('foo').clear()<tab>if Selenium textarea element `foo` is not empty, clear the field<eos>
<sos>driver.find_element_by_id('foo').clear()<tab>clear text from textarea 'foo' with selenium<eos>
<sos>socket.inet_ntoa(struct.pack('!L', 2130706433))<tab>convert a number 2130706433 to ip string<eos>
<sos>df = df[['x', 'y', 'a', 'b']]<tab>Rearrange the columns 'a','b','x','y' of pandas DataFrame `df` in mentioned sequence 'x' ,'y','a' ,'b'<eos>
<sos>super(ChildClass, self).__init__(*args, **kwargs)<tab>call base class's __init__ method from the child class `ChildClass`<eos>
<sos>sum(d.values())<tab>sum of all values in a python dict `d`<eos>
<sos>sum(d.values())<tab>None<eos>
<sos>json.dumps(your_data, ensure_ascii=False)<tab>convert python dictionary `your_data` to json array<eos>
<sos>values = np.array([i for i in range(100)], dtype=np.float64)<tab>assign an array of floats in range from 0 to 100 to a variable `values`<eos>
<sos>sorted(list_of_dct, key=lambda x: order.index(list(x.values())[0]))<tab>sort a list of dictionaries `list_of_dct` by values in an order `order`<eos>
<sos>return s[0].upper() + s[1:]<tab>change the case of the first letter in string `s`<eos>
<sos>"""""".join([1, 2, 3, 4])<tab>join list of numbers `[1,2,3,4] ` to string of numbers.<eos>
<sos>line = line.decode('utf-8', 'ignore').encode('utf-8')<tab>delete every non `utf-8` characters from a string `line`<eos>
<sos>os.system(command)<tab>execute a command `command ` in the terminal from a python script<eos>
<sos>c.execute('SELECT * FROM foo WHERE bar = %s AND baz = %s', (param1, param2))<tab>MySQL execute query 'SELECT * FROM foo WHERE bar = %s AND baz = %s' with parameters `param1` and `param2`<eos>
<sos>dateobj = datetime.datetime.strptime(datestr, '%Y-%m-%d').date()<tab>Parse string `datestr` into a datetime object using format pattern '%Y-%m-%d'<eos>
